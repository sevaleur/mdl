/*! For license information please see main.103a4bf3c1884d79478f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateitsforgotham("main",{"./app/components/Canvas/Project/Media.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>u});var i=t("./node_modules/ogl/src/core/Texture.js"),h=t("./node_modules/ogl/src/core/Program.js"),a=t("./node_modules/ogl/src/core/Mesh.js"),r=t("./node_modules/gsap/index.js"),n=t("./app/shaders/plane-vertex.glsl"),o=t("./app/shaders/plane-fragment.glsl");class u{constructor({element:e,geometry:s,gl:t,index:i,scene:h,sizes:a}){this.element=e,this.geo=s,this.gl=t,this.index=i,this.scene=h,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new i.Texture(this.gl),this.image=new Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=e=>{this.texture.image=this.image}}createProgram(){this.program=new h.Program(this.gl,{vertex:n.default,fragment:o.default,uniforms:{tMap:{value:this.texture},u_imageSize:{value:[this.image.naturalWidth,this.image.naturalHeight]},u_planeSizes:{value:[0,0]},u_offset:{value:0}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height,this.targetScaleX=.83,this.targetScaleY=1.3,this.program.uniforms.u_planeSizes.value=[this.mesh.scale.x,this.mesh.scale.y]}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(e=0,s){this.y=(this.bounds.top+e)/window.innerHeight;const t=this.mesh.position.y-s/100;console.log(t),this.program.uniforms.u_offset.value=r.default.utils.mapRange(-4,4,-.35,.35,t),this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(e,s){this.bounds&&(this.updateX(e.x),this.updateY(e.y,s.current))}}}},(function(e){e.h=()=>"7d92d838e8953504888a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsR0FBSSxJQUFNLElBQU1ILEdBRS9FbEQsS0FBSzBCLEtBQUtxQixTQUFTSixFQUFLM0MsS0FBS0QsTUFBTXFDLE9BQVMsRUFBTXBDLEtBQUswQixLQUFLZSxNQUFNRSxFQUFJLEVBQU0zQyxLQUFLMkMsRUFBSTNDLEtBQUtELE1BQU1xQyxNQUNsRyxDQUVBa0IsT0FBT0MsRUFBUVosR0FFVDNDLEtBQUs4QixTQUVUOUIsS0FBS2lDLFFBQVFzQixFQUFPYixHQUNwQjFDLEtBQUtrQyxRQUFRcUIsRUFBT1osRUFBR0EsRUFBRUssU0FDM0Isa0JDM0hGUSxFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL1Byb2plY3QvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtLCBUZXh0dXJlIH0gZnJvbSAnb2dsJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcblxuaW1wb3J0IHZlcnRleCBmcm9tICdzaGFkZXJzL3BsYW5lLXZlcnRleC5nbHNsJ1xuaW1wb3J0IGZyYWdtZW50IGZyb20gJ3NoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZ2xzbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFcbntcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBnZW9tZXRyeSwgZ2wsIGluZGV4LCBzY2VuZSwgc2l6ZXMgfSlcbiAge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmdlbyA9IGdlb21ldHJ5XG4gICAgdGhpcy5nbCA9IGdsXG4gICAgdGhpcy5pbmRleCA9IGluZGV4XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lXG4gICAgdGhpcy5zaXplcyA9IHNpemVzXG5cbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpXG4gICAgdGhpcy5jcmVhdGVNZXNoKClcbiAgfVxuXG4gIC8qXG4gICAgQ3JlYXRlLlxuICAqL1xuXG4gIGNyZWF0ZVRleHR1cmUoKVxuICB7XG4gICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUodGhpcy5nbClcblxuICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKVxuICAgIHRoaXMuaW1hZ2UuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJ1xuICAgIHRoaXMuaW1hZ2Uuc3JjID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKVxuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gXyA9PiB7IHRoaXMudGV4dHVyZS5pbWFnZSA9IHRoaXMuaW1hZ2UgfVxuXG4gIH1cblxuICBjcmVhdGVQcm9ncmFtKClcbiAge1xuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsXG4gICAge1xuICAgICAgdmVydGV4LFxuICAgICAgZnJhZ21lbnQsXG4gICAgICB1bmlmb3JtczpcbiAgICAgIHtcbiAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH0sXG4gICAgICAgIHVfaW1hZ2VTaXplOiB7IHZhbHVlOiBbdGhpcy5pbWFnZS5uYXR1cmFsV2lkdGgsIHRoaXMuaW1hZ2UubmF0dXJhbEhlaWdodF0gfSxcbiAgICAgICAgdV9wbGFuZVNpemVzOiB7IHZhbHVlOiBbMCwgMF0gfSxcbiAgICAgICAgdV9vZmZzZXQ6IHsgdmFsdWU6IDAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjcmVhdGVNZXNoKClcbiAge1xuICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlbyxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbVxuICAgIH0pXG5cbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXG4gIH1cblxuICBjcmVhdGVCb3VuZHMoeyBzaXplcyB9KVxuICB7XG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIHRoaXMudXBkYXRlU2NhbGUoc2l6ZXMpXG4gICAgdGhpcy51cGRhdGVYKClcbiAgICB0aGlzLnVwZGF0ZVkoKVxuICB9XG5cbiAgLypcbiAgICBFdmVudHMuXG4gICovXG5cbiAgb25SZXNpemUoc2l6ZXMpXG4gIHtcbiAgICB0aGlzLmNyZWF0ZUJvdW5kcyhzaXplcylcbiAgfVxuXG4gIC8qXG4gICAgVXBkYXRlLlxuICAqL1xuXG4gIHVwZGF0ZVNjYWxlKClcbiAge1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3VuZHMuaGVpZ2h0IC8gd2luZG93LmlubmVySGVpZ2h0XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGhcblxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGhcbiAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogdGhpcy5oZWlnaHRcblxuICAgIHRoaXMudGFyZ2V0U2NhbGVYID0gMC44MztcbiAgICB0aGlzLnRhcmdldFNjYWxlWSA9IDEuMztcblxuICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51X3BsYW5lU2l6ZXMudmFsdWUgPSBbdGhpcy5tZXNoLnNjYWxlLngsIHRoaXMubWVzaC5zY2FsZS55XTtcbiAgfVxuXG4gIHVwZGF0ZVgoeCA9IDApXG4gIHtcbiAgICB0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGhcblxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0gKC10aGlzLnNpemVzLndpZHRoIC8gMikgKyAodGhpcy5tZXNoLnNjYWxlLnggLyAyKSArICh0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoKVxuICB9XG5cbiAgdXBkYXRlWSh5ID0gMCwgY3VycmVudClcbiAge1xuICAgIHRoaXMueSA9ICh0aGlzLmJvdW5kcy50b3AgKyB5KSAvIHdpbmRvdy5pbm5lckhlaWdodFxuXG4gICAgY29uc3QgcG9zaXRpb25JblZpZXdwb3J0ID0gdGhpcy5tZXNoLnBvc2l0aW9uLnkgLSBjdXJyZW50IC8gMTAwXG4gICAgY29uc29sZS5sb2cocG9zaXRpb25JblZpZXdwb3J0KVxuICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51X29mZnNldC52YWx1ZSA9IGdzYXAudXRpbHMubWFwUmFuZ2UoLTQsIDQsIC0wLjM1LCAwLjM1LCBwb3NpdGlvbkluVmlld3BvcnQpXG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9ICh0aGlzLnNpemVzLmhlaWdodCAvIDIpIC0gKHRoaXMubWVzaC5zY2FsZS55IC8gMikgLSAodGhpcy55ICogdGhpcy5zaXplcy5oZWlnaHQpXG4gIH1cblxuICB1cGRhdGUoc2Nyb2xsLCB5KVxuICB7XG4gICAgaWYoIXRoaXMuYm91bmRzKSByZXR1cm5cblxuICAgIHRoaXMudXBkYXRlWChzY3JvbGwueClcbiAgICB0aGlzLnVwZGF0ZVkoc2Nyb2xsLnksIHkuY3VycmVudClcbiAgfVxufVxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiN2Q5MmQ4MzhlODk1MzUwNDg4OGFcIikiXSwibmFtZXMiOlsiTWVkaWEiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJnZW9tZXRyeSIsImdsIiwiaW5kZXgiLCJzY2VuZSIsInNpemVzIiwidGhpcyIsImdlbyIsImNyZWF0ZVRleHR1cmUiLCJjcmVhdGVQcm9ncmFtIiwiY3JlYXRlTWVzaCIsInRleHR1cmUiLCJUZXh0dXJlIiwiaW1hZ2UiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwic3JjIiwiZ2V0QXR0cmlidXRlIiwib25sb2FkIiwiXyIsInByb2dyYW0iLCJQcm9ncmFtIiwidmVydGV4IiwiZnJhZ21lbnQiLCJ1bmlmb3JtcyIsInRNYXAiLCJ2YWx1ZSIsInVfaW1hZ2VTaXplIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsInVfcGxhbmVTaXplcyIsInVfb2Zmc2V0IiwibWVzaCIsIk1lc2giLCJzZXRQYXJlbnQiLCJjcmVhdGVCb3VuZHMiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ1cGRhdGVTY2FsZSIsInVwZGF0ZVgiLCJ1cGRhdGVZIiwib25SZXNpemUiLCJoZWlnaHQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsInNjYWxlIiwieCIsInkiLCJ0YXJnZXRTY2FsZVgiLCJ0YXJnZXRTY2FsZVkiLCJsZWZ0IiwicG9zaXRpb24iLCJjdXJyZW50IiwidG9wIiwicG9zaXRpb25JblZpZXdwb3J0IiwiY29uc29sZSIsImxvZyIsImdzYXAiLCJ1cGRhdGUiLCJzY3JvbGwiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=