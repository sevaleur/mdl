/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.gallery__media__images__image, .gallery__media, .gallery__wrapper, .about__media__figure__image, .home__gallery__media__image, .home__gallery, .home__wrapper, .preloader, .content, body, html, .gallery, .about, .home {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

.about__contact__details, .about__contact__title, .about__desc__location, .about__desc__gc__title, .about__background__gc__smdesc, .preloader {
  display: flex;
  align-items: center;
  justify-content: center;
}

.dg.ac {
  z-index: 99999 !important;
}

/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.gallery, .about, .home {
  opacity: 0;
  visibility: hidden;
}

.about__contact__details__text, .navigation__list__item__link, .navigation__home__link {
  position: relative;
  overflow: hidden;
  display: inline-block;
  vertical-align: top;
}

.about__contact__details__text:after, .navigation__list__item__link:after, .navigation__home__link:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1px;
  background: currentColor;
  transition: transform 0.7s cubic-bezier(0.77, 0, 0.175, 1);
}

.about__contact__details__text:hover:after, .navigation__list__item__link:hover:after, .navigation__home__link:hover:after {
  transform: scaleX(1);
  transform-origin: center center;
}

.about__contact__details__text:after, .navigation__list__item__link:after, .navigation__home__link:after {
  transform: scaleX(0);
  transform-origin: center center;
}

.about__contact__details__text, .navigation__list__item__link, .navigation__home__link {
  display: inline-block;
}
.about__desc__gc__title__text, .about__background__gc__bg__title__text {
  font-family: "Oswald";
  font-size: 2.5rem;
}

.preloader__text {
  font-family: "Oswald";
  font-size: 5rem;
}

.about__press__title__text, .about__clients__title__text {
  font-family: "Oswald";
  font-size: 7rem;
}

.gallery__title, .about__contact__title__text, .about__desc__location__text, .home__content__title__text {
  font-family: "Oswald";
  font-size: 10rem;
}

.gallery__title__text, .about__footer__title__text, .about__header__title__text {
  font-family: "Oswald";
  font-size: 20rem;
}

.home__links__title__text, body {
  font-size: 1.6rem;
  font-weight: 300;
}

.navigation__list__item__link, .navigation__home__link, .preloader__number {
  font-size: 2rem;
  font-weight: 300;
}

.about__press__content__div__title, .about__desc__gc__desc__text, .about__clients__gallery__client__name, .about__background__desc__frame__text {
  font-size: 2.5rem;
  font-weight: 300;
}

.about__contact__details__text {
  font-size: 4rem;
  font-weight: 300;
}

.about__background__gc__smdesc__text {
  font-size: 5rem;
  font-weight: 300;
}

@font-face {
  font-family: "Source Sans Pro";
  src: url(545b1d89876cda033482.woff2) format("woff2"), url(ba2dbb2d1d0f34f87443.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Oswald";
  src: url(efdbc24c0a6838bdb283.woff2) format("woff2"), url(f94aaeb597c2370f7b9a.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Source Sans Pro";
  src: url(e62207551bebcb4dc41b.woff2) format("woff2"), url(7e685090c03bd76b35f6.woff) format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Oswald";
  src: url(9f41c407c686701ed4b2.woff2) format("woff2"), url(a5749901fe9a8b5a0938.woff) format("woff");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
* {
  box-sizing: border-box;
  user-select: none;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  overflow: hidden;
  position: fixed;
  line-height: 1;
  background: #030303;
  color: #EEF1EF;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw;
  }
}

body {
  position: fixed;
  font-family: "Source Sans Pro";
  /* @include media('<=phone')
  {
    font-size: 100px;
  } */
}

canvas {
  position: relative;
  z-index: 1;
  pointer-events: none;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 0;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}
img.loaded {
  opacity: 1;
}

[data-animation=paragraph],
[data-animation=label],
[data-animation=title] {
  overflow: hidden;
}
[data-animation=paragraph] span,
[data-animation=label] span,
[data-animation=title] span {
  display: inline-block;
  overflow: hidden;
  vertical-align: top;
}

.preloader {
  background: #030303;
  color: #EEF1EF;
  text-align: center;
  z-index: 4;
}
.preloader__text span {
  display: inline-block;
  overflow: hidden;
}
.preloader__number {
  position: absolute;
  bottom: 7.4rem;
  left: 50%;
  transform: translateX(-50%);
  overflow: hidden;
}
.preloader__number__text {
  display: inline-block;
}

.navigation {
  z-index: 3;
  position: fixed;
  width: 100%;
  /* pointer-events: none; */
}

.navigation__wrapper {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 5rem;
}

.navigation__home {
  height: 100%;
  width: 100%;
  position: absolute;
  left: 4rem;
  top: 4rem;
}

.navigation__home__link {
  font-weight: 300;
}

.navigation__list__item {
  pointer-events: auto;
  position: absolute;
  right: 4rem;
  top: 4rem;
}

.navigation__list__item__link {
  font-weight: 300;
  display: block;
  line-height: 1;
}

.home {
  z-index: 0;
}
.home__wrapper {
  overflow: hidden;
}
.home__gallery {
  z-index: 1;
}
.home__gallery__wrapper {
  display: flex;
  align-items: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-16rem, -50%);
}
.home__gallery__link {
  display: block;
  margin: 0 1.325rem;
}
.home__gallery__link:first-child {
  margin-left: 0;
}
.home__gallery__link:last-child {
  margin-right: 0;
}
.home__gallery__media {
  height: 55rem;
  width: 20rem;
  position: relative;
  visibility: hidden;
}
.home__gallery__media__image {
  object-fit: cover;
}
.home__content__title {
  position: absolute;
  bottom: 6rem;
  left: 4rem;
  text-align: center;
  padding: 1rem;
}
.home__content__title__text {
  padding: 1rem;
  overflow: hidden;
}
.home__content__title__text span span {
  opacity: 0;
}
.home__links {
  position: absolute;
  bottom: 6rem;
  right: 4rem;
  z-index: 1;
}
.home__links__title {
  text-align: right;
  margin: 0.6rem;
}
.home__links__title:first-child {
  margin-top: 0;
}
.home__links__title:last-child {
  margin-bottom: 0;
}
.home__links__title__text {
  font-weight: 300;
  display: block;
  line-height: 1;
  cursor: pointer;
}
.home__links__title__text__link {
  visibility: hidden;
}

.about__media__figure {
  height: 40rem;
  width: 50rem;
  position: relative;
}
.about__media__figure__image {
  object-fit: cover;
}
.about__header {
  padding-top: 10rem;
  display: grid;
  grid-template-columns: 1fr 70rem;
}
.about__header__title {
  grid-area: 1/1/-1/2;
  align-self: center;
  padding: 10rem 12.7rem;
  border-right: 1px solid #A9B4C2;
}
.about__header__title__text {
  letter-spacing: 2rem;
}
.about__header__media {
  grid-area: 1/2/-1/-1;
  align-self: center;
  justify-self: center;
  visibility: hidden;
}
.about__background {
  border-top: 1px solid #A9B4C2;
}
.about__background__gc {
  display: grid;
  grid-template-columns: 1fr 5rem 70rem;
}
.about__background__gc__smdesc {
  grid-area: 1/1/-1/2;
  height: 100%;
  width: 100%;
  align-self: center;
  justify-self: center;
  padding: 10rem 12.7rem;
  border-bottom: 1px solid #A9B4C2;
}
.about__background__gc__bg {
  grid-area: 1/2/-1/3;
  height: 100%;
  width: 100%;
  align-self: flex-start;
  justify-self: center;
}
.about__background__gc__bg__title {
  display: flex;
  justify-content: center;
  align-items: center;
  writing-mode: vertical-rl;
  transform: scale(-1, -1);
  height: 100%;
  width: 100%;
  padding: 2rem 0;
  border-left: 1px solid #A9B4C2;
  border-top: 1px solid #A9B4C2;
}
.about__background__desc {
  grid-area: 1/3/-1/-1;
}
.about__background__desc__frame {
  text-align: center;
  padding: 4rem 2rem;
  border-top: 1px solid #A9B4C2;
}
.about__background__desc__frame:first-of-type {
  border: none;
}
.about__background__desc__frame:last-of-type {
  border-bottom: 1px solid #A9B4C2;
}
.about__clients {
  padding-bottom: 12.7rem;
}
.about__clients__title__text {
  letter-spacing: 2rem;
  padding: 12.7rem;
}
.about__clients__gallery__wrapper {
  padding: 0 35rem;
}
.about__clients__gallery__client {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #A9B4C2;
}
.about__clients__gallery__client__name {
  letter-spacing: 1rem;
  padding: 3rem;
}
.about__desc {
  display: grid;
  grid-template-columns: 1fr 70rem;
  height: 100%;
  width: 100%;
  padding: 12.7rem;
  padding-right: 0;
}
.about__desc__gc {
  grid-area: 1/1/-1/2;
  height: 100%;
  width: 100%;
  align-self: center;
  justify-self: center;
  padding-left: 12.7rem;
  display: grid;
  grid-template-columns: 5rem 1fr;
}
.about__desc__gc__title {
  grid-area: 1/1/-1/2;
  height: 100%;
  width: 100%;
}
.about__desc__gc__title__text {
  writing-mode: vertical-rl;
  transform: scale(-1, -1);
}
.about__desc__gc__desc {
  grid-area: 1/2/-1/-1;
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: flex-start;
  align-items: center;
}
.about__desc__location {
  grid-area: 1/2/-1/-1;
  width: 100%;
  height: 100%;
  padding: 12.7rem;
  border-left: 1px solid #A9B4C2;
}
.about__desc__location__text {
  writing-mode: vertical-lr;
  transform: scale(1, 1);
}
.about__press {
  padding-bottom: 12.7rem;
}
.about__press__title__text {
  text-transform: uppercase;
  letter-spacing: 1rem;
  padding: 12.7rem;
  padding-top: 0;
}
.about__press__content {
  padding: 0 35rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}
.about__press__content__div {
  width: 100%;
  padding: 3rem;
  border-bottom: 1px solid #A9B4C2;
}
.about__press__content__div__title {
  cursor: pointer;
  letter-spacing: 0.5rem;
}
.about__press__content__div__title__link {
  visibility: hidden;
}
.about__contact {
  height: 100%;
  width: 100%;
  padding: 22.7rem;
}
.about__contact__title {
  padding-bottom: 15rem;
}
.about__contact__title__text {
  text-transform: uppercase;
}
.about__contact__details {
  padding-bottom: 12.7rem;
}
.about__contact__details__text {
  letter-spacing: 1rem;
}
.about__footer {
  height: 100%;
  width: 100%;
  padding-bottom: 10rem;
  display: grid;
  grid-template-columns: 70rem 1fr;
  border-top: 1px solid #A9B4C2;
}
.about__footer__media {
  grid-area: 1/1/-1/2;
  align-self: center;
  justify-self: center;
  visibility: hidden;
}
.about__footer__title {
  grid-area: 1/2/-1/-1;
  align-self: center;
  padding: 10rem 12.7rem;
  border-left: 1px solid #A9B4C2;
}
.about__footer__title__text {
  letter-spacing: 2rem;
}

.gallery__media {
  display: grid;
  place-items: center;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.gallery__media__images {
  width: 33rem;
  height: 50rem;
  position: relative;
}
.gallery__media__images__image {
  object-fit: cover;
}
.gallery__title {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.gallery__title__text {
  text-transform: uppercase;
  mix-blend-mode: difference;
  z-index: -5;
  letter-spacing: 2rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7RUFhQztFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUNDRDs7QURFQTs7RUFFQztBQ0NEOztBREVBO0VBQ0M7QUNDRDs7QURFQTtFQUNDO0FDQ0Q7O0FERUE7RUFDQztBQ0NEOztBREVBOztFQUVDO0VBQ0E7QUNDRDs7QURFQTtFQUNDO0VBQ0E7QUNDRDs7QUMvQ0E7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FEaURGOztBQzlDQTtFQUVFO0VBQ0E7RUFDQTtBRGdERjs7QUU3REE7RUFFRTtBRitERjs7QUdqRUE7QUFDQTs7RUFFRTtBSG9FRjs7QUdqRUE7QUFDQTtFQUNFO0FIb0VGOztBR2pFQTs7OztFQUFBO0FBS0E7O0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUhvRUY7O0FHakVBO0FBRUE7RUFDRTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7QUhpRUY7O0FHOURBO0VBQ0U7RUFDQTtFQUVBO0VBQ0E7QUhnRUY7O0FHN0RBO0VBQ0U7RUFDQTtFQUVBO0VBQ0E7RUFFQTtFQUNBOztHQUFBO0VBSUE7RUFDQTtFQUVBO0VBQ0E7QUg0REY7O0FHdkRBO0VBQXVCO0VBQWE7QUg0RHBDOztBRzFEQTtFQUNFO0lBQ0U7SUFDQTtJQUNBO0lBQ0E7RUg2REY7RUcxREE7SUFDRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0VINERGO0VHekRBO0lBQ0U7SUFDQTtJQUNBO0VIMkRGO0VHeERBO0lBQ0U7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0VIMERGO0VHdkRBO0VBQ0E7SUFDRTtJQUNBO0lBRUE7SUFDQTtJQUNBO0lBRUE7SUFDQTtJQUVBO0lBQ0E7RUhzREY7QUFDRjtBSWhMQTtFQUlFO0VBQ0E7QUorS0Y7O0FLcExBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7QUx1TEY7O0FLcExBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBTHVMRjs7QUtwTEE7RUFDRTtFQUNBO0FMdUxGOztBS3BMQTtFQUNFO0VBQ0E7QUx1TEY7O0FLbktBO0VBR0U7QUxvS0Y7QU05TUE7RUFFRSxxQkNFWTtFRERaO0FOK01GOztBTTVNQTtFQUVFLHFCQ0pZO0VES1o7QU44TUY7O0FNM01BO0VBRUUscUJDVlk7RURXWjtBTjZNRjs7QU0xTUE7RUFFRSxxQkNoQlk7RURpQlo7QU40TUY7O0FNbk1BO0VBRUUscUJDNUJZO0VENkJaO0FOcU1GOztBUXZPQTtFQUVFO0VBQ0E7QVJ5T0Y7O0FRdE9BO0VBRUU7RUFDQTtBUndPRjs7QVFyT0E7RUFFRTtFQUNBO0FSdU9GOztBUTlOQTtFQUVFO0VBQ0E7QVJnT0Y7O0FRN05BO0VBRUU7RUFDQTtBUitORjs7QVNyUUE7RUFDRSw4QkZVcUI7RUVUckI7RUFFQTtFQUNBO0VBQ0E7QVR1UUY7QVNwUUE7RUFDRTtFQUNBO0VBRUE7RUFDQTtFQUNBO0FUcVFGO0FTbFFBO0VBQ0UsOEJGUnFCO0VFU3JCO0VBRUE7RUFDQTtFQUNBO0FUbVFGO0FTaFFBO0VBQ0UscUJGbEJZO0VFbUJaO0VBRUE7RUFDQTtFQUNBO0FUaVFGO0FVbFNBO0VBRUU7RUFDQTtBVm1TRjs7QVVoU0E7RUFJRTtFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBRUE7RUFDQSxjSGxCZTtBUGdUakI7QVc2UEk7RUR2aUJKO0lBZ0JJO0VWOFJGO0FBQ0Y7O0FVM1JBO0VBS0U7RUFDQSw4QkhyQnFCO0VHdUJyQjs7O0tBQUE7QVY0UkY7O0FVdFJBO0VBRUU7RUFDQTtFQUNBO0FWd1JGOztBVXJSQTtFQUVFO0VBQ0E7RUFDQTtBVnVSRjs7QVVwUkE7RUFFRTtFQUNBO0VBQ0E7QVZzUkY7QVVwUkU7RUFFRTtBVnFSSjs7QVU1UUE7OztFQUlFO0FWOFFGO0FVNVFFOzs7RUFFRTtFQUNBO0VBQ0E7QVYrUUo7O0FZaFdBO0VBS0U7RUFDQSxjTE5lO0VLT2Y7RUFDQTtBWitWRjtBWXpWSTtFQUVFO0VBQ0E7QVowVk47QVl0VkU7RUFJRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FacVZKO0FZblZJO0VBRUU7QVpvVk47O0FhclhBO0VBSUU7RUFDQTtFQUNBO0VBQ0E7QWJxWEY7O0FhbFhBO0VBRUU7RUFDQTtFQUNBO0VBQ0E7QWJvWEY7O0FhalhBO0VBRUU7RUFDQTtFQUVBO0VBQ0E7RUFDQTtBYmtYRjs7QWEvV0E7RUFLRTtBYjhXRjs7QWF0V0E7RUFFRTtFQUNBO0VBQ0E7RUFDQTtBYndXRjs7QWFyV0E7RUFLRTtFQUNBO0VBQ0E7QWJvV0Y7O0FjNVpBO0VBSUU7QWQ0WkY7QWMxWkU7RUFJRTtBZHlaSjtBY3RaRTtFQUlFO0FkcVpKO0FjblpNO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0Fkb1pSO0FjalpNO0VBRUU7RUFDQTtBZGtaUjtBY2haUTtFQUVFO0FkaVpWO0FjOVlRO0VBRUU7QWQrWVY7QWMzWU07RUFFRTtFQUNBO0VBQ0E7RUFFQTtBZDJZUjtBY3pZUTtFQUlFO0Fkd1lWO0FjL1hJO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBZGdZTjtBYzlYTTtFQUlFO0VBQ0E7QWQ2WFI7QWN6WFU7RUFFRTtBZDBYWjtBY25YRTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0Fkb1hKO0FjbFhJO0VBRUU7RUFFQTtBZGtYTjtBY2hYTTtFQUVFO0FkaVhSO0FjOVdNO0VBRUU7QWQrV1I7QWM1V007RUFJRTtFQUNBO0VBQ0E7RUFDQTtBZDJXUjtBY3pXUTtFQUVFO0FkMFdWOztBZXBlRTtFQUVFO0VBQ0E7RUFDQTtBZnNlSjtBZXBlSTtFQUlFO0FmbWVOO0FlemRFO0VBRUU7RUFDQTtFQUNBO0FmMGRKO0FleGRJO0VBRUU7RUFDQTtFQUNBO0VBQ0E7QWZ5ZE47QWV2ZE07RUFJRTtBZnNkUjtBZWxkSTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0Fma2ROO0FlOWNFO0VBRUU7QWYrY0o7QWU3Y0k7RUFFRTtFQUNBO0FmOGNOO0FlNWNNO0VBSUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBRUE7QWYwY1I7QWVqY007RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0Fma2NSO0FlaGNRO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QWYrYlY7QWV0Ykk7RUFFRTtBZnViTjtBZXJiTTtFQUVFO0VBQ0E7RUFDQTtBZnNiUjtBZXBiUTtFQUVFO0FmcWJWO0FlbGJRO0VBRUU7QWZtYlY7QWV4YUU7RUFFRTtBZnlhSjtBZW5hTTtFQUlFO0VBQ0E7QWZrYVI7QWUzWk07RUFFRTtBZjRaUjtBZXpaTTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0FmeVpSO0FldlpRO0VBSUU7RUFDQTtBZnNaVjtBZS9ZRTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBZmdaSjtBZTlZSTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7QWY4WU47QWU1WU07RUFJRTtFQUNBO0VBQ0E7QWYyWVI7QWV6WVE7RUFJRTtFQUNBO0Fmd1lWO0FlcFlNO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBO0Fmb1lSO0FlelhJO0VBSUU7RUFDQTtFQUNBO0VBQ0E7RUFFQTtBZnVYTjtBZXJYTTtFQUlFO0VBQ0E7QWZvWFI7QWUvV0U7RUFFRTtBZmdYSjtBZTNXTTtFQUlFO0VBQ0E7RUFDQTtFQUNBO0FmMFdSO0FldFdJO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBZnVXTjtBZXJXTTtFQUVFO0VBQ0E7RUFDQTtBZnNXUjtBZXBXUTtFQUdFO0VBQ0E7QWZvV1Y7QWVsV1U7RUFFRTtBZm1XWjtBZTNWRTtFQUVFO0VBQ0E7RUFDQTtBZjRWSjtBZTFWSTtFQUlFO0FmeVZOO0FldlZNO0VBSUU7QWZzVlI7QWVsVkk7RUFJRTtBZmlWTjtBZS9VTTtFQUtFO0FmNlVSO0FleFVFO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FmeVVKO0FldlVJO0VBRUU7RUFDQTtFQUNBO0VBRUE7QWZ1VU47QWVwVUk7RUFFRTtFQUNBO0VBQ0E7RUFDQTtBZnFVTjtBZW5VTTtFQUlFO0Fma1VSOztBZ0JqckJFO0VBSUU7RUFDQTtFQUVBO0VBQ0E7RUFDQTtBaEJnckJKO0FnQjlxQkk7RUFFRTtFQUNBO0VBRUE7QWhCOHFCTjtBZ0I1cUJNO0VBSUU7QWhCMnFCUjtBZ0J0cUJFO0VBSUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0FoQm9xQko7QWdCbHFCSTtFQUlFO0VBQ0E7RUFDQTtFQUNBO0FoQmlxQk4sQyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy9iYXNlL19yZXNldC5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy9pbmRleC5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy91dGlscy9fbWl4aW5zLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL3V0aWxzL192ZW5kb3JzLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL3V0aWxzL19zcGxpdHRpbmcuc2NzcyIsIndlYnBhY2s6Ly9pdHNmb3Jnb3RoYW0vLi9zdHlsZXMvc2hhcmVkL19wYWdlcy5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy9zaGFyZWQvX2xpbmtzLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL3NoYXJlZC9fdGl0bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL3V0aWxzL192YXJpYWJsZXMuc2NzcyIsIndlYnBhY2s6Ly9pdHNmb3Jnb3RoYW0vLi9zdHlsZXMvc2hhcmVkL19kZXNjcmlwdGlvbnMuc2NzcyIsIndlYnBhY2s6Ly9pdHNmb3Jnb3RoYW0vLi9zdHlsZXMvYmFzZS9fZm9udHMuc2NzcyIsIndlYnBhY2s6Ly9pdHNmb3Jnb3RoYW0vLi9zdHlsZXMvYmFzZS9fYmFzZS5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL25vZGVfbW9kdWxlcy9pbmNsdWRlLW1lZGlhL2Rpc3QvX2luY2x1ZGUtbWVkaWEuc2NzcyIsIndlYnBhY2s6Ly9pdHNmb3Jnb3RoYW0vLi9zdHlsZXMvY29tcG9uZW50cy9fcHJlbG9hZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL2xheW91dC9fbmF2aWdhdGlvbi5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy9wYWdlcy9ob21lL19ob21lLnNjc3MiLCJ3ZWJwYWNrOi8vaXRzZm9yZ290aGFtLy4vc3R5bGVzL3BhZ2VzL2Fib3V0L19hYm91dC5zY3NzIiwid2VicGFjazovL2l0c2ZvcmdvdGhhbS8uL3N0eWxlcy9wYWdlcy9nYWxsZXJ5L19nYWxsZXJ5LnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMDtcblx0Ym9yZGVyOiAwO1xuXHRmb250LXNpemU6IDEwMCU7XG5cdGZvbnQ6IGluaGVyaXQ7XG5cdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuXG5ib2R5IHtcblx0bGluZS1oZWlnaHQ6IDE7XG59XG5cbm9sLCB1bCB7XG5cdGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGUsIHEge1xuXHRxdW90ZXM6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuXHRjb250ZW50OiAnJztcblx0Y29udGVudDogbm9uZTtcbn1cblxudGFibGUge1xuXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuXHRib3JkZXItc3BhY2luZzogMDtcbn1cbiIsImh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLCBxIHtcbiAgcXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgY29udGVudDogbm9uZTtcbn1cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxuLmdhbGxlcnlfX21lZGlhX19pbWFnZXNfX2ltYWdlLCAuZ2FsbGVyeV9fbWVkaWEsIC5nYWxsZXJ5X193cmFwcGVyLCAuYWJvdXRfX21lZGlhX19maWd1cmVfX2ltYWdlLCAuaG9tZV9fZ2FsbGVyeV9fbWVkaWFfX2ltYWdlLCAuaG9tZV9fZ2FsbGVyeSwgLmhvbWVfX3dyYXBwZXIsIC5wcmVsb2FkZXIsIC5jb250ZW50LCBib2R5LCBodG1sLCAuZ2FsbGVyeSwgLmFib3V0LCAuaG9tZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufVxuXG4uYWJvdXRfX2NvbnRhY3RfX2RldGFpbHMsIC5hYm91dF9fY29udGFjdF9fdGl0bGUsIC5hYm91dF9fZGVzY19fbG9jYXRpb24sIC5hYm91dF9fZGVzY19fZ2NfX3RpdGxlLCAuYWJvdXRfX2JhY2tncm91bmRfX2djX19zbWRlc2MsIC5wcmVsb2FkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLmRnLmFjIHtcbiAgei1pbmRleDogOTk5OTkgIWltcG9ydGFudDtcbn1cblxuLyogUmVjb21tZW5kZWQgc3R5bGVzIGZvciBTcGxpdHRpbmcgKi9cbi5zcGxpdHRpbmcgLndvcmQsXG4uc3BsaXR0aW5nIC5jaGFyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4vKiBQc3VlZG8tZWxlbWVudCBjaGFycyAqL1xuLnNwbGl0dGluZyAuY2hhciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgcHN1ZWRvIGVsZW1lbnRzIHdpdGggdGhlIGNoYXJhY3RlciB0byBhbGxvdyBmb3IgZXhwYW5kZWQgZWZmZWN0c1xuICogU2V0IHRvIGBkaXNwbGF5OiBub25lYCBieSBkZWZhdWx0OyBqdXN0IGFkZCBgZGlzcGxheTogYmxvY2tgIHdoZW4geW91IHdhbnRcbiAqIHRvIHVzZSB0aGUgcHN1ZWRvIGVsZW1lbnRzXG4gKi9cbi5zcGxpdHRpbmcgLmNoYXI6OmJlZm9yZSxcbi5zcGxpdHRpbmcgLmNoYXI6OmFmdGVyIHtcbiAgY29udGVudDogYXR0cihkYXRhLWNoYXIpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB0cmFuc2l0aW9uOiBpbmhlcml0O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuLyogRXhwYW5kZWQgQ1NTIFZhcmlhYmxlcyAqL1xuLnNwbGl0dGluZyB7XG4gIC8qIFRoZSBjZW50ZXIgd29yZCBpbmRleCAqL1xuICAtLXdvcmQtY2VudGVyOiBjYWxjKCh2YXIoLS13b3JkLXRvdGFsKSAtIDEpIC8gMik7XG4gIC8qIFRoZSBjZW50ZXIgY2hhcmFjdGVyIGluZGV4ICovXG4gIC0tY2hhci1jZW50ZXI6IGNhbGMoKHZhcigtLWNoYXItdG90YWwpIC0gMSkgLyAyKTtcbiAgLyogVGhlIGNlbnRlciBjaGFyYWN0ZXIgaW5kZXggKi9cbiAgLS1saW5lLWNlbnRlcjogY2FsYygodmFyKC0tbGluZS10b3RhbCkgLSAxKSAvIDIpO1xufVxuXG4uc3BsaXR0aW5nIC53b3JkIHtcbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSB3b3JkJ3MgcG9zaXRpb24gKi9cbiAgLS13b3JkLXBlcmNlbnQ6IGNhbGModmFyKC0td29yZC1pbmRleCkgLyB2YXIoLS13b3JkLXRvdGFsKSk7XG4gIC8qIFBlY2VudCAoMC0xKSBvZiB0aGUgbGluZSdzIHBvc2l0aW9uICovXG4gIC0tbGluZS1wZXJjZW50OiBjYWxjKHZhcigtLWxpbmUtaW5kZXgpIC8gdmFyKC0tbGluZS10b3RhbCkpO1xufVxuXG4uc3BsaXR0aW5nIC5jaGFyIHtcbiAgLyogUGVyY2VudCAoMC0xKSBvZiB0aGUgY2hhcidzIHBvc2l0aW9uICovXG4gIC0tY2hhci1wZXJjZW50OiBjYWxjKHZhcigtLWNoYXItaW5kZXgpIC8gdmFyKC0tY2hhci10b3RhbCkpO1xuICAvKiBPZmZzZXQgZnJvbSBjZW50ZXIsIHBvc2l0aXZlICYgbmVnYXRpdmUgKi9cbiAgLS1jaGFyLW9mZnNldDogY2FsYyh2YXIoLS1jaGFyLWluZGV4KSAtIHZhcigtLWNoYXItY2VudGVyKSk7XG4gIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gIC0tZGlzdGFuY2U6IGNhbGMoXG4gICAgICh2YXIoLS1jaGFyLW9mZnNldCkgKiB2YXIoLS1jaGFyLW9mZnNldCkpIC8gdmFyKC0tY2hhci1jZW50ZXIpXG4gICk7XG4gIC8qIERpc3RhbmNlIGZyb20gY2VudGVyIHdoZXJlIC0xIGlzIHRoZSBmYXIgbGVmdCwgMCBpcyBjZW50ZXIsIDEgaXMgZmFyIHJpZ2h0ICovXG4gIC0tZGlzdGFuY2Utc2luZTogY2FsYyh2YXIoLS1jaGFyLW9mZnNldCkgLyB2YXIoLS1jaGFyLWNlbnRlcikpO1xuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAxIGlzIGZhciBsZWZ0L2ZhciByaWdodCwgMCBpcyBjZW50ZXIgKi9cbiAgLS1kaXN0YW5jZS1wZXJjZW50OiBjYWxjKCh2YXIoLS1kaXN0YW5jZSkgLyB2YXIoLS1jaGFyLWNlbnRlcikpKTtcbn1cblxuLnNwbGl0dGluZy5jZWxscyBpbWcge1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbkBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAuc3BsaXR0aW5nLmNlbGxzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuICAuc3BsaXR0aW5nIC5jZWxsLWdyaWQge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGU6IHJlcGVhdCh2YXIoLS1yb3ctdG90YWwpLCAxZnIpL3JlcGVhdCh2YXIoLS1jb2wtdG90YWwpLCAxZnIpO1xuICB9XG4gIC5zcGxpdHRpbmcgLmNlbGwge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbiAgLnNwbGl0dGluZyAuY2VsbC1pbm5lciB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAvKiBTaXplIHRvIGZpdCB0aGUgd2hvbGUgY29udGFpbmVyIHNpemUgKi9cbiAgICB3aWR0aDogY2FsYygxMDAlICogdmFyKC0tY29sLXRvdGFsKSk7XG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgKiB2YXIoLS1yb3ctdG90YWwpKTtcbiAgICAvKiBQb3NpdGlvbiBwcm9wZXJseSAqL1xuICAgIGxlZnQ6IGNhbGMoLTEwMCUgKiB2YXIoLS1jb2wtaW5kZXgpKTtcbiAgICB0b3A6IGNhbGMoLTEwMCUgKiB2YXIoLS1yb3ctaW5kZXgpKTtcbiAgfVxuICAvKiBIZWxwZXIgdmFyaWFibGVzIGZvciBhZHZhbmNlZCBlZmZlY3RzICovXG4gIC5zcGxpdHRpbmcgLmNlbGwge1xuICAgIC0tY2VudGVyLXg6IGNhbGMoKHZhcigtLWNvbC10b3RhbCkgLSAxKSAvIDIpO1xuICAgIC0tY2VudGVyLXk6IGNhbGMoKHZhcigtLXJvdy10b3RhbCkgLSAxKSAvIDIpO1xuICAgIC8qIE9mZnNldCBmcm9tIGNlbnRlciwgcG9zaXRpdmUgJiBuZWdhdGl2ZSAqL1xuICAgIC0tb2Zmc2V0LXg6IGNhbGModmFyKC0tY29sLWluZGV4KSAtIHZhcigtLWNlbnRlci14KSk7XG4gICAgLS1vZmZzZXQteTogY2FsYyh2YXIoLS1yb3ctaW5kZXgpIC0gdmFyKC0tY2VudGVyLXkpKTtcbiAgICAvKiBBYnNvbHV0ZSBkaXN0YW5jZSBmcm9tIGNlbnRlciwgb25seSBwb3NpdGl2ZSAqL1xuICAgIC0tZGlzdGFuY2UteDogY2FsYyggKHZhcigtLW9mZnNldC14KSAqIHZhcigtLW9mZnNldC14KSkgLyB2YXIoLS1jZW50ZXIteCkgKTtcbiAgICAvKiBBYnNvbHV0ZSBkaXN0YW5jZSBmcm9tIGNlbnRlciwgb25seSBwb3NpdGl2ZSAqL1xuICAgIC0tZGlzdGFuY2UteTogY2FsYyggKHZhcigtLW9mZnNldC15KSAqIHZhcigtLW9mZnNldC15KSkgLyB2YXIoLS1jZW50ZXIteSkgKTtcbiAgfVxufVxuLmdhbGxlcnksIC5hYm91dCwgLmhvbWUge1xuICBvcGFjaXR5OiAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5hYm91dF9fY29udGFjdF9fZGV0YWlsc19fdGV4dCwgLm5hdmlnYXRpb25fX2xpc3RfX2l0ZW1fX2xpbmssIC5uYXZpZ2F0aW9uX19ob21lX19saW5rIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbi5hYm91dF9fY29udGFjdF9fZGV0YWlsc19fdGV4dDphZnRlciwgLm5hdmlnYXRpb25fX2xpc3RfX2l0ZW1fX2xpbms6YWZ0ZXIsIC5uYXZpZ2F0aW9uX19ob21lX19saW5rOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZDogY3VycmVudENvbG9yO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC43cyBjdWJpYy1iZXppZXIoMC43NywgMCwgMC4xNzUsIDEpO1xufVxuXG4uYWJvdXRfX2NvbnRhY3RfX2RldGFpbHNfX3RleHQ6aG92ZXI6YWZ0ZXIsIC5uYXZpZ2F0aW9uX19saXN0X19pdGVtX19saW5rOmhvdmVyOmFmdGVyLCAubmF2aWdhdGlvbl9faG9tZV9fbGluazpob3ZlcjphZnRlciB7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDEpO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuXG4uYWJvdXRfX2NvbnRhY3RfX2RldGFpbHNfX3RleHQ6YWZ0ZXIsIC5uYXZpZ2F0aW9uX19saXN0X19pdGVtX19saW5rOmFmdGVyLCAubmF2aWdhdGlvbl9faG9tZV9fbGluazphZnRlciB7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuXG4uYWJvdXRfX2NvbnRhY3RfX2RldGFpbHNfX3RleHQsIC5uYXZpZ2F0aW9uX19saXN0X19pdGVtX19saW5rLCAubmF2aWdhdGlvbl9faG9tZV9fbGluayB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cbi5hYm91dF9fZGVzY19fZ2NfX3RpdGxlX190ZXh0LCAuYWJvdXRfX2JhY2tncm91bmRfX2djX19iZ19fdGl0bGVfX3RleHQge1xuICBmb250LWZhbWlseTogXCJPc3dhbGRcIjtcbiAgZm9udC1zaXplOiAyLjVyZW07XG59XG5cbi5wcmVsb2FkZXJfX3RleHQge1xuICBmb250LWZhbWlseTogXCJPc3dhbGRcIjtcbiAgZm9udC1zaXplOiA1cmVtO1xufVxuXG4uYWJvdXRfX3ByZXNzX190aXRsZV9fdGV4dCwgLmFib3V0X19jbGllbnRzX190aXRsZV9fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcIk9zd2FsZFwiO1xuICBmb250LXNpemU6IDdyZW07XG59XG5cbi5nYWxsZXJ5X190aXRsZSwgLmFib3V0X19jb250YWN0X190aXRsZV9fdGV4dCwgLmFib3V0X19kZXNjX19sb2NhdGlvbl9fdGV4dCwgLmhvbWVfX2NvbnRlbnRfX3RpdGxlX190ZXh0IHtcbiAgZm9udC1mYW1pbHk6IFwiT3N3YWxkXCI7XG4gIGZvbnQtc2l6ZTogMTByZW07XG59XG5cbi5nYWxsZXJ5X190aXRsZV9fdGV4dCwgLmFib3V0X19mb290ZXJfX3RpdGxlX190ZXh0LCAuYWJvdXRfX2hlYWRlcl9fdGl0bGVfX3RleHQge1xuICBmb250LWZhbWlseTogXCJPc3dhbGRcIjtcbiAgZm9udC1zaXplOiAyMHJlbTtcbn1cblxuLmhvbWVfX2xpbmtzX190aXRsZV9fdGV4dCwgYm9keSB7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBmb250LXdlaWdodDogMzAwO1xufVxuXG4ubmF2aWdhdGlvbl9fbGlzdF9faXRlbV9fbGluaywgLm5hdmlnYXRpb25fX2hvbWVfX2xpbmssIC5wcmVsb2FkZXJfX251bWJlciB7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbn1cblxuLmFib3V0X19wcmVzc19fY29udGVudF9fZGl2X190aXRsZSwgLmFib3V0X19kZXNjX19nY19fZGVzY19fdGV4dCwgLmFib3V0X19jbGllbnRzX19nYWxsZXJ5X19jbGllbnRfX25hbWUsIC5hYm91dF9fYmFja2dyb3VuZF9fZGVzY19fZnJhbWVfX3RleHQge1xuICBmb250LXNpemU6IDIuNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbn1cblxuLmFib3V0X19jb250YWN0X19kZXRhaWxzX190ZXh0IHtcbiAgZm9udC1zaXplOiA0cmVtO1xuICBmb250LXdlaWdodDogMzAwO1xufVxuXG4uYWJvdXRfX2JhY2tncm91bmRfX2djX19zbWRlc2NfX3RleHQge1xuICBmb250LXNpemU6IDVyZW07XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9zb3VyY2VzYW5zcHJvLXJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL3NvdXJjZXNhbnNwcm8tcmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk9zd2FsZFwiO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL29zd2FsZC1yZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9vc3dhbGQtcmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIlNvdXJjZSBTYW5zIFByb1wiO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL3NvdXJjZXNhbnNwcm8tbGlnaHQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL3NvdXJjZXNhbnNwcm8tbGlnaHQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJPc3dhbGRcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9vc3dhbGQtc2VtaWJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL29zd2FsZC1zZW1pYm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiAwLjUyMDgzMzMzMzN2dztcbiAgb3ZlcnNjcm9sbC1iZWhhdmlvcjogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBsaW5lLWhlaWdodDogMTtcbiAgYmFja2dyb3VuZDogIzAzMDMwMztcbiAgY29sb3I6ICNFRUYxRUY7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgaHRtbCB7XG4gICAgZm9udC1zaXplOiAxLjMzMzMzMzMzMzN2dztcbiAgfVxufVxuXG5ib2R5IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIjtcbiAgLyogQGluY2x1ZGUgbWVkaWEoJzw9cGhvbmUnKVxuICB7XG4gICAgZm9udC1zaXplOiAxMDBweDtcbiAgfSAqL1xufVxuXG5jYW52YXMge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG5hIHtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbn1cblxuaW1nIHtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzIGVhc2U7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5pbWcubG9hZGVkIHtcbiAgb3BhY2l0eTogMTtcbn1cblxuW2RhdGEtYW5pbWF0aW9uPXBhcmFncmFwaF0sXG5bZGF0YS1hbmltYXRpb249bGFiZWxdLFxuW2RhdGEtYW5pbWF0aW9uPXRpdGxlXSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5bZGF0YS1hbmltYXRpb249cGFyYWdyYXBoXSBzcGFuLFxuW2RhdGEtYW5pbWF0aW9uPWxhYmVsXSBzcGFuLFxuW2RhdGEtYW5pbWF0aW9uPXRpdGxlXSBzcGFuIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xufVxuXG4ucHJlbG9hZGVyIHtcbiAgYmFja2dyb3VuZDogIzAzMDMwMztcbiAgY29sb3I6ICNFRUYxRUY7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgei1pbmRleDogNDtcbn1cbi5wcmVsb2FkZXJfX3RleHQgc3BhbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5wcmVsb2FkZXJfX251bWJlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA3LjRyZW07XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLnByZWxvYWRlcl9fbnVtYmVyX190ZXh0IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4ubmF2aWdhdGlvbiB7XG4gIHotaW5kZXg6IDM7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMCU7XG4gIC8qIHBvaW50ZXItZXZlbnRzOiBub25lOyAqL1xufVxuXG4ubmF2aWdhdGlvbl9fd3JhcHBlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCA1cmVtO1xufVxuXG4ubmF2aWdhdGlvbl9faG9tZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNHJlbTtcbiAgdG9wOiA0cmVtO1xufVxuXG4ubmF2aWdhdGlvbl9faG9tZV9fbGluayB7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG59XG5cbi5uYXZpZ2F0aW9uX19saXN0X19pdGVtIHtcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDRyZW07XG4gIHRvcDogNHJlbTtcbn1cblxuLm5hdmlnYXRpb25fX2xpc3RfX2l0ZW1fX2xpbmsge1xuICBmb250LXdlaWdodDogMzAwO1xuICBkaXNwbGF5OiBibG9jaztcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbi5ob21lIHtcbiAgei1pbmRleDogMDtcbn1cbi5ob21lX193cmFwcGVyIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5ob21lX19nYWxsZXJ5IHtcbiAgei1pbmRleDogMTtcbn1cbi5ob21lX19nYWxsZXJ5X193cmFwcGVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTZyZW0sIC01MCUpO1xufVxuLmhvbWVfX2dhbGxlcnlfX2xpbmsge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAwIDEuMzI1cmVtO1xufVxuLmhvbWVfX2dhbGxlcnlfX2xpbms6Zmlyc3QtY2hpbGQge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cbi5ob21lX19nYWxsZXJ5X19saW5rOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG4uaG9tZV9fZ2FsbGVyeV9fbWVkaWEge1xuICBoZWlnaHQ6IDU1cmVtO1xuICB3aWR0aDogMjByZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuLmhvbWVfX2dhbGxlcnlfX21lZGlhX19pbWFnZSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuLmhvbWVfX2NvbnRlbnRfX3RpdGxlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDZyZW07XG4gIGxlZnQ6IDRyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogMXJlbTtcbn1cbi5ob21lX19jb250ZW50X190aXRsZV9fdGV4dCB7XG4gIHBhZGRpbmc6IDFyZW07XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4uaG9tZV9fY29udGVudF9fdGl0bGVfX3RleHQgc3BhbiBzcGFuIHtcbiAgb3BhY2l0eTogMDtcbn1cbi5ob21lX19saW5rcyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA2cmVtO1xuICByaWdodDogNHJlbTtcbiAgei1pbmRleDogMTtcbn1cbi5ob21lX19saW5rc19fdGl0bGUge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgbWFyZ2luOiAwLjZyZW07XG59XG4uaG9tZV9fbGlua3NfX3RpdGxlOmZpcnN0LWNoaWxkIHtcbiAgbWFyZ2luLXRvcDogMDtcbn1cbi5ob21lX19saW5rc19fdGl0bGU6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG4uaG9tZV9fbGlua3NfX3RpdGxlX190ZXh0IHtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4uaG9tZV9fbGlua3NfX3RpdGxlX190ZXh0X19saW5rIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4uYWJvdXRfX21lZGlhX19maWd1cmUge1xuICBoZWlnaHQ6IDQwcmVtO1xuICB3aWR0aDogNTByZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5hYm91dF9fbWVkaWFfX2ZpZ3VyZV9faW1hZ2Uge1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5hYm91dF9faGVhZGVyIHtcbiAgcGFkZGluZy10b3A6IDEwcmVtO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA3MHJlbTtcbn1cbi5hYm91dF9faGVhZGVyX190aXRsZSB7XG4gIGdyaWQtYXJlYTogMS8xLy0xLzI7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgcGFkZGluZzogMTByZW0gMTIuN3JlbTtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0E5QjRDMjtcbn1cbi5hYm91dF9faGVhZGVyX190aXRsZV9fdGV4dCB7XG4gIGxldHRlci1zcGFjaW5nOiAycmVtO1xufVxuLmFib3V0X19oZWFkZXJfX21lZGlhIHtcbiAgZ3JpZC1hcmVhOiAxLzIvLTEvLTE7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5hYm91dF9fYmFja2dyb3VuZCB7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjQTlCNEMyO1xufVxuLmFib3V0X19iYWNrZ3JvdW5kX19nYyB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDVyZW0gNzByZW07XG59XG4uYWJvdXRfX2JhY2tncm91bmRfX2djX19zbWRlc2Mge1xuICBncmlkLWFyZWE6IDEvMS8tMS8yO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICBwYWRkaW5nOiAxMHJlbSAxMi43cmVtO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0E5QjRDMjtcbn1cbi5hYm91dF9fYmFja2dyb3VuZF9fZ2NfX2JnIHtcbiAgZ3JpZC1hcmVhOiAxLzIvLTEvMztcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG59XG4uYWJvdXRfX2JhY2tncm91bmRfX2djX19iZ19fdGl0bGUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd3JpdGluZy1tb2RlOiB2ZXJ0aWNhbC1ybDtcbiAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAycmVtIDA7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI0E5QjRDMjtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNBOUI0QzI7XG59XG4uYWJvdXRfX2JhY2tncm91bmRfX2Rlc2Mge1xuICBncmlkLWFyZWE6IDEvMy8tMS8tMTtcbn1cbi5hYm91dF9fYmFja2dyb3VuZF9fZGVzY19fZnJhbWUge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDRyZW0gMnJlbTtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNBOUI0QzI7XG59XG4uYWJvdXRfX2JhY2tncm91bmRfX2Rlc2NfX2ZyYW1lOmZpcnN0LW9mLXR5cGUge1xuICBib3JkZXI6IG5vbmU7XG59XG4uYWJvdXRfX2JhY2tncm91bmRfX2Rlc2NfX2ZyYW1lOmxhc3Qtb2YtdHlwZSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQTlCNEMyO1xufVxuLmFib3V0X19jbGllbnRzIHtcbiAgcGFkZGluZy1ib3R0b206IDEyLjdyZW07XG59XG4uYWJvdXRfX2NsaWVudHNfX3RpdGxlX190ZXh0IHtcbiAgbGV0dGVyLXNwYWNpbmc6IDJyZW07XG4gIHBhZGRpbmc6IDEyLjdyZW07XG59XG4uYWJvdXRfX2NsaWVudHNfX2dhbGxlcnlfX3dyYXBwZXIge1xuICBwYWRkaW5nOiAwIDM1cmVtO1xufVxuLmFib3V0X19jbGllbnRzX19nYWxsZXJ5X19jbGllbnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQTlCNEMyO1xufVxuLmFib3V0X19jbGllbnRzX19nYWxsZXJ5X19jbGllbnRfX25hbWUge1xuICBsZXR0ZXItc3BhY2luZzogMXJlbTtcbiAgcGFkZGluZzogM3JlbTtcbn1cbi5hYm91dF9fZGVzYyB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDcwcmVtO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMi43cmVtO1xuICBwYWRkaW5nLXJpZ2h0OiAwO1xufVxuLmFib3V0X19kZXNjX19nYyB7XG4gIGdyaWQtYXJlYTogMS8xLy0xLzI7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gIHBhZGRpbmctbGVmdDogMTIuN3JlbTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1cmVtIDFmcjtcbn1cbi5hYm91dF9fZGVzY19fZ2NfX3RpdGxlIHtcbiAgZ3JpZC1hcmVhOiAxLzEvLTEvMjtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbn1cbi5hYm91dF9fZGVzY19fZ2NfX3RpdGxlX190ZXh0IHtcbiAgd3JpdGluZy1tb2RlOiB2ZXJ0aWNhbC1ybDtcbiAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xufVxuLmFib3V0X19kZXNjX19nY19fZGVzYyB7XG4gIGdyaWQtYXJlYTogMS8yLy0xLy0xO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4uYWJvdXRfX2Rlc2NfX2xvY2F0aW9uIHtcbiAgZ3JpZC1hcmVhOiAxLzIvLTEvLTE7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBhZGRpbmc6IDEyLjdyZW07XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI0E5QjRDMjtcbn1cbi5hYm91dF9fZGVzY19fbG9jYXRpb25fX3RleHQge1xuICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLWxyO1xuICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpO1xufVxuLmFib3V0X19wcmVzcyB7XG4gIHBhZGRpbmctYm90dG9tOiAxMi43cmVtO1xufVxuLmFib3V0X19wcmVzc19fdGl0bGVfX3RleHQge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogMXJlbTtcbiAgcGFkZGluZzogMTIuN3JlbTtcbiAgcGFkZGluZy10b3A6IDA7XG59XG4uYWJvdXRfX3ByZXNzX19jb250ZW50IHtcbiAgcGFkZGluZzogMCAzNXJlbTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLmFib3V0X19wcmVzc19fY29udGVudF9fZGl2IHtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDNyZW07XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQTlCNEMyO1xufVxuLmFib3V0X19wcmVzc19fY29udGVudF9fZGl2X190aXRsZSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNXJlbTtcbn1cbi5hYm91dF9fcHJlc3NfX2NvbnRlbnRfX2Rpdl9fdGl0bGVfX2xpbmsge1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG4uYWJvdXRfX2NvbnRhY3Qge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAyMi43cmVtO1xufVxuLmFib3V0X19jb250YWN0X190aXRsZSB7XG4gIHBhZGRpbmctYm90dG9tOiAxNXJlbTtcbn1cbi5hYm91dF9fY29udGFjdF9fdGl0bGVfX3RleHQge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuLmFib3V0X19jb250YWN0X19kZXRhaWxzIHtcbiAgcGFkZGluZy1ib3R0b206IDEyLjdyZW07XG59XG4uYWJvdXRfX2NvbnRhY3RfX2RldGFpbHNfX3RleHQge1xuICBsZXR0ZXItc3BhY2luZzogMXJlbTtcbn1cbi5hYm91dF9fZm9vdGVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZy1ib3R0b206IDEwcmVtO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDcwcmVtIDFmcjtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNBOUI0QzI7XG59XG4uYWJvdXRfX2Zvb3Rlcl9fbWVkaWEge1xuICBncmlkLWFyZWE6IDEvMS8tMS8yO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG4uYWJvdXRfX2Zvb3Rlcl9fdGl0bGUge1xuICBncmlkLWFyZWE6IDEvMi8tMS8tMTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBwYWRkaW5nOiAxMHJlbSAxMi43cmVtO1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNBOUI0QzI7XG59XG4uYWJvdXRfX2Zvb3Rlcl9fdGl0bGVfX3RleHQge1xuICBsZXR0ZXItc3BhY2luZzogMnJlbTtcbn1cblxuLmdhbGxlcnlfX21lZGlhIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgcGxhY2UtaXRlbXM6IGNlbnRlcjtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuLmdhbGxlcnlfX21lZGlhX19pbWFnZXMge1xuICB3aWR0aDogMzNyZW07XG4gIGhlaWdodDogNTByZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5nYWxsZXJ5X19tZWRpYV9faW1hZ2VzX19pbWFnZSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuLmdhbGxlcnlfX3RpdGxlIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5nYWxsZXJ5X190aXRsZV9fdGV4dCB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIG1peC1ibGVuZC1tb2RlOiBkaWZmZXJlbmNlO1xuICB6LWluZGV4OiAtNTtcbiAgbGV0dGVyLXNwYWNpbmc6IDJyZW07XG59IiwiJWNvdmVyXG57XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufVxuXG4lY2VudGVyXG57XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG5AbWl4aW4gcmF0aW8gKCRoZWlnaHQsICR3aWR0aClcbntcbiAgZm9udC1zaXplOiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgJjphZnRlclxuICB7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmctdG9wOiAkd2lkdGggLyAkaGVpZ2h0ICogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxufVxuIiwiLmRnLmFjXG57XG4gIHotaW5kZXg6IDk5OTk5ICFpbXBvcnRhbnQ7XG59XG4iLCIvKiBSZWNvbW1lbmRlZCBzdHlsZXMgZm9yIFNwbGl0dGluZyAqL1xuLnNwbGl0dGluZyAud29yZCxcbi5zcGxpdHRpbmcgLmNoYXIge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qIFBzdWVkby1lbGVtZW50IGNoYXJzICovXG4uc3BsaXR0aW5nIC5jaGFyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBwc3VlZG8gZWxlbWVudHMgd2l0aCB0aGUgY2hhcmFjdGVyIHRvIGFsbG93IGZvciBleHBhbmRlZCBlZmZlY3RzXG4gKiBTZXQgdG8gYGRpc3BsYXk6IG5vbmVgIGJ5IGRlZmF1bHQ7IGp1c3QgYWRkIGBkaXNwbGF5OiBibG9ja2Agd2hlbiB5b3Ugd2FudFxuICogdG8gdXNlIHRoZSBwc3VlZG8gZWxlbWVudHNcbiAqL1xuLnNwbGl0dGluZyAuY2hhcjo6YmVmb3JlLFxuLnNwbGl0dGluZyAuY2hhcjo6YWZ0ZXIge1xuICBjb250ZW50OiBhdHRyKGRhdGEtY2hhcik7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IGluaGVyaXQ7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG4vKiBFeHBhbmRlZCBDU1MgVmFyaWFibGVzICovXG5cbi5zcGxpdHRpbmcge1xuICAvKiBUaGUgY2VudGVyIHdvcmQgaW5kZXggKi9cbiAgLS13b3JkLWNlbnRlcjogY2FsYygodmFyKC0td29yZC10b3RhbCkgLSAxKSAvIDIpO1xuXG4gIC8qIFRoZSBjZW50ZXIgY2hhcmFjdGVyIGluZGV4ICovXG4gIC0tY2hhci1jZW50ZXI6IGNhbGMoKHZhcigtLWNoYXItdG90YWwpIC0gMSkgLyAyKTtcblxuICAvKiBUaGUgY2VudGVyIGNoYXJhY3RlciBpbmRleCAqL1xuICAtLWxpbmUtY2VudGVyOiBjYWxjKCh2YXIoLS1saW5lLXRvdGFsKSAtIDEpIC8gMik7XG59XG5cbi5zcGxpdHRpbmcgLndvcmQge1xuICAvKiBQZWNlbnQgKDAtMSkgb2YgdGhlIHdvcmQncyBwb3NpdGlvbiAqL1xuICAtLXdvcmQtcGVyY2VudDogY2FsYyh2YXIoLS13b3JkLWluZGV4KSAvIHZhcigtLXdvcmQtdG90YWwpKTtcblxuICAvKiBQZWNlbnQgKDAtMSkgb2YgdGhlIGxpbmUncyBwb3NpdGlvbiAqL1xuICAtLWxpbmUtcGVyY2VudDogY2FsYyh2YXIoLS1saW5lLWluZGV4KSAvIHZhcigtLWxpbmUtdG90YWwpKTtcbn1cblxuLnNwbGl0dGluZyAuY2hhciB7XG4gIC8qIFBlcmNlbnQgKDAtMSkgb2YgdGhlIGNoYXIncyBwb3NpdGlvbiAqL1xuICAtLWNoYXItcGVyY2VudDogY2FsYyh2YXIoLS1jaGFyLWluZGV4KSAvIHZhcigtLWNoYXItdG90YWwpKTtcblxuICAvKiBPZmZzZXQgZnJvbSBjZW50ZXIsIHBvc2l0aXZlICYgbmVnYXRpdmUgKi9cbiAgLS1jaGFyLW9mZnNldDogY2FsYyh2YXIoLS1jaGFyLWluZGV4KSAtIHZhcigtLWNoYXItY2VudGVyKSk7XG5cbiAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgLS1kaXN0YW5jZTogY2FsYyhcbiAgICAgKHZhcigtLWNoYXItb2Zmc2V0KSAqIHZhcigtLWNoYXItb2Zmc2V0KSkgLyB2YXIoLS1jaGFyLWNlbnRlcilcbiAgKTtcblxuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAtMSBpcyB0aGUgZmFyIGxlZnQsIDAgaXMgY2VudGVyLCAxIGlzIGZhciByaWdodCAqL1xuICAtLWRpc3RhbmNlLXNpbmU6IGNhbGModmFyKC0tY2hhci1vZmZzZXQpIC8gdmFyKC0tY2hhci1jZW50ZXIpKTtcblxuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAxIGlzIGZhciBsZWZ0L2ZhciByaWdodCwgMCBpcyBjZW50ZXIgKi9cbiAgLS1kaXN0YW5jZS1wZXJjZW50OiBjYWxjKCh2YXIoLS1kaXN0YW5jZSkgLyB2YXIoLS1jaGFyLWNlbnRlcikpKTtcbn1cblxuXG5cbi5zcGxpdHRpbmcuY2VsbHMgaW1nIHsgd2lkdGg6IDEwMCU7IGRpc3BsYXk6IGJsb2NrOyB9XG5cbkBzdXBwb3J0cyAoIGRpc3BsYXk6IGdyaWQgKSB7XG4gIC5zcGxpdHRpbmcuY2VsbHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5cbiAgLnNwbGl0dGluZyAuY2VsbC1ncmlkIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlOiByZXBlYXQoIHZhcigtLXJvdy10b3RhbCksIDFmciApIC8gcmVwZWF0KCB2YXIoLS1jb2wtdG90YWwpLCAxZnIgKTtcbiAgfVxuXG4gIC5zcGxpdHRpbmcgLmNlbGwge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cblxuICAuc3BsaXR0aW5nIC5jZWxsLWlubmVyIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIC8qIFNpemUgdG8gZml0IHRoZSB3aG9sZSBjb250YWluZXIgc2l6ZSAqL1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKiB2YXIoLS1jb2wtdG90YWwpKTtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAqIHZhcigtLXJvdy10b3RhbCkpO1xuICAgIC8qIFBvc2l0aW9uIHByb3Blcmx5ICovXG4gICAgbGVmdDogY2FsYygtMTAwJSAqIHZhcigtLWNvbC1pbmRleCkpO1xuICAgIHRvcDogY2FsYygtMTAwJSAqIHZhcigtLXJvdy1pbmRleCkpO1xuICB9XG5cbiAgLyogSGVscGVyIHZhcmlhYmxlcyBmb3IgYWR2YW5jZWQgZWZmZWN0cyAqL1xuICAuc3BsaXR0aW5nIC5jZWxsIHtcbiAgICAtLWNlbnRlci14OiBjYWxjKCh2YXIoLS1jb2wtdG90YWwpIC0gMSkgLyAyKTtcbiAgICAtLWNlbnRlci15OiBjYWxjKCh2YXIoLS1yb3ctdG90YWwpIC0gMSkgLyAyKTtcblxuICAgIC8qIE9mZnNldCBmcm9tIGNlbnRlciwgcG9zaXRpdmUgJiBuZWdhdGl2ZSAqL1xuICAgIC0tb2Zmc2V0LXg6IGNhbGModmFyKC0tY29sLWluZGV4KSAtIHZhcigtLWNlbnRlci14KSk7XG4gICAgLS1vZmZzZXQteTogY2FsYyh2YXIoLS1yb3ctaW5kZXgpIC0gdmFyKC0tY2VudGVyLXkpKTtcblxuICAgIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gICAgLS1kaXN0YW5jZS14OiBjYWxjKCAodmFyKC0tb2Zmc2V0LXgpICogdmFyKC0tb2Zmc2V0LXgpKSAvIHZhcigtLWNlbnRlci14KSApO1xuXG4gICAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgICAtLWRpc3RhbmNlLXk6IGNhbGMoICh2YXIoLS1vZmZzZXQteSkgKiB2YXIoLS1vZmZzZXQteSkpIC8gdmFyKC0tY2VudGVyLXkpICk7XG4gIH1cbn1cbiIsIiVwYWdlXG57XG4gIEBleHRlbmQgJWNvdmVyO1xuXG4gIG9wYWNpdHk6IDA7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cblxuJXBhZ2VfX3dyYXBwZXJcbntcbiAgY29sb3I6IGluaGVyaXQ7XG5cbn1cbiIsIiVsaW5rX193cmFwcGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbiVsaW5rX19saW5lIHtcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJhY2tncm91bmQ6IGN1cnJlbnRDb2xvcjtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuN3MgJGVhc2UtaW4tb3V0O1xufVxuXG4lbGlua19fbGluZS0tdmlzaWJsZSB7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDEpO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuXG4lbGlua19fbGluZS0taGlkZGVuIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG59XG5cbiVsaW5rIHtcbiAgQGV4dGVuZCAlbGlua19fd3JhcHBlcjtcblxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgJjphZnRlciB7XG4gICAgQGV4dGVuZCAlbGlua19fbGluZTtcbiAgICBAZXh0ZW5kICVsaW5rX19saW5lLS12aXNpYmxlO1xuICB9XG5cbiAgJjpob3ZlciB7XG4gICAgJjphZnRlciB7XG4gICAgICBAZXh0ZW5kICVsaW5rX19saW5lLS1oaWRkZW47XG4gICAgfVxuICB9XG59XG5cbiVsaW5rLS1oaWRkZW4ge1xuICBAZXh0ZW5kICVsaW5rX193cmFwcGVyO1xuXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAmOmFmdGVyIHtcbiAgICBAZXh0ZW5kICVsaW5rX19saW5lO1xuICAgIEBleHRlbmQgJWxpbmtfX2xpbmUtLWhpZGRlbjtcbiAgfVxuXG4gICY6aG92ZXIge1xuICAgICY6YWZ0ZXIge1xuICAgICAgQGV4dGVuZCAlbGlua19fbGluZS0tdmlzaWJsZTtcbiAgICB9XG4gIH1cbn1cbiIsIiV0aXRsZS0xNVxue1xuICBmb250LWZhbWlseTogJGZvbnQtb3N3YWxkO1xuICBmb250LXNpemU6IDEuNXJlbTtcbn1cblxuJXRpdGxlLTI1XG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1vc3dhbGQ7XG4gIGZvbnQtc2l6ZTogMi41cmVtO1xufVxuXG4ldGl0bGUtNTBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LW9zd2FsZDtcbiAgZm9udC1zaXplOiA1cmVtO1xufVxuXG4ldGl0bGUtNzBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LW9zd2FsZDtcbiAgZm9udC1zaXplOiA3cmVtO1xufVxuXG4ldGl0bGUtMTAwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1vc3dhbGQ7XG4gIGZvbnQtc2l6ZTogMTByZW07XG59XG5cbiV0aXRsZS0xNTBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LW9zd2FsZDtcbiAgZm9udC1zaXplOiAxMHJlbTtcbn1cblxuJXRpdGxlLTIwMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtb3N3YWxkO1xuICBmb250LXNpemU6IDIwcmVtO1xufVxuIiwiJGNvbG9yLWN1bHR1cmVkOiAjRUVGMUVGO1xuJGNvbG9yLWNhZGV0LWJsdWUtY3JheW9sYTogI0E5QjRDMjtcbiRjb2xvci1ibGFjay1jb3JhbDogIzVFNjU3MjtcbiRjb2xvci1wZXd0ZXItYmx1ZTogIzdEOThBMTtcbiRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjogIzFDMjMyMTtcbiRjb2xvci1ib3JkZXItZ3JleTogI2Q0ZDRkNDtcblxuJGVhc2UtaW4tb3V0OiBjdWJpYy1iZXppZXIoMC43NywgMCwgMC4xNzUsIDEpO1xuJGVhc2Utb3V0LWV4cG86IGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKTtcblxuJGZvbnQtb3N3YWxkOiAnT3N3YWxkJztcbiRmb250LXNvdXJjZS1zYW5zLXBybzogJ1NvdXJjZSBTYW5zIFBybyc7XG5cbiR6LWluZGV4ZXM6IChcbiAgJ3ByZWxvYWRlcicsXG4gICduYXZpZ2F0aW9uJyxcbiAgJ2NvbnRlbnQnLFxuICAnY2FudmFzJ1xuKTtcbiIsIiVkZXNjLTEyXG57XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xufVxuXG4lZGVzYy0xNlxue1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbn1cblxuJWRlc2MtMjBcbntcbiAgZm9udC1zaXplOiAycmVtO1xuICBmb250LXdlaWdodDogMzAwO1xufVxuXG4lZGVzYy0yNVxue1xuICBmb250LXNpemU6IDIuNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbn1cblxuJWRlc2MtMzBcbntcbiAgZm9udC1zaXplOiAzcmVtO1xuICBmb250LXdlaWdodDogMzAwO1xufVxuXG4lZGVzYy00MFxue1xuICBmb250LXNpemU6IDRyZW07XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG59XG5cbiVkZXNjLTUwXG57XG4gIGZvbnQtc2l6ZTogNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbn1cblxuJWRlc2MtMTAwXG57XG4gIGZvbnQtc2l6ZTogMTByZW07XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG59XG4iLCJAZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICRmb250LXNvdXJjZS1zYW5zLXBybztcbiAgc3JjOiB1cmwoJy4uL2ZvbnRzL3NvdXJjZXNhbnNwcm8tcmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcbiAgICAgIHVybCgnLi4vZm9udHMvc291cmNlc2Fuc3Byby1yZWd1bGFyLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJGZvbnQtb3N3YWxkO1xuICBzcmM6IHVybCgnLi4vZm9udHMvb3N3YWxkLXJlZ3VsYXIud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXG4gICAgICB1cmwoJy4uL2ZvbnRzL29zd2FsZC1yZWd1bGFyLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJGZvbnQtc291cmNlLXNhbnMtcHJvO1xuICBzcmM6IHVybCgnLi4vZm9udHMvc291cmNlc2Fuc3Byby1saWdodC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcbiAgICAgIHVybCgnLi4vZm9udHMvc291cmNlc2Fuc3Byby1saWdodC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICRmb250LW9zd2FsZDtcbiAgc3JjOiB1cmwoJy4uL2ZvbnRzL29zd2FsZC1zZW1pYm9sZC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcbiAgICAgIHVybCgnLi4vZm9udHMvb3N3YWxkLXNlbWlib2xkLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG4iLCIqXG57XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5odG1sXG57XG4gIEBleHRlbmQgJWNvdmVyO1xuXG4gIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDE5MjBweCAqIDEwcHgpO1xuXG4gIG92ZXJzY3JvbGwtYmVoYXZpb3I6IG5vbmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgbGluZS1oZWlnaHQ6IDE7XG5cbiAgYmFja2dyb3VuZDogIzAzMDMwMztcbiAgY29sb3I6ICRjb2xvci1jdWx0dXJlZDtcblxuICBAaW5jbHVkZSBtZWRpYSgnPHBob25lJylcbiAge1xuICAgIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDc1MHB4ICogMTBweCk7XG4gIH1cbn1cblxuYm9keVxue1xuICBAZXh0ZW5kICVjb3ZlcjtcbiAgQGV4dGVuZCAlZGVzYy0xNjtcblxuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zb3VyY2Utc2Fucy1wcm87XG5cbiAgLyogQGluY2x1ZGUgbWVkaWEoJzw9cGhvbmUnKVxuICB7XG4gICAgZm9udC1zaXplOiAxMDBweDtcbiAgfSAqL1xufVxuXG5jYW52YXNcbntcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB6LWluZGV4OiB6KCdjYW52YXMnKTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbmFcbntcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbn1cblxuaW1nXG57XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgLjVzIGVhc2U7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG5cbiAgJi5sb2FkZWRcbiAge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuLmNvbnRlbnRcbntcbiAgQGV4dGVuZCAlY292ZXI7XG59XG5cbltkYXRhLWFuaW1hdGlvbj1cInBhcmFncmFwaFwiXSxcbltkYXRhLWFuaW1hdGlvbj1cImxhYmVsXCJdLFxuW2RhdGEtYW5pbWF0aW9uPVwidGl0bGVcIl1cbntcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICBzcGFuXG4gIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICB9XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vICAgICBfICAgICAgICAgICAgXyAgICAgICAgICAgXyAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gX1xuLy8gICAgKF8pICAgICAgICAgIHwgfCAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgICAgICAgICB8IChfKVxuLy8gICAgIF8gXyBfXyAgIF9fX3wgfF8gICBfICBfX3wgfCBfX18gICBfIF9fIF9fXyAgIF9fXyAgX198IHxfICBfXyBfXG4vLyAgICB8IHwgJ18gXFwgLyBfX3wgfCB8IHwgfC8gX2AgfC8gXyBcXCB8ICdfIGAgXyBcXCAvIF8gXFwvIF9gIHwgfC8gX2AgfFxuLy8gICAgfCB8IHwgfCB8IChfX3wgfCB8X3wgfCAoX3wgfCAgX18vIHwgfCB8IHwgfCB8ICBfXy8gKF98IHwgfCAoX3wgfFxuLy8gICAgfF98X3wgfF98XFxfX198X3xcXF9fLF98XFxfXyxffFxcX19ffCB8X3wgfF98IHxffFxcX19ffFxcX18sX3xffFxcX18sX3xcbi8vXG4vLyAgICAgIFNpbXBsZSwgZWxlZ2FudCBhbmQgbWFpbnRhaW5hYmxlIG1lZGlhIHF1ZXJpZXMgaW4gU2Fzc1xuLy8gICAgICAgICAgICAgICAgICAgICAgICB2MS40Ljlcbi8vXG4vLyAgICAgICAgaHR0cHM6Ly9lZHVhcmRvYm91Y2FzLmdpdGh1Yi5pby9pbmNsdWRlLW1lZGlhXG4vL1xuLy8gICAgICAgICBBdXRob3JzOiBFZHVhcmRvIEJvdWNhcyAoQGVkdWFyZG9ib3VjYXMpXG4vLyAgICAgICAgICAgICAgICAgIEtpdHR5IEdpcmF1ZGVsIChAa2l0dHlnaXJhdWRlbClcbi8vXG4vLyAgICAgIFRoaXMgcHJvamVjdCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlXG4vLy8vXG4vLy8gaW5jbHVkZS1tZWRpYSBsaWJyYXJ5IHB1YmxpYyBjb25maWd1cmF0aW9uXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8vXG5cblxuLy8vXG4vLy8gQ3JlYXRlcyBhIGxpc3Qgb2YgZ2xvYmFsIGJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHNpbmdsZSBicmVha3BvaW50IHdpdGggdGhlIGxhYmVsIGBwaG9uZWBcbi8vLyAgJGJyZWFrcG9pbnRzOiAoJ3Bob25lJzogMzIwcHgpO1xuLy8vXG4kYnJlYWtwb2ludHM6IChcbiAgJ3Bob25lJzogMzIwcHgsXG4gICd0YWJsZXQnOiA3NjhweCxcbiAgJ2Rlc2t0b3AnOiAxMDI0cHhcbikgIWRlZmF1bHQ7XG5cblxuLy8vXG4vLy8gQ3JlYXRlcyBhIGxpc3Qgb2Ygc3RhdGljIGV4cHJlc3Npb25zIG9yIG1lZGlhIHR5cGVzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHNpbmdsZSBtZWRpYSB0eXBlIChzY3JlZW4pXG4vLy8gICRtZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nOiAnc2NyZWVuJyk7XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHN0YXRpYyBleHByZXNzaW9uIHdpdGggbG9naWNhbCBkaXNqdW5jdGlvbiAoT1Igb3BlcmF0b3IpXG4vLy8gICRtZWRpYS1leHByZXNzaW9uczogKFxuLy8vICAgICdyZXRpbmEyeCc6ICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpJ1xuLy8vICApO1xuLy8vXG4kbWVkaWEtZXhwcmVzc2lvbnM6IChcbiAgJ3NjcmVlbic6ICdzY3JlZW4nLFxuICAncHJpbnQnOiAncHJpbnQnLFxuICAnaGFuZGhlbGQnOiAnaGFuZGhlbGQnLFxuICAnbGFuZHNjYXBlJzogJyhvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICdwb3J0cmFpdCc6ICcob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gICdyZXRpbmEyeCc6ICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCAobWluLXJlc29sdXRpb246IDJkcHB4KScsXG4gICdyZXRpbmEzeCc6ICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzKSwgKG1pbi1yZXNvbHV0aW9uOiAzNTBkcGkpLCAobWluLXJlc29sdXRpb246IDNkcHB4KSdcbikgIWRlZmF1bHQ7XG5cblxuLy8vXG4vLy8gRGVmaW5lcyBhIG51bWJlciB0byBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gZWFjaCB1bml0IHdoZW4gZGVjbGFyaW5nIGJyZWFrcG9pbnRzIHdpdGggZXhjbHVzaXZlIGludGVydmFsc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBwaXhlbHMgaXMgZGVmaW5lZCBhcyBgMWAgYnkgZGVmYXVsdFxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPjEyOHB4Jykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAxMjlweCkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgZW1zIGlzIGRlZmluZWQgYXMgYDAuMDFgIGJ5IGRlZmF1bHRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4yMGVtJykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAyMC4wMWVtKSB7fVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciByZW1zIGlzIGRlZmluZWQgYXMgYDAuMWAgYnkgZGVmYXVsdCwgdG8gYmUgdXNlZCB3aXRoIGBmb250LXNpemU6IDYyLjUlO2Bcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4yLjByZW0nKSB7fVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDIuMXJlbSkge31cbi8vL1xuJHVuaXQtaW50ZXJ2YWxzOiAoXG4gICdweCc6IDEsXG4gICdlbSc6IDAuMDEsXG4gICdyZW0nOiAwLjEsXG4gICcnOiAwXG4pICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBEZWZpbmVzIHdoZXRoZXIgc3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllcyBpcyBhdmFpbGFibGUsIHVzZWZ1bCBmb3IgY3JlYXRpbmcgc2VwYXJhdGUgc3R5bGVzaGVldHNcbi8vLyBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IG1lZGlhIHF1ZXJpZXMuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gRGlzYWJsZXMgc3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllc1xuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PXRhYmxldCcpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICAuZm9vIHtcbi8vLyAgICBjb2xvcjogdG9tYXRvO1xuLy8vICB9XG4vLy9cbiRpbS1tZWRpYS1zdXBwb3J0OiB0cnVlICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBTZWxlY3RzIHdoaWNoIGJyZWFrcG9pbnQgdG8gZW11bGF0ZSB3aGVuIHN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMgaXMgZGlzYWJsZWQuIE1lZGlhIHF1ZXJpZXMgdGhhdCBzdGFydCBhdCBvclxuLy8vIGludGVyY2VwdCB0aGUgYnJlYWtwb2ludCB3aWxsIGJlIGRpc3BsYXllZCwgYW55IG90aGVycyB3aWxsIGJlIGlnbm9yZWQuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIHNob3cgYmVjYXVzZSBpdCBpbnRlcmNlcHRzIHRoZSBzdGF0aWMgYnJlYWtwb2ludFxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCc7XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PXRhYmxldCcpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICAuZm9vIHtcbi8vLyAgICBjb2xvcjogdG9tYXRvO1xuLy8vICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIE5PVCBzaG93IGJlY2F1c2UgaXQgZG9lcyBub3QgaW50ZXJjZXB0IHRoZSBkZXNrdG9wIGJyZWFrcG9pbnRcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ3RhYmxldCc7XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PWRlc2t0b3AnKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gIC8qIE5vIG91dHB1dCAqL1xuLy8vXG4kaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBTZWxlY3RzIHdoaWNoIG1lZGlhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2VkIGluIGFuIGV4cHJlc3Npb24gZm9yIGl0IHRvIGJlIHVzZWQgd2hlbiBtZWRpYSBxdWVyaWVzXG4vLy8gYXJlIG5vdCBzdXBwb3J0ZWQuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIHNob3cgYmVjYXVzZSBpdCBpbnRlcmNlcHRzIHRoZSBzdGF0aWMgYnJlYWtwb2ludCBhbmQgY29udGFpbnMgb25seSBhY2NlcHRlZCBtZWRpYSBleHByZXNzaW9uc1xuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCc7XG4vLy8gICRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nKTtcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0JywgJ3NjcmVlbicpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgIC5mb28ge1xuLy8vICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBOT1Qgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50IGJ1dCBjb250YWlucyBhIG1lZGlhIGV4cHJlc3Npb24gdGhhdCBpcyBub3QgYWNjZXB0ZWRcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnO1xuLy8vICAkaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJyk7XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PXRhYmxldCcsICdyZXRpbmEyeCcpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgLyogTm8gb3V0cHV0ICovXG4vLy9cbiRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nLCAncG9ydHJhaXQnLCAnbGFuZHNjYXBlJykgIWRlZmF1bHQ7XG5cbi8vLy9cbi8vLyBDcm9zcy1lbmdpbmUgbG9nZ2luZyBlbmdpbmVcbi8vLyBAYXV0aG9yIEtpdHR5IEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy8vXG5cblxuLy8vXG4vLy8gTG9nIGEgbWVzc2FnZSBlaXRoZXIgd2l0aCBgQGVycm9yYCBpZiBzdXBwb3J0ZWRcbi8vLyBlbHNlIHdpdGggYEB3YXJuYCwgdXNpbmcgYGZlYXR1cmUtZXhpc3RzKCdhdC1lcnJvcicpYFxuLy8vIHRvIGRldGVjdCBzdXBwb3J0LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQGZ1bmN0aW9uIGltLWxvZygkbWVzc2FnZSkge1xuICBAaWYgZmVhdHVyZS1leGlzdHMoJ2F0LWVycm9yJykge1xuICAgIEBlcnJvciAkbWVzc2FnZTtcbiAgfSBAZWxzZSB7XG4gICAgQHdhcm4gJG1lc3NhZ2U7XG4gICAgJF86IG5vb3AoKTtcbiAgfVxuXG4gIEByZXR1cm4gJG1lc3NhZ2U7XG59XG5cblxuLy8vXG4vLy8gV3JhcHBlciBtaXhpbiBmb3IgdGhlIGxvZyBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCB3aXRoIGEgbW9yZSBmcmllbmRseVxuLy8vIEFQSSB0aGFuIGBAaWYgaW0tbG9nKCcuLicpIHt9YCBvciBgJF86IGltLWxvZygnLi4nKWAuIEJhc2ljYWxseSwgdXNlIHRoZSBmdW5jdGlvblxuLy8vIHdpdGhpbiBmdW5jdGlvbnMgYmVjYXVzZSBpdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluIGEgZnVuY3Rpb25cbi8vLyBhbmQgdXNlIHRoZSBtaXhpbiBldmVyeXdoZXJlIGVsc2UgYmVjYXVzZSBpdCdzIG11Y2ggbW9yZSBlbGVnYW50LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQG1peGluIGxvZygkbWVzc2FnZSkge1xuICBAaWYgaW0tbG9nKCRtZXNzYWdlKSB7fVxufVxuXG5cbi8vL1xuLy8vIEZ1bmN0aW9uIHdpdGggbm8gYEByZXR1cm5gIGNhbGxlZCBuZXh0IHRvIGBAd2FybmAgaW4gU2FzcyAzLjNcbi8vLyB0byB0cmlnZ2VyIGEgY29tcGlsaW5nIGVycm9yIGFuZCBzdG9wIHRoZSBwcm9jZXNzLlxuLy8vXG5AZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vL1xuLy8vIERldGVybWluZXMgd2hldGhlciBhIGxpc3Qgb2YgY29uZGl0aW9ucyBpcyBpbnRlcmNlcHRlZCBieSB0aGUgc3RhdGljIGJyZWFrcG9pbnQuXG4vLy9cbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuLy8vXG4vLy8gQHJldHVybiB7Qm9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIGNvbmRpdGlvbnMgYXJlIGludGVyY2VwdGVkIGJ5IHRoZSBzdGF0aWMgYnJlYWtwb2ludFxuLy8vXG5AZnVuY3Rpb24gaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikge1xuICAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZTogbWFwLWdldCgkYnJlYWtwb2ludHMsICRpbS1uby1tZWRpYS1icmVha3BvaW50KTtcblxuICBAaWYgbm90ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlIHtcbiAgICBAaWYgaW0tbG9nKCdgI3skaW0tbm8tbWVkaWEtYnJlYWtwb2ludH1gIGlzIG5vdCBhIHZhbGlkIGJyZWFrcG9pbnQuJykge31cbiAgfVxuXG4gIEBlYWNoICRjb25kaXRpb24gaW4gJGNvbmRpdGlvbnMge1xuICAgIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1lZGlhLWV4cHJlc3Npb25zLCAkY29uZGl0aW9uKSB7XG4gICAgICAkb3BlcmF0b3I6IGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRjb25kaXRpb24pO1xuICAgICAgJHByZWZpeDogZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcik7XG4gICAgICAkdmFsdWU6IGdldC1leHByZXNzaW9uLXZhbHVlKCRjb25kaXRpb24sICRvcGVyYXRvcik7XG5cbiAgICAgIEBpZiAoJHByZWZpeCA9PSAnbWF4JyBhbmQgJHZhbHVlIDw9ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlKSBvclxuICAgICAgICAgICgkcHJlZml4ID09ICdtaW4nIGFuZCAkdmFsdWUgPiAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSkge1xuICAgICAgICBAcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgbm90IGluZGV4KCRpbS1uby1tZWRpYS1leHByZXNzaW9ucywgJGNvbmRpdGlvbikge1xuICAgICAgQHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuIHRydWU7XG59XG5cbi8vLy9cbi8vLyBQYXJzaW5nIGVuZ2luZVxuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vLy9cblxuXG4vLy9cbi8vLyBHZXQgb3BlcmF0b3Igb2YgYW4gZXhwcmVzc2lvblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IG9wZXJhdG9yIGZyb21cbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBBbnkgb2YgYD49YCwgYD5gLCBgPD1gLCBgPGAsIGDiiaVgLCBg4omkYFxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tb3BlcmF0b3IoJGV4cHJlc3Npb24pIHtcbiAgQGVhY2ggJG9wZXJhdG9yIGluICgnPj0nLCAnPicsICc8PScsICc8JywgJ+KJpScsICfiiaQnKSB7XG4gICAgQGlmIHN0ci1pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICAgICBAcmV0dXJuICRvcGVyYXRvcjtcbiAgICB9XG4gIH1cblxuICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXG4gIC8vIHJlbHkgb24gdGhlIGBpbS1sb2coLi4pYCBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgYGxvZyguLilgIG1peGluLiBCZWNhdXNlXG4gIC8vIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGFueXdoZXJlIGluIFNhc3MsIHdlIG5lZWQgdG8gaGFjayB0aGUgY2FsbCBpblxuICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxuICAvLyBTYXNzIDMuMywgY2hhbmdlIHRoaXMgbGluZSBpbiBgQGlmIGltLWxvZyguLikge31gIGluc3RlYWQuXG4gICRfOiBpbS1sb2coJ05vIG9wZXJhdG9yIGZvdW5kIGluIGAjeyRleHByZXNzaW9ufWAuJyk7XG59XG5cblxuLy8vXG4vLy8gR2V0IGRpbWVuc2lvbiBvZiBhbiBleHByZXNzaW9uLCBiYXNlZCBvbiBhIGZvdW5kIG9wZXJhdG9yXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIGV4dHJhY3QgZGltZW5zaW9uIGZyb21cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3IgZnJvbSBgJGV4cHJlc3Npb25gXG4vLy9cbi8vLyBAcmV0dXJuIHtTdHJpbmd9IC0gYHdpZHRoYCBvciBgaGVpZ2h0YCAob3IgcG90ZW50aWFsbHkgYW55dGhpbmcgZWxzZSlcbi8vL1xuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLWRpbWVuc2lvbigkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICRvcGVyYXRvci1pbmRleDogc3RyLWluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkcGFyc2VkLWRpbWVuc2lvbjogc3RyLXNsaWNlKCRleHByZXNzaW9uLCAwLCAkb3BlcmF0b3ItaW5kZXggLSAxKTtcbiAgJGRpbWVuc2lvbjogJ3dpZHRoJztcblxuICBAaWYgc3RyLWxlbmd0aCgkcGFyc2VkLWRpbWVuc2lvbikgPiAwIHtcbiAgICAkZGltZW5zaW9uOiAkcGFyc2VkLWRpbWVuc2lvbjtcbiAgfVxuXG4gIEByZXR1cm4gJGRpbWVuc2lvbjtcbn1cblxuXG4vLy9cbi8vLyBHZXQgZGltZW5zaW9uIHByZWZpeCBiYXNlZCBvbiBhbiBvcGVyYXRvclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRvcGVyYXRvciAtIE9wZXJhdG9yXG4vLy9cbi8vLyBAcmV0dXJuIHtTdHJpbmd9IC0gYG1pbmAgb3IgYG1heGBcbi8vL1xuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLXByZWZpeCgkb3BlcmF0b3IpIHtcbiAgQHJldHVybiBpZihpbmRleCgoJzwnLCAnPD0nLCAn4omkJyksICRvcGVyYXRvciksICdtYXgnLCAnbWluJyk7XG59XG5cblxuLy8vXG4vLy8gR2V0IHZhbHVlIG9mIGFuIGV4cHJlc3Npb24sIGJhc2VkIG9uIGEgZm91bmQgb3BlcmF0b3Jcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwcmVzc2lvbiAtIEV4cHJlc3Npb24gdG8gZXh0cmFjdCB2YWx1ZSBmcm9tXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRvcGVyYXRvciAtIE9wZXJhdG9yIGZyb20gYCRleHByZXNzaW9uYFxuLy8vXG4vLy8gQHJldHVybiB7TnVtYmVyfSAtIEEgbnVtZXJpYyB2YWx1ZVxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tdmFsdWUoJGV4cHJlc3Npb24sICRvcGVyYXRvcikge1xuICAkb3BlcmF0b3ItaW5kZXg6IHN0ci1pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcbiAgJHZhbHVlOiBzdHItc2xpY2UoJGV4cHJlc3Npb24sICRvcGVyYXRvci1pbmRleCArIHN0ci1sZW5ndGgoJG9wZXJhdG9yKSk7XG5cbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJHZhbHVlKSB7XG4gICAgJHZhbHVlOiBtYXAtZ2V0KCRicmVha3BvaW50cywgJHZhbHVlKTtcbiAgfSBAZWxzZSB7XG4gICAgJHZhbHVlOiB0by1udW1iZXIoJHZhbHVlKTtcbiAgfVxuXG4gICRpbnRlcnZhbDogbWFwLWdldCgkdW5pdC1pbnRlcnZhbHMsIHVuaXQoJHZhbHVlKSk7XG5cbiAgQGlmIG5vdCAkaW50ZXJ2YWwge1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW5zaWRlIGEgZnVuY3Rpb24sIHNvIHdlIGhhdmUgdG9cbiAgICAvLyByZWx5IG9uIHRoZSBgaW0tbG9nKC4uKWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gdGhlIGBsb2coLi4pYCBtaXhpbi4gQmVjYXVzZVxuICAgIC8vIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGFueXdoZXJlIGluIFNhc3MsIHdlIG5lZWQgdG8gaGFjayB0aGUgY2FsbCBpblxuICAgIC8vIGEgZHVtbXkgdmFyaWFibGUsIHN1Y2ggYXMgYCRfYC4gSWYgYW55Ym9keSBldmVyIHJhaXNlIGEgc2NvcGluZyBpc3N1ZSB3aXRoXG4gICAgLy8gU2FzcyAzLjMsIGNoYW5nZSB0aGlzIGxpbmUgaW4gYEBpZiBpbS1sb2coLi4pIHt9YCBpbnN0ZWFkLlxuICAgICRfOiBpbS1sb2coJ1Vua25vd24gdW5pdCBgI3t1bml0KCR2YWx1ZSl9YC4nKTtcbiAgfVxuXG4gIEBpZiAkb3BlcmF0b3IgPT0gJz4nIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSArICRpbnRlcnZhbDtcbiAgfSBAZWxzZSBpZiAkb3BlcmF0b3IgPT0gJzwnIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSAtICRpbnRlcnZhbDtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlO1xufVxuXG5cbi8vL1xuLy8vIFBhcnNlIGFuIGV4cHJlc3Npb24gdG8gcmV0dXJuIGEgdmFsaWQgbWVkaWEtcXVlcnkgZXhwcmVzc2lvblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBwYXJzZVxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIFZhbGlkIG1lZGlhIHF1ZXJ5XG4vLy9cbkBmdW5jdGlvbiBwYXJzZS1leHByZXNzaW9uKCRleHByZXNzaW9uKSB7XG4gIC8vIElmIGl0IGlzIHBhcnQgb2YgJG1lZGlhLWV4cHJlc3Npb25zLCBpdCBoYXMgbm8gb3BlcmF0b3JcbiAgLy8gdGhlbiB0aGVyZSBpcyBubyBuZWVkIHRvIGdvIGFueSBmdXJ0aGVyLCBqdXN0IHJldHVybiB0aGUgdmFsdWVcbiAgQGlmIG1hcC1oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pIHtcbiAgICBAcmV0dXJuIG1hcC1nZXQoJG1lZGlhLWV4cHJlc3Npb25zLCAkZXhwcmVzc2lvbik7XG4gIH1cblxuICAkb3BlcmF0b3I6IGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRleHByZXNzaW9uKTtcbiAgJGRpbWVuc2lvbjogZ2V0LWV4cHJlc3Npb24tZGltZW5zaW9uKCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkcHJlZml4OiBnZXQtZXhwcmVzc2lvbi1wcmVmaXgoJG9wZXJhdG9yKTtcbiAgJHZhbHVlOiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcblxuICBAcmV0dXJuICcoI3skcHJlZml4fS0jeyRkaW1lbnNpb259OiAjeyR2YWx1ZX0pJztcbn1cblxuLy8vXG4vLy8gU2xpY2UgYCRsaXN0YCBiZXR3ZWVuIGAkc3RhcnRgIGFuZCBgJGVuZGAgaW5kZXhlc1xuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy9cbi8vLyBAcGFyYW0ge0xpc3R9ICRsaXN0IC0gTGlzdCB0byBzbGljZVxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkc3RhcnQgWzFdIC0gU3RhcnQgaW5kZXhcbi8vLyBAcGFyYW0ge051bWJlcn0gJGVuZCBbbGVuZ3RoKCRsaXN0KV0gLSBFbmQgaW5kZXhcbi8vL1xuLy8vIEByZXR1cm4ge0xpc3R9IFNsaWNlZCBsaXN0XG4vLy9cbkBmdW5jdGlvbiBzbGljZSgkbGlzdCwgJHN0YXJ0OiAxLCAkZW5kOiBsZW5ndGgoJGxpc3QpKSB7XG4gIEBpZiBsZW5ndGgoJGxpc3QpIDwgMSBvciAkc3RhcnQgPiAkZW5kIHtcbiAgICBAcmV0dXJuICgpO1xuICB9XG5cbiAgJHJlc3VsdDogKCk7XG5cbiAgQGZvciAkaSBmcm9tICRzdGFydCB0aHJvdWdoICRlbmQge1xuICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8vLy9cbi8vLyBTdHJpbmcgdG8gbnVtYmVyIGNvbnZlcnRlclxuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vLy9cblxuXG4vLy9cbi8vLyBDYXN0cyBhIHN0cmluZyBpbnRvIGEgbnVtYmVyXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZyB8IE51bWJlcn0gJHZhbHVlIC0gVmFsdWUgdG8gYmUgcGFyc2VkXG4vLy9cbi8vLyBAcmV0dXJuIHtOdW1iZXJ9XG4vLy9cbkBmdW5jdGlvbiB0by1udW1iZXIoJHZhbHVlKSB7XG4gIEBpZiB0eXBlLW9mKCR2YWx1ZSkgPT0gJ251bWJlcicge1xuICAgIEByZXR1cm4gJHZhbHVlO1xuICB9IEBlbHNlIGlmIHR5cGUtb2YoJHZhbHVlKSAhPSAnc3RyaW5nJyB7XG4gICAgJF86IGltLWxvZygnVmFsdWUgZm9yIGB0by1udW1iZXJgIHNob3VsZCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgfVxuXG4gICRmaXJzdC1jaGFyYWN0ZXI6IHN0ci1zbGljZSgkdmFsdWUsIDEsIDEpO1xuICAkcmVzdWx0OiAwO1xuICAkZGlnaXRzOiAwO1xuICAkbWludXM6ICgkZmlyc3QtY2hhcmFjdGVyID09ICctJyk7XG4gICRudW1iZXJzOiAoJzAnOiAwLCAnMSc6IDEsICcyJzogMiwgJzMnOiAzLCAnNCc6IDQsICc1JzogNSwgJzYnOiA2LCAnNyc6IDcsICc4JzogOCwgJzknOiA5KTtcblxuICAvLyBSZW1vdmUgKy8tIHNpZ24gaWYgcHJlc2VudCBhdCBmaXJzdCBjaGFyYWN0ZXJcbiAgQGlmICgkZmlyc3QtY2hhcmFjdGVyID09ICcrJyBvciAkZmlyc3QtY2hhcmFjdGVyID09ICctJykge1xuICAgICR2YWx1ZTogc3RyLXNsaWNlKCR2YWx1ZSwgMik7XG4gIH1cblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIHN0ci1sZW5ndGgoJHZhbHVlKSB7XG4gICAgJGNoYXJhY3Rlcjogc3RyLXNsaWNlKCR2YWx1ZSwgJGksICRpKTtcblxuICAgIEBpZiBub3QgKGluZGV4KG1hcC1rZXlzKCRudW1iZXJzKSwgJGNoYXJhY3Rlcikgb3IgJGNoYXJhY3RlciA9PSAnLicpIHtcbiAgICAgIEByZXR1cm4gdG8tbGVuZ3RoKGlmKCRtaW51cywgLSRyZXN1bHQsICRyZXN1bHQpLCBzdHItc2xpY2UoJHZhbHVlLCAkaSkpXG4gICAgfVxuXG4gICAgQGlmICRjaGFyYWN0ZXIgPT0gJy4nIHtcbiAgICAgICRkaWdpdHM6IDE7XG4gICAgfSBAZWxzZSBpZiAkZGlnaXRzID09IDAge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCAqIDEwICsgbWFwLWdldCgkbnVtYmVycywgJGNoYXJhY3Rlcik7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkZGlnaXRzOiAkZGlnaXRzICogMTA7XG4gICAgICAkcmVzdWx0OiAkcmVzdWx0ICsgbWFwLWdldCgkbnVtYmVycywgJGNoYXJhY3RlcikgLyAkZGlnaXRzO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCk7XG59XG5cblxuLy8vXG4vLy8gQWRkIGAkdW5pdGAgdG8gYCR2YWx1ZWBcbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdmFsdWUgLSBWYWx1ZSB0byBhZGQgdW5pdCB0b1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdW5pdCAtIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdW5pdFxuLy8vXG4vLy8gQHJldHVybiB7TnVtYmVyfSAtIGAkdmFsdWVgIGV4cHJlc3NlZCBpbiBgJHVuaXRgXG4vLy9cbkBmdW5jdGlvbiB0by1sZW5ndGgoJHZhbHVlLCAkdW5pdCkge1xuICAkdW5pdHM6ICgncHgnOiAxcHgsICdjbSc6IDFjbSwgJ21tJzogMW1tLCAnJSc6IDElLCAnY2gnOiAxY2gsICdwYyc6IDFwYywgJ2luJzogMWluLCAnZW0nOiAxZW0sICdyZW0nOiAxcmVtLCAncHQnOiAxcHQsICdleCc6IDFleCwgJ3Z3JzogMXZ3LCAndmgnOiAxdmgsICd2bWluJzogMXZtaW4sICd2bWF4JzogMXZtYXgpO1xuXG4gIEBpZiBub3QgaW5kZXgobWFwLWtleXMoJHVuaXRzKSwgJHVuaXQpIHtcbiAgICAkXzogaW0tbG9nKCdJbnZhbGlkIHVuaXQgYCN7JHVuaXR9YC4nKTtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlICogbWFwLWdldCgkdW5pdHMsICR1bml0KTtcbn1cblxuLy8vXG4vLy8gVGhpcyBtaXhpbiBhaW1zIGF0IHJlZGVmaW5pbmcgdGhlIGNvbmZpZ3VyYXRpb24ganVzdCBmb3IgdGhlIHNjb3BlIG9mXG4vLy8gdGhlIGNhbGwuIEl0IGlzIGhlbHBmdWwgd2hlbiBoYXZpbmcgYSBjb21wb25lbnQgbmVlZGluZyBhbiBleHRlbmRlZFxuLy8vIGNvbmZpZ3VyYXRpb24gc3VjaCBhcyBjdXN0b20gYnJlYWtwb2ludHMgKHJlZmVycmVkIHRvIGFzIHR3ZWFrcG9pbnRzKVxuLy8vIGZvciBpbnN0YW5jZS5cbi8vL1xuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vL1xuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWtwb2ludHMgWygpXSAtIE1hcCBvZiB0d2Vha3BvaW50cyB0byBiZSBtZXJnZWQgd2l0aCBgJGJyZWFrcG9pbnRzYFxuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMgWygpXSAtIE1hcCBvZiB0d2Vha2VkIG1lZGlhIGV4cHJlc3Npb25zIHRvIGJlIG1lcmdlZCB3aXRoIGAkbWVkaWEtZXhwcmVzc2lvbmBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBFeHRlbmQgdGhlIGdsb2JhbCBicmVha3BvaW50cyB3aXRoIGEgdHdlYWtwb2ludFxuLy8vICBAaW5jbHVkZSBtZWRpYS1jb250ZXh0KCgnY3VzdG9tJzogNjc4cHgpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9Y3VzdG9tJykge1xuLy8vICAgICAgIC8vIC4uLlxuLy8vICAgICAgfVxuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEV4dGVuZCB0aGUgZ2xvYmFsIG1lZGlhIGV4cHJlc3Npb25zIHdpdGggYSBjdXN0b20gb25lXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoJ2FsbCc6ICdhbGwnKSkge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgQGluY2x1ZGUgbWVkaWEoJ2FsbCcsICc+cGhvbmUnKSB7XG4vLy8gICAgICAgLy8gLi4uXG4vLy8gICAgICB9XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gRXh0ZW5kIGJvdGggY29uZmlndXJhdGlvbiBtYXBzXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoKCdjdXN0b20nOiA2NzhweCksICgnYWxsJzogJ2FsbCcpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnYWxsJywgJz5waG9uZScsICc8PWN1c3RvbScpIHtcbi8vLyAgICAgICAvLyAuLi5cbi8vLyAgICAgIH1cbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuQG1peGluIG1lZGlhLWNvbnRleHQoJHR3ZWFrcG9pbnRzOiAoKSwgJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoKSkge1xuICAvLyBTYXZlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICRnbG9iYWwtYnJlYWtwb2ludHM6ICRicmVha3BvaW50cztcbiAgJGdsb2JhbC1tZWRpYS1leHByZXNzaW9uczogJG1lZGlhLWV4cHJlc3Npb25zO1xuXG4gIC8vIFVwZGF0ZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6IG1hcC1tZXJnZSgkYnJlYWtwb2ludHMsICR0d2Vha3BvaW50cykgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiBtYXAtbWVyZ2UoJG1lZGlhLWV4cHJlc3Npb25zLCAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMpICFnbG9iYWw7XG5cbiAgQGNvbnRlbnQ7XG5cbiAgLy8gUmVzdG9yZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6ICRnbG9iYWwtYnJlYWtwb2ludHMgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiAkZ2xvYmFsLW1lZGlhLWV4cHJlc3Npb25zICFnbG9iYWw7XG59XG5cbi8vLy9cbi8vLyBpbmNsdWRlLW1lZGlhIHB1YmxpYyBleHBvc2VkIEFQSVxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vL1xuXG5cbi8vL1xuLy8vIEdlbmVyYXRlcyBhIG1lZGlhIHF1ZXJ5IGJhc2VkIG9uIGEgbGlzdCBvZiBjb25kaXRpb25zXG4vLy9cbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggYSBzaW5nbGUgc2V0IGJyZWFrcG9pbnRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5waG9uZScpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggdHdvIHNldCBicmVha3BvaW50c1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9dGFibGV0JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBjdXN0b20gdmFsdWVzXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PTM1OHB4JywgJzw4NTBweCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggc2V0IGJyZWFrcG9pbnRzIHdpdGggY3VzdG9tIHZhbHVlc1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPmRlc2t0b3AnLCAnPD0xMzUwcHgnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc3RhdGljIGV4cHJlc3Npb25cbi8vLyAgQGluY2x1ZGUgbWVkaWEoJ3JldGluYTJ4JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gTWl4aW5nIGV2ZXJ5dGhpbmdcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49MzUwcHgnLCAnPHRhYmxldCcsICdyZXRpbmEzeCcpIHsgfVxuLy8vXG5AbWl4aW4gbWVkaWEoJGNvbmRpdGlvbnMuLi4pIHtcbiAgQGlmICgkaW0tbWVkaWEtc3VwcG9ydCBhbmQgbGVuZ3RoKCRjb25kaXRpb25zKSA9PSAwKSBvclxuICAgICAgKG5vdCAkaW0tbWVkaWEtc3VwcG9ydCBhbmQgaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikpIHtcbiAgICBAY29udGVudDtcbiAgfSBAZWxzZSBpZiAoJGltLW1lZGlhLXN1cHBvcnQgYW5kIGxlbmd0aCgkY29uZGl0aW9ucykgPiAwKSB7XG4gICAgQG1lZGlhICN7dW5xdW90ZShwYXJzZS1leHByZXNzaW9uKG50aCgkY29uZGl0aW9ucywgMSkpKX0ge1xuICAgICAgLy8gUmVjdXJzaXZlIGNhbGxcbiAgICAgIEBpbmNsdWRlIG1lZGlhKHNsaWNlKCRjb25kaXRpb25zLCAyKS4uLikge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5wcmVsb2FkZXJcbntcbiAgQGV4dGVuZCAlY292ZXI7XG4gIEBleHRlbmQgJWNlbnRlcjtcblxuICBiYWNrZ3JvdW5kOiAjMDMwMzAzO1xuICBjb2xvcjogJGNvbG9yLWN1bHR1cmVkO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6IHooJ3ByZWxvYWRlcicpO1xuXG4gICZfX3RleHRcbiAge1xuICAgIEBleHRlbmQgJXRpdGxlLTUwO1xuXG4gICAgc3BhblxuICAgIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICB9XG5cbiAgJl9fbnVtYmVyXG4gIHtcbiAgICBAZXh0ZW5kICVkZXNjLTIwO1xuXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogNy40cmVtO1xuICAgIGxlZnQ6NTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgJl9fdGV4dFxuICAgIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gIH1cbn1cbiIsIi5uYXZpZ2F0aW9uXG57XG4gIC8vQGV4dGVuZCAlY292ZXI7XG5cbiAgei1pbmRleDogeignbmF2aWdhdGlvbicpO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxMDAlO1xuICAvKiBwb2ludGVyLWV2ZW50czogbm9uZTsgKi9cbn1cblxuLm5hdmlnYXRpb25fX3dyYXBwZXJcbntcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDVyZW07XG59XG5cbi5uYXZpZ2F0aW9uX19ob21lXG57XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG5cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiA0cmVtO1xuICB0b3A6IDRyZW07XG59XG5cbi5uYXZpZ2F0aW9uX19ob21lX19saW5rXG57XG4gIEBleHRlbmQgJWxpbmstLWhpZGRlbjtcbiAgQGV4dGVuZCAlZGVzYy0yMDtcblxuICBmb250LXdlaWdodDogMzAwO1xufVxuXG4ubmF2aWdhdGlvbl9fbGlzdFxue1xuXG59XG5cbi5uYXZpZ2F0aW9uX19saXN0X19pdGVtXG57XG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiA0cmVtO1xuICB0b3A6IDRyZW07XG59XG5cbi5uYXZpZ2F0aW9uX19saXN0X19pdGVtX19saW5rXG57XG4gIEBleHRlbmQgJWxpbmstLWhpZGRlbjtcbiAgQGV4dGVuZCAlZGVzYy0yMDtcblxuICBmb250LXdlaWdodDogMzAwO1xuICBkaXNwbGF5OiBibG9jaztcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG4iLCIuaG9tZVxue1xuICBAZXh0ZW5kICVwYWdlO1xuXG4gIHotaW5kZXg6IDA7XG5cbiAgJl9fd3JhcHBlclxuICB7XG4gICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG5cbiAgJl9fZ2FsbGVyeVxuICB7XG4gICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICB6LWluZGV4OiAxO1xuXG4gICAgICAmX193cmFwcGVyXG4gICAgICB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTMycmVtICogMC41LCAtNTAlKTtcbiAgICAgIH1cblxuICAgICAgJl9fbGlua1xuICAgICAge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgbWFyZ2luOiAwIDEuMzI1cmVtO1xuXG4gICAgICAgICY6Zmlyc3QtY2hpbGRcbiAgICAgICAge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpsYXN0LWNoaWxkXG4gICAgICAgIHtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJl9fbWVkaWFcbiAgICAgIHtcbiAgICAgICAgaGVpZ2h0OiA1NXJlbTtcbiAgICAgICAgd2lkdGg6IDIwcmVtO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gICAgICAgICZfX2ltYWdlXG4gICAgICAgIHtcbiAgICAgICAgICBAZXh0ZW5kICVjb3ZlcjtcblxuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgfVxuXG4gICZfX2NvbnRlbnRcbiAge1xuXG4gICAgJl9fdGl0bGVcbiAgICB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3R0b206IDZyZW07XG4gICAgICBsZWZ0OiA0cmVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgcGFkZGluZzogMXJlbTtcblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS0xMDA7XG5cbiAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgICBzcGFuXG4gICAgICAgIHtcbiAgICAgICAgICBzcGFuXG4gICAgICAgICAge1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX19saW5rc1xuICB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogNnJlbTtcbiAgICByaWdodDogNHJlbTtcbiAgICB6LWluZGV4OiAxO1xuXG4gICAgJl9fdGl0bGVcbiAgICB7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcblxuICAgICAgbWFyZ2luOiAwLjZyZW07XG5cbiAgICAgICY6Zmlyc3QtY2hpbGRcbiAgICAgIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgIH1cblxuICAgICAgJjpsYXN0LWNoaWxkXG4gICAgICB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICB9XG5cbiAgICAgICZfX3RleHRcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAlZGVzYy0xNjtcblxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAmX19saW5rXG4gICAgICAgIHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5hYm91dFxue1xuICBAZXh0ZW5kICVwYWdlO1xuXG4gICZfX21lZGlhX19maWd1cmVcbiAge1xuICAgIGhlaWdodDogNDByZW07XG4gICAgd2lkdGg6IDUwcmVtO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICZfX2ltYWdlXG4gICAge1xuICAgICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIH1cbiAgfVxuXG5cbiAgJl9fd3JhcHBlclxuICB7XG5cbiAgfVxuXG4gICZfX2hlYWRlclxuICB7XG4gICAgcGFkZGluZy10b3A6IDEwcmVtO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNzByZW07XG5cbiAgICAmX190aXRsZVxuICAgIHtcbiAgICAgIGdyaWQtYXJlYTogMSAvIDEgLyAtMSAvIDI7XG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICBwYWRkaW5nOiAxMHJlbSAxMi43cmVtO1xuICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGNvbG9yLWNhZGV0LWJsdWUtY3JheW9sYTtcblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS0yMDA7XG5cbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDJyZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgJl9fbWVkaWFcbiAgICB7XG4gICAgICBncmlkLWFyZWE6IDEgLyAyIC8gLTEgLyAtMTtcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xuXG4gICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICB9XG5cbiAgJl9fYmFja2dyb3VuZFxuICB7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAmX19nY1xuICAgIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA1cmVtIDcwcmVtO1xuXG4gICAgICAmX19zbWRlc2NcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAlY2VudGVyO1xuXG4gICAgICAgIGdyaWQtYXJlYTogMSAvIDEgLyAtMSAvIDI7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDEwcmVtIDEyLjdyZW07XG5cbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAgICAgJl9fdGV4dFxuICAgICAgICB7XG4gICAgICAgICAgQGV4dGVuZCAlZGVzYy01MDtcblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICZfX2JnXG4gICAgICB7XG4gICAgICAgIGdyaWQtYXJlYTogMSAvIDIgLyAtMSAvIDM7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xuXG4gICAgICAgICZfX3RpdGxlXG4gICAgICAgIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgICB3cml0aW5nLW1vZGU6dmVydGljYWwtcmw7XG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xuXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IDJyZW0gMDtcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG4gICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAgICAgICAmX190ZXh0XG4gICAgICAgICAge1xuICAgICAgICAgICAgQGV4dGVuZCAldGl0bGUtMjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICZfX2Rlc2NcbiAgICB7XG4gICAgICBncmlkLWFyZWE6IDEgLyAzIC8gLTEgLyAtMTtcblxuICAgICAgJl9fZnJhbWVcbiAgICAgIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiA0cmVtIDJyZW07XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY29sb3ItY2FkZXQtYmx1ZS1jcmF5b2xhO1xuXG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZVxuICAgICAgICB7XG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpsYXN0LW9mLXR5cGVcbiAgICAgICAge1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItY2FkZXQtYmx1ZS1jcmF5b2xhO1xuICAgICAgICB9XG5cbiAgICAgICAgJl9fdGV4dFxuICAgICAgICB7XG4gICAgICAgICAgQGV4dGVuZCAlZGVzYy0yNTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICZfX2NsaWVudHNcbiAge1xuICAgIHBhZGRpbmctYm90dG9tOiAxMi43cmVtO1xuXG4gICAgJl9fdGl0bGVcbiAgICB7XG5cblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS03MDtcblxuICAgICAgICBsZXR0ZXItc3BhY2luZzogMnJlbTtcbiAgICAgICAgcGFkZGluZzogMTIuN3JlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmX19nYWxsZXJ5XG4gICAge1xuXG4gICAgICAmX193cmFwcGVyXG4gICAgICB7XG4gICAgICAgIHBhZGRpbmc6IDAgMzVyZW07XG4gICAgICB9XG5cbiAgICAgICZfX2NsaWVudFxuICAgICAge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAgICAgJl9fbmFtZVxuICAgICAgICB7XG4gICAgICAgICAgQGV4dGVuZCAlZGVzYy0yNTtcblxuICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxcmVtO1xuICAgICAgICAgIHBhZGRpbmc6IDNyZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gICZfX2Rlc2NcbiAge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNzByZW07XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDEyLjdyZW07XG4gICAgcGFkZGluZy1yaWdodDogMDtcblxuICAgICZfX2djXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAxIC8gMSAvIC0xIC8gMjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDEyLjdyZW07XG5cbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDVyZW0gMWZyO1xuXG4gICAgICAmX190aXRsZVxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICVjZW50ZXI7XG5cbiAgICAgICAgZ3JpZC1hcmVhOiAxIC8gMSAvIC0xIC8gMjtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICAmX190ZXh0XG4gICAgICAgIHtcbiAgICAgICAgICBAZXh0ZW5kICV0aXRsZS0yNTtcblxuICAgICAgICAgIHdyaXRpbmctbW9kZTogdmVydGljYWwtcmw7XG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICZfX2Rlc2NcbiAgICAgIHtcbiAgICAgICAgZ3JpZC1hcmVhOiAxIC8gMiAvIC0xIC8gLTE7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICAgICZfX3RleHRcbiAgICAgICAge1xuICAgICAgICAgIEBleHRlbmQgJWRlc2MtMjU7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgJl9fbG9jYXRpb25cbiAgICB7XG4gICAgICBAZXh0ZW5kICVjZW50ZXI7XG5cbiAgICAgIGdyaWQtYXJlYTogMSAvIDIgLyAtMSAvIC0xO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBwYWRkaW5nOiAxMi43cmVtO1xuXG4gICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAgICZfX3RleHRcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAldGl0bGUtMTAwO1xuXG4gICAgICAgIHdyaXRpbmctbW9kZTogdmVydGljYWwtbHI7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJl9fcHJlc3NcbiAge1xuICAgIHBhZGRpbmctYm90dG9tOiAxMi43cmVtO1xuXG4gICAgJl9fdGl0bGVcbiAgICB7XG5cbiAgICAgICZfX3RleHRcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAldGl0bGUtNzA7XG5cbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFyZW07XG4gICAgICAgIHBhZGRpbmc6IDEyLjdyZW07XG4gICAgICAgIHBhZGRpbmctdG9wOiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2NvbnRlbnRcbiAgICB7XG4gICAgICBwYWRkaW5nOiAwIDM1cmVtO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICAmX19kaXZcbiAgICAgIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDNyZW07XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItY2FkZXQtYmx1ZS1jcmF5b2xhO1xuXG4gICAgICAgICZfX3RpdGxlXG4gICAgICAgIHtcbiAgICAgICAgICBAZXh0ZW5kICVkZXNjLTI1O1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMC41cmVtO1xuXG4gICAgICAgICAgJl9fbGlua1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gICZfX2NvbnRhY3RcbiAge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAyMi43cmVtO1xuXG4gICAgJl9fdGl0bGVcbiAgICB7XG4gICAgICBAZXh0ZW5kICVjZW50ZXI7XG5cbiAgICAgIHBhZGRpbmctYm90dG9tOiAxNXJlbTtcblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS0xMDA7XG5cbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmX19kZXRhaWxzXG4gICAge1xuICAgICAgQGV4dGVuZCAlY2VudGVyO1xuXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTIuN3JlbTtcblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICVsaW5rLS1oaWRkZW47XG4gICAgICAgIEBleHRlbmQgJWRlc2MtNDA7XG5cbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFyZW07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJl9fZm9vdGVyXG4gIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcmVtO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA3MHJlbSAxZnI7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRjb2xvci1jYWRldC1ibHVlLWNyYXlvbGE7XG5cbiAgICAmX19tZWRpYVxuICAgIHtcbiAgICAgIGdyaWQtYXJlYTogMSAvIDEgLyAtMSAvIDI7XG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcblxuICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIH1cblxuICAgICZfX3RpdGxlXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAxIC8gMiAvIC0xIC8gLTE7XG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICBwYWRkaW5nOiAxMHJlbSAxMi43cmVtO1xuICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkY29sb3ItY2FkZXQtYmx1ZS1jcmF5b2xhO1xuXG4gICAgICAmX190ZXh0XG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJXRpdGxlLTIwMDtcblxuICAgICAgICBsZXR0ZXItc3BhY2luZzogMnJlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5nYWxsZXJ5XG57XG4gIEBleHRlbmQgJXBhZ2U7XG5cblxuICAmX193cmFwcGVyXG4gIHtcbiAgICBAZXh0ZW5kICVjb3ZlcjtcblxuICB9XG5cbiAgJl9fbWVkaWFcbiAge1xuICAgIEBleHRlbmQgJWNvdmVyO1xuXG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBwbGFjZS1pdGVtczogY2VudGVyO1xuXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgICZfX2ltYWdlc1xuICAgIHtcbiAgICAgIHdpZHRoOiAzM3JlbTtcbiAgICAgIGhlaWdodDogNTByZW07XG5cbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgJl9faW1hZ2VcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJl9fdGl0bGVcbiAge1xuICAgIEBleHRlbmQgJXRpdGxlLTEwMDtcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG5cbiAgICAmX190ZXh0XG4gICAge1xuICAgICAgQGV4dGVuZCAldGl0bGUtMjAwO1xuXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgbWl4LWJsZW5kLW1vZGU6IGRpZmZlcmVuY2U7XG4gICAgICB6LWluZGV4OiAtNTtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAycmVtO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9*/