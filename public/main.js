/*! For license information please see main.js.LICENSE.txt */
(()=>{var t,e,n={"./app/animations/Label.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>u});var s=n("./node_modules/gsap/index.js"),r=n("./node_modules/lodash/each.js"),o=n.n(r),i=n("./app/classes/Animation.js"),a=n("./app/utils/text.js");class u extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.elementLinesSpan=(0,a.split)({element:this.element,append:!0})}animateIn(){this.tl_in=s.default.timeline({delay:.5}),this.tl_in.set(this.element,{autoAlpha:1}),o()(this.elementLines,((t,e)=>{this.tl_in.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.5,duration:1,ease:"expo.out",y:"0%"},0)}))}animateOut(){s.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,a.calculate)(this.elementLinesSpan)}}},"./app/animations/Paragraph.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>u});var s=n("./node_modules/gsap/index.js"),r=n("./node_modules/lodash/each.js"),o=n.n(r),i=n("./app/classes/Animation.js"),a=n("./app/utils/text.js");class u extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.elementLinesSpan=(0,a.split)({element:this.element,append:!0})}animateIn(){this.tl_in=s.default.timeline({delay:.5}),this.tl_in.set(this.element,{autoAlpha:1}),o()(this.elementLines,((t,e)=>{this.tl_in.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1,ease:"expo.out",y:"0%"},0)}))}animateOut(){s.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,a.calculate)(this.elementLinesSpan)}}},"./app/animations/Title.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>u});var s=n("./node_modules/gsap/index.js"),r=n("./node_modules/lodash/each.js"),o=n.n(r),i=n("./app/classes/Animation.js"),a=n("./app/utils/text.js");class u extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.elementLinesSpan=(0,a.split)({element:this.element,append:!0})}animateIn(){this.tl_in=s.default.timeline({delay:.5}),this.tl_in.set(this.element,{autoAlpha:1}),o()(this.elementLines,((t,e)=>{this.tl_in.fromTo(t,{y:"100%"},{delay:.2*e,duration:1,ease:"expo.out",y:"0%"},0)}))}animateOut(){s.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,a.calculate)(this.elementLinesSpan)}}},"./app/animations/Vertical.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>o});var s=n("./node_modules/gsap/index.js"),r=n("./app/classes/Animation.js");class o extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){this.tl_in=s.default.timeline({delay:.5}),this.tl_in.fromTo(this.element,{autoAlpha:0,scale:1.2},{autoAlpha:1,scale:1,ease:"expo.out",duration:1.5})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./app/classes/Component.js");class r extends s.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}onResize(){}}},"./app/classes/AsyncLoad.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./app/classes/Component.js");class r extends s.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src?this.element.classList.add("loaded"):(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Colors.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{ColorManager:()=>r});var s=n("./node_modules/gsap/index.js");const r=new class{change({backgroundColor:t,color:e}){s.default.to(document.documentElement,{backgroundColor:t,color:e,duration:1.5})}}},"./app/classes/Component.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var s=n("./node_modules/events/events.js"),r=n.n(s),o=n("./node_modules/lodash/each.js"),i=n.n(o);class a extends(r()){constructor({element:t,elements:e}){super(),this.selector=t,this.selectorChildren={...e},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},i()(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>g});var s=n("./node_modules/gsap/index.js"),r=n("./node_modules/lodash/each.js"),o=n.n(r),i=n("./node_modules/lodash/map.js"),a=n.n(i),u=n("./node_modules/prefix/index.js"),c=n.n(u),d=n("./app/animations/Title.js"),l=n("./app/animations/Paragraph.js"),h=n("./app/animations/Label.js"),f=n("./app/animations/Vertical.js"),m=n("./app/classes/AsyncLoad.js"),p=n("./app/classes/Colors.js");class g{constructor({element:t,elements:e,id:n}){this.selector=t,this.selectorChildren={...e,animationTitles:'[data-animation="title"]',animationParagraphs:'[data-animation="paragraph"]',animationLabel:'[data-animation="label"]',animationVertical:'[data-animation="vertical"]',images:"[data-src]"},this.id=n,this.transform_prefix=c()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},o()(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))})),this.createAnimations(),this.preloadImages()}createAnimations(){this.animations=[],this.animationTitles=a()(this.elements.animationTitles,(t=>new d.default({element:t}))),this.animations.push(...this.animationTitles),this.animationParagraphs=a()(this.elements.animationParagraphs,(t=>new l.default({element:t}))),this.animations.push(...this.animationParagraphs),this.animationLabel=a()(this.elements.animationLabel,(t=>new h.default({element:t}))),this.animations.push(...this.animationLabel),this.animationVertical=a()(this.elements.animationVertical,(t=>new f.default({element:t}))),this.animations.push(...this.animationVertical)}preloadImages(){this.images=a()(this.elements.images,(t=>new m.default({element:t})))}show(){return new Promise((t=>{p.ColorManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),this.animateIn=s.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1,onComplete:t}),this.animateIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((t=>{this.removeEventListeners(),this.animateOut=s.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:t})}))}onWheel({pixelY:t}){this.scroll.target+=t}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),o()(this.animations,(t=>t.onResize()))}update(){this.scroll.target=s.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transform_prefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}}},"./app/components/Canvas/About/Media.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var s=n("./node_modules/gsap/index.js"),r=n("./node_modules/ogl/src/core/Texture.js"),o=n("./node_modules/ogl/src/core/Program.js"),i=n("./node_modules/ogl/src/core/Mesh.js"),a=n("./app/shaders/about/vertex.glsl"),u=n("./app/shaders/about/fragment.glsl");class c{constructor({element:t,index:e,geometry:n,gl:s,scene:r,screen:o,viewport:i}){this.element=t,this.index=e,this.geo=n,this.gl=s,this.scene=r,this.screen=o,this.viewport=i,this.time=0,this.createMesh(),this.createBounds()}createMesh(){const t=new Image,e=new r.Texture(this.gl,{generateMipmaps:!1});this.program=new o.Program(this.gl,{vertex:a.default,fragment:u.default,uniforms:{tMap:{value:e},u_alpha:{value:0},u_time:{value:0},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}}}),t.crossOrigin="anonymous",t.src=this.element.getAttribute("data-src"),t.onload=()=>{this.program.uniforms.u_imageSize.value=[t.naturalWidth,t.naturalHeight],e.image=t},this.plane=new i.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.plane.setParent(this.scene)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}show(){s.default.fromTo(this.program.uniforms.u_alpha,{value:0,duration:1},{value:1,duration:1})}hide(){s.default.to(this.program.uniforms.u_alpha,{value:0,duration:1})}onResize(t){if(t){const{screen:e,viewport:n}=t;e&&(this.screen=e),n&&(this.viewport=n,this.plane.program.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}updateX(){this.x=this.bounds.left/this.screen.width,this.plane.position.x=-this.viewport.width/2+this.plane.scale.x/2+this.x*this.viewport.width}updateY(t){this.y=this.bounds.top/this.screen.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y*this.viewport.height}update(){this.bounds&&(this.time+=.05,this.program.uniforms.u_time.value=this.time,this.updateScale(),this.updateX(),this.updateY())}}},"./app/components/Canvas/About/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>u});var s=n("./node_modules/ogl/src/core/Transform.js"),r=n("./node_modules/ogl/src/extras/Plane.js"),o=n("./node_modules/lodash/map.js"),i=n.n(o),a=n("./app/components/Canvas/About/Media.js");class u{constructor({gl:t,scene:e,screen:n,viewport:r}){this.gl=t,this.scene=e,this.screen=n,this.viewport=r,this.group=new s.Transform,this.scroll={current:0,target:0,last:0,ease:.05},this.createGeometry(),this.getElements(),this.onResize(),this.createMedias(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geo=new r.Plane(this.gl,{heightSegments:100,widthSegments:200})}getElements(){this.elements=document.querySelectorAll(".about__media__figure__image")}createMedias(){this.media_elements=i()(this.elements,((t,e)=>new a.default({element:t,index:e,geometry:this.geo,gl:this.gl,scene:this.group,screen:this.screen,viewport:this.viewport})))}show(){i()(this.media_elements,(t=>t.show()))}hide(){i()(this.media_elements,(t=>t.hide()))}onResize(){i()(this.media_elements,(t=>t.onResize({screen:this.screen,viewport:this.viewport})))}onTouchDown({y:t}){}onTouchMove({y:t}){}onTouchUp({y:t}){}onWheel({pixelY:t}){}update(t){const e=t.current/this.screen.height*this.viewport.height;this.group.position.y=e,i()(this.media_elements,(t=>t.update()))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Gallery/GalleryElement.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var s=n("./node_modules/ogl/src/core/Texture.js"),r=n("./node_modules/ogl/src/core/Program.js"),o=n("./node_modules/ogl/src/core/Mesh.js"),i=n("./node_modules/gsap/index.js"),a=n("./app/shaders/gallery/vertex.glsl"),u=n("./app/shaders/gallery/fragment.glsl");class c{constructor({element:t,index:e,geometry:n,gl:s,length:r,scene:o,screen:i,viewport:a}){this.element=t,this.index=e,this.geo=n,this.gl=s,this.length=r,this.scene=o,this.screen=i,this.viewport=a,this.new_pos=0,this.createMesh(),this.createBounds()}createMesh(){const t=new Image,e=new s.Texture(this.gl,{generateMipmaps:!1});this.program=new r.Program(this.gl,{vertex:a.default,fragment:u.default,uniforms:{tMap:{value:e},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_alpha:{value:0},u_offset:{value:0},u_strength:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}}}),t.crossOrigin="anonymous",t.src=this.element.getAttribute("data-src"),t.onload=()=>{this.program.uniforms.u_imageSize.value=[t.naturalWidth,t.naturalHeight],e.image=t},this.plane=new o.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.plane.setParent(this.scene)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y],this.gallery_height=this.length*this.bounds.height,this.full_height=this.gallery_height/this.screen.height*this.viewport.height,this.pos_x=Math.cos(this.index)*(this.screen.width/2/this.bounds.height)}show(){i.default.fromTo(this.program.uniforms.u_alpha,{value:0,duration:1},{value:1,duration:1})}hide(){i.default.to(this.program.uniforms.u_alpha,{value:0,duration:1})}onResize(t){if(this.new_pos=0,t){const{screen:e,viewport:n}=t;e&&(this.screen=e),n&&(this.viewport=n,this.plane.program.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}updateX(){this.x=this.bounds.left/this.screen.width,this.plane.position.x=-this.viewport.width/2+this.plane.scale.x/2+this.x*this.viewport.width+this.pos_x}updateY(t=0){this.y=(this.bounds.top-t)/this.screen.height;const e=this.plane.position.y-this.y/100;this.plane.program.uniforms.u_offset.value=i.default.utils.mapRange(-4,4,-.35,.35,e),this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y*this.viewport.height+this.new_pos}update(t,e,n){if(this.bounds){if(this.updateScale(),this.updateX(),this.updateY(t),this.plane.program.uniforms.u_strength.value=(t-e)/this.screen.height*15,"up"===n){this.plane.position.y+this.plane.scale.y<-this.viewport.height/2&&(this.new_pos+=this.full_height)}if("down"===n){this.plane.position.y-this.plane.scale.y>this.viewport.height/2&&(this.new_pos-=this.full_height)}}}}},"./app/components/Canvas/Gallery/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var s=n("./node_modules/ogl/src/core/Transform.js"),r=n("./node_modules/ogl/src/extras/Plane.js"),o=n("./node_modules/gsap/index.js"),i=n("./node_modules/lodash/map.js"),a=n.n(i),u=n("./app/components/Canvas/Gallery/GalleryElement.js");class c{constructor({gl:t,scene:e,screen:n,viewport:r}){this.gl=t,this.scene=e,this.screen=n,this.viewport=r,this.group=new s.Transform,this.scroll={current:0,target:0,last:0,speed:.1,ease:.05},this.createGeometry(),this.getElements(),this.onResize(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geo=new r.Plane(this.gl,{heightSegments:10})}getElements(){this.elements=document.querySelectorAll("img.gallery__media__images__image"),this.length=this.elements.length}createGallery(){this.gallery_elements=a()(this.elements,((t,e)=>new u.default({element:t,index:e,geometry:this.geo,gl:this.gl,length:this.length,scene:this.group,screen:this.screen,viewport:this.viewport})))}show(){a()(this.gallery_elements,(t=>t.show()))}hide(){a()(this.gallery_elements,(t=>t.hide()))}onResize(){a()(this.gallery_elements,(t=>t.onResize({screen:this.screen,viewport:this.viewport})))}onTouchDown({y:t}){this.scroll.position=this.scroll.current}onTouchMove({y:t}){const e=2*(t.start-t.end);this.scroll.target=this.scroll.position+e}onTouchUp({y:t}){}onWheel({pixelY:t}){this.scroll.target+=.5*t}update(){this.scroll.target+=this.scroll.speed,this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current<this.scroll.last?(this.direction="up",this.scroll.speed=-.1):(this.direction="down",this.scroll.speed=.1);const{current:t,last:e}=this.scroll;a()(this.gallery_elements,(n=>n.update(t,e,this.direction))),this.scroll.last=this.scroll.current}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var s=n("./node_modules/ogl/src/core/Transform.js"),r=n("./node_modules/ogl/src/extras/Plane.js"),o=n("./node_modules/gsap/index.js"),i=n("./node_modules/lodash/map.js"),a=n.n(i),u=n("./app/components/Canvas/Home/menu/MenuElement.js");class c{constructor({gl:t,scene:e,screen:n,viewport:r,renderer:o}){this.gl=t,this.scene=e,this.screen=n,this.viewport=r,this.group=new s.Transform,this.scroll={current:0,target:0,last:0,speed:.1,ease:.05},this.createGeometry(),this.getElements(),this.onResize(),this.createMenu(o),this.group.setParent(this.scene),this.show()}createGeometry(){this.geo=new r.Plane(this.gl,{heightSegments:10})}getElements(){this.elements=document.querySelectorAll("img.home__gallery__media__image"),this.text_elements=document.querySelectorAll(".home__gallery__title__text"),this.length=this.elements.length}createMenu(t){this.menu_elements=a()(this.elements,((e,n)=>new u.default({element:e,index:n,renderer:t,text:this.text_elements[n],geometry:this.geo,gl:this.gl,length:this.length,scene:this.group,screen:this.screen,viewport:this.viewport})))}show(){a()(this.menu_elements,(t=>t.show()))}hide(){a()(this.menu_elements,(t=>t.hide()))}onResize(){a()(this.menu_elements,(t=>t.onResize({screen:this.screen,viewport:this.viewport})))}onTouchDown({y:t,x:e}){this.scroll.position=this.scroll.current}onTouchMove({y:t,x:e}){const n=e.start-e.end;this.scroll.target=this.scroll.position-n}onTouchUp({y:t,x:e}){}onWheel({pixelY:t}){this.scroll.target+=.5*t}update(){this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current<this.scroll.last?this.direction="up":this.direction="down",a()(this.menu_elements,(t=>t.update(this.scroll,this.direction))),this.scroll.last=this.scroll.current}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/menu/MenuElement.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>d});var s=n("./node_modules/ogl/src/core/Texture.js"),r=n("./node_modules/ogl/src/core/Program.js"),o=n("./node_modules/ogl/src/core/Mesh.js"),i=n("./node_modules/gsap/index.js"),a=n("./app/shaders/home/element/vertex.glsl"),u=n("./app/shaders/home/element/fragment.glsl"),c=n("./app/components/Canvas/Home/menu/Title.js");class d{constructor({element:t,index:e,renderer:n,text:s,geometry:r,gl:o,length:i,scene:a,screen:u,viewport:c}){this.element=t,this.index=e,this.text=s,this.geo=r,this.gl=o,this.length=i,this.scene=a,this.screen=u,this.viewport=c,this.new_pos=0,this.createMesh(),this.createTitle(n),this.createBounds()}createMesh(){const t=new Image,e=new s.Texture(this.gl,{generateMipmaps:!1});this.program=new r.Program(this.gl,{vertex:a.default,fragment:u.default,uniforms:{tMap:{value:e},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_alpha:{value:0},u_offset:{value:0},u_scroll:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}}}),t.crossOrigin="anonymous",t.src=this.element.getAttribute("data-src"),t.onload=()=>{this.program.uniforms.u_imageSize.value=[t.naturalWidth,t.naturalHeight],e.image=t},this.plane=new o.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.plane.setParent(this.scene)}createTitle(t){this.title=new c.default({renderer:t,gl:this.gl,plane:this.plane,text:this.text,viewport:this.viewport}),console.log(this.title)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.wrap=document.querySelector(".home__gallery__wrapper"),this.wrap_bounds=this.wrap.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y],this.full_width=this.wrap_bounds.width/this.screen.width*this.viewport.width}show(){i.default.fromTo(this.program.uniforms.u_alpha,{value:0,duration:1},{value:1,duration:1})}hide(){i.default.to(this.program.uniforms.u_alpha,{value:0,duration:1})}onResize(t){if(this.new_pos=0,t){const{screen:e,viewport:n}=t;e&&(this.screen=e),n&&(this.viewport=n,this.plane.program.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y];const t=i.default.utils.mapRange(0,this.viewport.width/2,0,-.3,Math.abs(this.plane.position.x));this.plane.scale.x+=t,this.plane.scale.y+=t}updateX(t=0){this.x=(this.bounds.left-t)/this.screen.width;const e=this.plane.position.x-this.x/100;this.plane.program.uniforms.u_offset.value=i.default.utils.mapRange(-4,4,-.35,.35,e),this.plane.position.x=this.viewport.width/2-this.plane.scale.x/2-this.x*this.viewport.width+this.new_pos}updateY(){this.y=this.bounds.top/this.screen.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y*this.viewport.height,this.plane.position.y+=1.25*Math.cos(this.plane.position.x/this.viewport.width*Math.PI)-1.25}update(t,e){if(this.bounds){if(this.updateScale(),this.updateX(t.current),this.updateY(),this.plane.program.uniforms.u_scroll.value=(t.current-t.last)/this.screen.width*30,this.title.program.uniforms.u_scroll.value=(t.current-t.last)/this.screen.width*30,"up"===e){this.plane.position.x+this.plane.scale.x<-this.viewport.width/2&&(this.new_pos+=this.full_width)}if("down"===e){this.plane.position.x-this.plane.scale.x>this.viewport.width/2&&(this.new_pos-=this.full_width)}}}}},"./app/components/Canvas/Home/menu/Title.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>f});var s=n("./node_modules/ogl/src/core/Texture.js"),r=n("./node_modules/ogl/src/core/Program.js"),o=n("./node_modules/ogl/src/math/Color.js"),i=n("./node_modules/ogl/src/extras/Text.js"),a=n("./node_modules/ogl/src/core/Geometry.js"),u=n("./node_modules/ogl/src/core/Mesh.js"),c=n("./fonts/forma.json"),d=n("./fonts/forma.png"),l=n("./app/shaders/home/text/vertex.glsl"),h=n("./app/shaders/home/text/fragment.glsl");class f{constructor({renderer:t,gl:e,plane:n,text:s,viewport:r}){this.gl=e,this.plane=n,this.renderer=t,this.text=s,this.viewport=r,this.createShader(),this.createMesh()}createShader(){const t=new s.Texture(this.gl,{generateMipmaps:!1}),e=new Image;e.src=d.default,e.onload=()=>t.image=e;const n="\n  "+l.default,i="#extension GL_OES_standard_derivatives : enable\n      precision highp float;\n  "+h.default,a="#version 300 es\n      #define attribute in\n      #define varying out\n  "+l.default,u="#version 300 es\n      precision highp float;\n      #define varying in\n      #define texture2D texture\n      #define gl_FragColor FragColor\n      out vec4 FragColor;\n  "+h.default;let c=i,f=n;this.renderer.isWebgl2&&(c=u,f=a),this.program=new r.Program(this.gl,{cullFace:null,depthTest:!1,depthWrite:!1,transparent:!0,fragment:c,vertex:f,uniforms:{u_color:{value:new o.Color("#EEF1EF")},u_scroll:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]},tMap:{value:t}}})}createMesh(){const t=new i.Text({align:"center",font:c,letterSpacing:-.05,size:.1,text:this.text.innerHTML,wordSpacing:0}),e=new a.Geometry(this.gl,{position:{size:3,data:t.buffers.position},uv:{size:2,data:t.buffers.uv},id:{size:1,data:t.buffers.id},index:{data:t.buffers.index}});e.computeBoundingBox(),this.mesh=new u.Mesh(this.gl,{geometry:e,program:this.program}),this.mesh.position.x=.5*-this.plane.scale.x-.15,this.mesh.rotation.z=.5*Math.PI,this.mesh.setParent(this.plane)}}},"./app/components/Canvas/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var s=n("./node_modules/ogl/src/core/Renderer.js"),r=n("./node_modules/ogl/src/core/Camera.js"),o=n("./node_modules/ogl/src/core/Transform.js"),i=n("./app/components/Canvas/Home/index.js"),a=n("./app/components/Canvas/Gallery/index.js"),u=n("./app/components/Canvas/About/index.js");class c{constructor({template:t}){this.template=t,this.drag={y:{start:0,distance:0,end:0},x:{start:0,distance:0,end:0}},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onChange(this.template)}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new o.Transform}createHome(){this.home=new i.default({gl:this.gl,scene:this.scene,screen:this.screen,viewport:this.viewport,renderer:this.renderer})}createGallery(){this.gallery=new a.default({gl:this.gl,scene:this.scene,screen:this.screen,viewport:this.viewport})}createAbout(){this.about=new u.default({gl:this.gl,scene:this.scene,screen:this.screen,viewport:this.viewport})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}destroyGallery(){this.gallery&&(this.gallery.destroy(),this.gallery=null)}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}onChangeStart(){this.home&&this.home.hide(),this.about&&this.about.hide(),this.gallery&&this.gallery.hide()}onChange(t){"home"===t?this.createHome():this.destroyHome(),"about"===t?this.createAbout():this.destroyAbout(),"gallery"===t?this.createGallery():this.destroyGallery()}onResize(){this.screen={width:window.innerWidth,height:window.innerHeight},this.renderer.setSize(this.screen.width,this.screen.height),this.camera.perspective({aspect:this.screen.width/this.screen.height});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,n=e*this.camera.aspect;this.viewport={width:n,height:e},this.home&&this.home.onResize({screen:this.screen,viewport:this.viewport}),this.gallery&&this.gallery.onResize({screen:this.screen,viewport:this.viewport}),this.about&&this.about.onResize({screen:this.screen,viewport:this.viewport})}onTouchDown(t){this.isDown=!0,this.drag.x.start=t.touches?t.touches[0].clientX:t.clientX,this.drag.y.start=t.touches?t.touches[0].clientY:t.clientY,this.home&&this.home.onTouchDown({y:this.drag.y,x:this.drag.x}),this.gallery&&this.gallery.onTouchDown({y:this.y}),this.about&&this.about.onTouchDown({y:this.y})}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,n=t.touches?t.touches[0].clientY:t.clientY;this.drag.y.end=n,this.drag.x.end=e,this.home&&this.home.onTouchMove({y:this.drag.y,x:this.drag.x}),this.gallery&&this.gallery.onTouchMove({y:this.y}),this.about&&this.about.onTouchMove({y:this.y})}onTouchUp(t){this.isDown=!1,this.home&&this.home.onTouchUp({y:this.drag.y,x:this.drag.x}),this.gallery&&this.gallery.onTouchUp({y:this.y}),this.about&&this.about.onTouchUp({y:this.y})}onWheel(t){this.home&&this.home.onWheel(t),this.gallery&&this.gallery.onWheel(t),this.about&&this.about.onWheel(t)}update(t){this.home&&this.home.update(),this.gallery&&this.gallery.update(),this.about&&this.about.update(t),this.renderer.render({scene:this.scene,camera:this.camera})}}},"./app/components/Navigation.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>i});var s=n("./node_modules/gsap/index.js"),r=n("./app/classes/Component.js"),o=n("./app/utils/color_variables.js");class i extends r.default{constructor({template:t}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__item__link"}}),this.onChange(t)}onChange(t){s.default.to(this.element,{opacity:1,color:"about"===t?o.COLOR_DARK_JUNGLE_GREEN:o.COLOR_CULTURED,duration:1.5})}}},"./app/components/Preloader.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>u});var s=n("./node_modules/lodash/each.js"),r=n.n(s),o=n("./node_modules/gsap/index.js"),i=n("./app/classes/Component.js"),a=n("./app/utils/text.js");class u extends i.default{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text",images:document.querySelectorAll("img")}}),(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=document.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){r()(this.elements.images,(t=>{t.onload=e=>this.onAssetLoaded(t),t.src=t.getAttribute("data-src")}))}onAssetLoaded(t){this.length+=1;const e=this.length/this.elements.images.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.animateOut=o.default.timeline({delay:2}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"},"-=1.4"),this.animateOut.to(this.element,{duration:1.5,ease:"expo.out",scaleY:0,transformOrigin:"100% 100%"},"-=1"),this.animateOut.call((t=>{this.emit("completed")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(t,e,n)=>{"use strict";n.r(e);var s=n("./node_modules/lodash/each.js"),r=n.n(s),o=n("./node_modules/normalize-wheel/index.js"),i=n.n(o),a=n("./app/components/Canvas/index.js"),u=n("./app/components/Preloader.js"),c=n("./app/components/Navigation.js"),d=n("./app/pages/home/index.js"),l=n("./app/pages/about/index.js"),h=n("./app/pages/gallery/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createNavigation(),this.createCanvas(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new u.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createNavigation(){this.navigation=new c.default({template:this.template})}createCanvas(){this.canvas=new a.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={home:new d.default,about:new l.default,gallery:new h.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}async onChange(t){this.canvas.onChangeStart(),await this.page.hide();const e=await window.fetch(t);if(200===e.status){const t=await e.text(),n=document.createElement("div");n.innerHTML=t;const s=n.querySelector(".content");this.template=s.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=s.innerHTML,this.canvas.onChange(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((()=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t)}onWheel(t){const e=i()(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(e),this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");r()(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:n}=t;this.onChange(n)}}))}}},"./app/pages/about/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./app/classes/Page.js");class r extends s.default{constructor(){super({id:"about",element:".about",elements:{wrapper:".about__wrapper",navigation:document.querySelector(".navigation"),title:".about__title"}})}}},"./app/pages/gallery/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./app/classes/Page.js");class r extends s.default{constructor(){super({id:"gallery",element:".gallery",elements:{title:".gallery__title__text"}})}}},"./app/pages/home/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./app/classes/Page.js");class r extends s.default{constructor(){super({id:"home",element:".home",elements:{}})}create(){super.create()}}},"./app/utils/color_variables.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{COLOR_BLACK_CORAL:()=>o,COLOR_CADET_BLUE_CRAYOLA:()=>r,COLOR_CULTURED:()=>s,COLOR_DARK_JUNGLE_GREEN:()=>a,COLOR_PEWTER_BLUE:()=>i});const s="#EEF1EF",r="#A9B4C2",o="#5E6572",i="#7D98A1",a="#1C2321"},"./app/utils/text.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{calculate:()=>i,split:()=>o});var s=n("./node_modules/lodash/each.js"),r=n.n(s);function o({element:t,expression:e=" ",append:n=!0}){const s=function(t,e){const n=t.split("<br>");let s=[];return r()(n,((t,n)=>{n>0&&s.push("<br>"),s=s.concat(t.split(e));let o=!1,i="";const a=[];r()(s,(t=>{o||!t.includes("<a")&&!t.includes("<strong")||(i="",o=!0),o&&(i+=` ${t}`),o&&(t.includes("/a>")||t.includes("/strong>"))&&(a.push(i),i=""),o||""!==i||a.push(t),o&&(t.includes("/a>")||t.includes("/strong>"))&&(o=!1)})),s=a})),s}(t.innerHTML.toString().trim(),e);let o="";r()(s,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");r()(e,((t,e)=>{o+=e>0?"<br>"+a(t):a(t)}))}else o+=a(t)})),t.innerHTML=o;const i=t.querySelectorAll("span");return n&&r()(i,(t=>{const e=1===t.textContent.length,n=""!==t.innerHTML.trim(),s="&"!==t.textContent,r="-"!==t.textContent;e&&n&&s&&r&&(t.innerHTML=`${t.textContent}&nbsp;`)})),i}function i(t){const e=[];let n=[],s=t[0].offsetTop;return r()(t,((r,o)=>{r.offsetTop===s&&n.push(r),r.offsetTop!==s&&(e.push(n),n=[],n.push(r),s=r.offsetTop),o+1===t.length&&e.push(n)})),e}function a(t){return""===(t=t.trim())||" "===t?t:"<br>"===t?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":t=>{"use strict";t.exports=i;var e=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},r={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},o={23:"</i>",24:"</u>",29:"</del>"};function i(t){if(!e.test(t))return t;var n=[],s=t.replace(/\033\[(\d+)m/g,(function(t,e){var s=r[e];if(s)return~n.indexOf(e)?(n.pop(),"</span>"):(n.push(e),"<"===s[0]?s:'<span style="'+s+';">');var i=o[e];return i?(n.pop(),i):""})),i=n.length;return i>0&&(s+=Array(i+1).join("</span>")),s}function a(t){for(var e in r[0]="font-weight:normal;opacity:1;color:#"+t.reset[0]+";background:#"+t.reset[1],r[7]="color:#"+t.reset[1]+";background:#"+t.reset[0],r[90]="color:#"+t.darkgrey,s){var n=t[s[e]]||"000";r[e]="color:#"+n,e=parseInt(e),r[(e+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(t){o[t]="</span>"})),i.setColors=function(t){if("object"!=typeof t)throw new Error("`colors` parameter must be an Object.");var e={};for(var s in n){var r=t.hasOwnProperty(s)?t[s]:null;if(r){if("reset"===s){if("string"==typeof r&&(r=[r]),!Array.isArray(r)||0===r.length||r.some((function(t){return"string"!=typeof t})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var o=n[s];r[0]||(r[0]=o[0]),1!==r.length&&r[1]||(r=[r[0]]).push(o[1]),r=r.slice(0,2)}else if("string"!=typeof r)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");e[s]=r}else e[s]=n[s]}a(e)},i.reset=function(){a(n)},i.tags={},Object.defineProperty?(Object.defineProperty(i.tags,"open",{get:function(){return r}}),Object.defineProperty(i.tags,"close",{get:function(){return o}})):(i.tags.open=r,i.tags.close=o),i.reset()},"./node_modules/events/events.js":t=>{"use strict";var e,n="object"==typeof Reflect?Reflect:null,s=n&&"function"==typeof n.apply?n.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};e=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var r=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(t,e){return new Promise((function(n,s){function r(n){t.removeListener(e,o),s(n)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",r),n([].slice.call(arguments))}p(t,e,o,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&p(t,"error",e,n)}(t,r,{once:!0})}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var i=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function c(t,e,n,s){var r,o,i,c;if(a(n),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),i=o[e]),void 0===i)i=o[e]=n,++t._eventsCount;else if("function"==typeof i?i=o[e]=s?[n,i]:[i,n]:s?i.unshift(n):i.push(n),(r=u(t))>0&&i.length>r&&!i.warned){i.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=t,d.type=e,d.count=i.length,c=d,console&&console.warn&&console.warn(c)}return t}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(t,e,n){var s={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},r=d.bind(s);return r.listener=n,s.wrapFn=r,r}function h(t,e,n){var s=t._events;if(void 0===s)return[];var r=s[e];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(r):m(r,r.length)}function f(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(t,e){for(var n=new Array(e),s=0;s<e;++s)n[s]=t[s];return n}function p(t,e,n,s){if("function"==typeof t.on)s.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function r(o){s.once&&t.removeEventListener(e,r),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return i},set:function(t){if("number"!=typeof t||t<0||r(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");i=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||r(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var i;if(e.length>0&&(i=e[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)s(u,this,e);else{var c=u.length,d=m(u,c);for(n=0;n<c;++n)s(d[n],this,e)}return!0},o.prototype.addListener=function(t,e){return c(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return c(this,t,e,!0)},o.prototype.once=function(t,e){return a(e),this.on(t,l(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,l(this,t,e)),this},o.prototype.removeListener=function(t,e){var n,s,r,o,i;if(a(e),void 0===(s=this._events))return this;if(void 0===(n=s[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete s[t],s.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){i=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,r),1===n.length&&(s[t]=n[0]),void 0!==s.removeListener&&this.emit("removeListener",t,i||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,n,s;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var r,o=Object.keys(n);for(s=0;s<o.length;++s)"removeListener"!==(r=o[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(s=e.length-1;s>=0;s--)this.removeListener(t,e[s]);return this},o.prototype.listeners=function(t){return h(this,t,!0)},o.prototype.rawListeners=function(t){return h(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{CSSPlugin:()=>Et,_createElement:()=>z,_getBBox:()=>G,checkPrefix:()=>N,default:()=>Et});var s,r,o,i,a,u,c,d,l=n("./node_modules/gsap/gsap-core.js"),h={},f=180/Math.PI,m=Math.PI/180,p=Math.atan2,g=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,_=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},x=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},w=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},j=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},E=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},A=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},T=function(t,e,n){return t.style[e]=n},S=function(t,e,n){return t.style.setProperty(e,n)},M=function(t,e,n){return t._gsap[e]=n},C=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},k=function(t,e,n,s,r){var o=t._gsap;o.scaleX=o.scaleY=n,o.renderTransform(r,o)},O=function(t,e,n,s,r){var o=t._gsap;o[e]=n,o.renderTransform(r,o)},q="transform",L=q+"Origin",D=function(t,e){var n=this,s=this.target,r=s.style;if(t in h){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=y[t]||t).indexOf(",")?t.split(",").forEach((function(t){return n.tfm[t]=Q(s,t)})):this.tfm[t]=s._gsap.x?s._gsap[t]:Q(s,t)),this.props.indexOf(q)>=0)return;s._gsap.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(L,e,"")),t=q}(r||e)&&this.props.push(t,e,r[t])},R=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},P=function(){var t,e,n=this.props,s=this.target,r=s.style,o=s._gsap;for(t=0;t<n.length;t+=3)n[t+1]?s[n[t]]=n[t+2]:n[t+2]?r[n[t]]=n[t+2]:r.removeProperty(n[t].replace(g,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)o[e]=this.tfm[e];o.svg&&(o.renderTransform(),s.setAttribute("data-svg-origin",this.svgo||"")),!(t=c())||t.isStart||r[q]||(R(r),o.uncache=1)}},F=function(t,e){var n={target:t,props:[],revert:P,save:D};return e&&e.split(",").forEach((function(t){return n.save(t)})),n},z=function(t,e){var n=r.createElementNS?r.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):r.createElement(t);return n.style?n:r.createElement(t)},I=function t(e,n,s){var r=getComputedStyle(e);return r[n]||r.getPropertyValue(n.replace(g,"-$1").toLowerCase())||r.getPropertyValue(n)||!s&&t(e,N(n)||n,1)||""},U="O,Moz,ms,Ms,Webkit".split(","),N=function(t,e,n){var s=(e||a).style,r=5;if(t in s&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);r--&&!(U[r]+t in s););return r<0?null:(3===r?"ms":r>=0?U[r]:"")+t},B=function(){"undefined"!=typeof window&&window.document&&(s=window,r=s.document,o=r.documentElement,a=z("div")||{style:{}},z("div"),q=N(q),L=q+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",d=!!N("perspective"),c=l.gsap.core.reverting,i=1)},V=function t(e){var n,s=z("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,i=this.nextSibling,a=this.style.cssText;if(o.appendChild(s),s.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return r&&(i?r.insertBefore(this,i):r.appendChild(this)),o.removeChild(s),this.style.cssText=a,n},H=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},G=function(t){var e;try{e=t.getBBox()}catch(n){e=V.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===V||(e=V.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+H(t,["x","cx","x1"])||0,y:+H(t,["y","cy","y1"])||0,width:0,height:0}},Y=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!G(t))},W=function(t,e){if(e){var n=t.style;e in h&&e!==L&&(e=q),n.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty(e.replace(g,"-$1").toLowerCase())):n.removeAttribute(e)}},X=function(t,e,n,s,r,o){var i=new l.PropTween(t._pt,e,n,0,1,o?A:E);return t._pt=i,i.b=s,i.e=r,t._props.push(n),i},Z={deg:1,rad:1,turn:1},K={grid:1,flex:1},$=function t(e,n,s,o){var i,u,c,d,f=parseFloat(s)||0,m=(s+"").trim().substr((f+"").length)||"px",p=a.style,g=v.test(n),_="svg"===e.tagName.toLowerCase(),y=(_?"client":"offset")+(g?"Width":"Height"),b=100,x="px"===o,w="%"===o;return o===m||!f||Z[o]||Z[m]?f:("px"!==m&&!x&&(f=t(e,n,s,"px")),d=e.getCTM&&Y(e),!w&&"%"!==m||!h[n]&&!~n.indexOf("adius")?(p[g?"width":"height"]=b+(x?m:o),u=~n.indexOf("adius")||"em"===o&&e.appendChild&&!_?e:e.parentNode,d&&(u=(e.ownerSVGElement||{}).parentNode),u&&u!==r&&u.appendChild||(u=r.body),(c=u._gsap)&&w&&c.width&&g&&c.time===l._ticker.time&&!c.uncache?(0,l._round)(f/c.width*b):((w||"%"===m)&&!K[I(u,"display")]&&(p.position=I(e,"position")),u===e&&(p.position="static"),u.appendChild(a),i=a[y],u.removeChild(a),p.position="absolute",g&&w&&((c=(0,l._getCache)(u)).time=l._ticker.time,c.width=u[y]),(0,l._round)(x?i*f/b:i&&f?b/i*f:0))):(i=d?e.getBBox()[g?"width":"height"]:e[y],(0,l._round)(w?f/i*b:f/100*i)))},Q=function(t,e,n,s){var r;return i||B(),e in y&&"transform"!==e&&~(e=y[e]).indexOf(",")&&(e=e.split(",")[0]),h[e]&&"transform"!==e?(r=ct(t,s),r="transformOrigin"!==e?r[e]:r.svg?r.origin:dt(I(t,L))+" "+r.zOrigin+"px"):(!(r=t.style[e])||"auto"===r||s||~(r+"").indexOf("calc("))&&(r=nt[e]&&nt[e](t,e,n)||I(t,e)||(0,l._getProperty)(t,e)||("opacity"===e?1:0)),n&&!~(r+"").trim().indexOf(" ")?$(t,e,r,n)+n:r},J=function(t,e,n,s){if(!n||"none"===n){var r=N(e,t,1),o=r&&I(t,r,1);o&&o!==n?(e=r,n=o):"borderColor"===e&&(n=I(t,"borderTopColor"))}var i,a,u,c,d,h,f,m,p,g,v,_=new l.PropTween(this._pt,t.style,e,0,1,l._renderComplexString),y=0,b=0;if(_.b=n,_.e=s,n+="","auto"===(s+="")&&(t.style[e]=s,s=I(t,e)||s,t.style[e]=n),i=[n,s],(0,l._colorStringFilter)(i),s=i[1],u=(n=i[0]).match(l._numWithUnitExp)||[],(s.match(l._numWithUnitExp)||[]).length){for(;a=l._numWithUnitExp.exec(s);)f=a[0],p=s.substring(y,a.index),d?d=(d+1)%5:"rgba("!==p.substr(-5)&&"hsla("!==p.substr(-5)||(d=1),f!==(h=u[b++]||"")&&(c=parseFloat(h)||0,v=h.substr((c+"").length),"="===f.charAt(1)&&(f=(0,l._parseRelative)(c,f)+v),m=parseFloat(f),g=f.substr((m+"").length),y=l._numWithUnitExp.lastIndex-g.length,g||(g=g||l._config.units[e]||v,y===s.length&&(s+=g,_.e+=g)),v!==g&&(c=$(t,e,h,g)||0),_._pt={_next:_._pt,p:p||1===b?p:",",s:c,c:m-c,m:d&&d<4||"zIndex"===e?Math.round:0});_.c=y<s.length?s.substring(y,s.length):""}else _.r="display"===e&&"none"===s?A:E;return l._relExp.test(s)&&(_.e=0),this._pt=_,_},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,s,r,o=e.t,i=o.style,a=e.u,u=o._gsap;if("all"===a||!0===a)i.cssText="",s=1;else for(r=(a=a.split(",")).length;--r>-1;)n=a[r],h[n]&&(s=1,n="transformOrigin"===n?L:q),W(o,n);s&&(W(o,q),u&&(u.svg&&o.removeAttribute("transform"),ct(o,1),u.uncache=1,R(i)))}},nt={clearProps:function(t,e,n,s,r){if("isFromStart"!==r.data){var o=t._pt=new l.PropTween(t._pt,e,n,0,0,et);return o.u=s,o.pr=-10,o.tween=r,t._props.push(n),1}}},st=[1,0,0,1,0,0],rt={},ot=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},it=function(t){var e=I(t,q);return ot(e)?st:e.substr(7).match(l._numExp).map(l._round)},at=function(t,e){var n,s,r,i,a=t._gsap||(0,l._getCache)(t),u=t.style,c=it(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(r=t.transform.baseVal.consolidate().matrix).a,r.b,r.c,r.d,r.e,r.f]).join(",")?st:c:(c!==st||t.offsetParent||t===o||a.svg||(r=u.display,u.display="block",(n=t.parentNode)&&t.offsetParent||(i=1,s=t.nextElementSibling,o.appendChild(t)),c=it(t),r?u.display=r:W(t,"display"),i&&(s?n.insertBefore(t,s):n?n.appendChild(t):o.removeChild(t))),e&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},ut=function(t,e,n,s,r,o){var i,a,u,c=t._gsap,d=r||at(t,!0),l=c.xOrigin||0,h=c.yOrigin||0,f=c.xOffset||0,m=c.yOffset||0,p=d[0],g=d[1],v=d[2],_=d[3],y=d[4],b=d[5],x=e.split(" "),w=parseFloat(x[0])||0,j=parseFloat(x[1])||0;n?d!==st&&(a=p*_-g*v)&&(u=w*(-g/a)+j*(p/a)-(p*b-g*y)/a,w=w*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=u):(w=(i=G(t)).x+(~x[0].indexOf("%")?w/100*i.width:w),j=i.y+(~(x[1]||x[0]).indexOf("%")?j/100*i.height:j)),s||!1!==s&&c.smooth?(y=w-l,b=j-h,c.xOffset=f+(y*p+b*v)-y,c.yOffset=m+(y*g+b*_)-b):c.xOffset=c.yOffset=0,c.xOrigin=w,c.yOrigin=j,c.smooth=!!s,c.origin=e,c.originIsAbsolute=!!n,t.style[L]="0px 0px",o&&(X(o,c,"xOrigin",l,w),X(o,c,"yOrigin",h,j),X(o,c,"xOffset",f,c.xOffset),X(o,c,"yOffset",m,c.yOffset)),t.setAttribute("data-svg-origin",w+" "+j)},ct=function(t,e){var n=t._gsap||new l.GSCache(t);if("x"in n&&!e&&!n.uncache)return n;var s,r,o,i,a,u,c,h,g,v,_,y,b,x,w,j,E,A,T,S,M,C,k,O,D,R,P,F,z,U,N,B,V=t.style,H=n.scaleX<0,G="px",W="deg",X=getComputedStyle(t),Z=I(t,L)||"0";return s=r=o=u=c=h=g=v=_=0,i=a=1,n.svg=!(!t.getCTM||!Y(t)),X.translate&&("none"===X.translate&&"none"===X.scale&&"none"===X.rotate||(V[q]=("none"!==X.translate?"translate3d("+(X.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==X.rotate?"rotate("+X.rotate+") ":"")+("none"!==X.scale?"scale("+X.scale.split(" ").join(",")+") ":"")+("none"!==X[q]?X[q]:"")),V.scale=V.rotate=V.translate="none"),x=at(t,n.svg),n.svg&&(n.uncache?(D=t.getBBox(),Z=n.xOrigin-D.x+"px "+(n.yOrigin-D.y)+"px",O=""):O=!e&&t.getAttribute("data-svg-origin"),ut(t,O||Z,!!O||n.originIsAbsolute,!1!==n.smooth,x)),y=n.xOrigin||0,b=n.yOrigin||0,x!==st&&(A=x[0],T=x[1],S=x[2],M=x[3],s=C=x[4],r=k=x[5],6===x.length?(i=Math.sqrt(A*A+T*T),a=Math.sqrt(M*M+S*S),u=A||T?p(T,A)*f:0,(g=S||M?p(S,M)*f+u:0)&&(a*=Math.abs(Math.cos(g*m))),n.svg&&(s-=y-(y*A+b*S),r-=b-(y*T+b*M))):(B=x[6],U=x[7],P=x[8],F=x[9],z=x[10],N=x[11],s=x[12],r=x[13],o=x[14],c=(w=p(B,z))*f,w&&(O=C*(j=Math.cos(-w))+P*(E=Math.sin(-w)),D=k*j+F*E,R=B*j+z*E,P=C*-E+P*j,F=k*-E+F*j,z=B*-E+z*j,N=U*-E+N*j,C=O,k=D,B=R),h=(w=p(-S,z))*f,w&&(j=Math.cos(-w),N=M*(E=Math.sin(-w))+N*j,A=O=A*j-P*E,T=D=T*j-F*E,S=R=S*j-z*E),u=(w=p(T,A))*f,w&&(O=A*(j=Math.cos(w))+T*(E=Math.sin(w)),D=C*j+k*E,T=T*j-A*E,k=k*j-C*E,A=O,C=D),c&&Math.abs(c)+Math.abs(u)>359.9&&(c=u=0,h=180-h),i=(0,l._round)(Math.sqrt(A*A+T*T+S*S)),a=(0,l._round)(Math.sqrt(k*k+B*B)),w=p(C,k),g=Math.abs(w)>2e-4?w*f:0,_=N?1/(N<0?-N:N):0),n.svg&&(O=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!ot(I(t,q)),O&&t.setAttribute("transform",O))),Math.abs(g)>90&&Math.abs(g)<270&&(H?(i*=-1,g+=u<=0?180:-180,u+=u<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),e=e||n.uncache,n.x=s-((n.xPercent=s&&(!e&&n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-s)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+G,n.y=r-((n.yPercent=r&&(!e&&n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-r)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+G,n.z=o+G,n.scaleX=(0,l._round)(i),n.scaleY=(0,l._round)(a),n.rotation=(0,l._round)(u)+W,n.rotationX=(0,l._round)(c)+W,n.rotationY=(0,l._round)(h)+W,n.skewX=g+W,n.skewY=v+W,n.transformPerspective=_+G,(n.zOrigin=parseFloat(Z.split(" ")[2])||0)&&(V[L]=dt(Z)),n.xOffset=n.yOffset=0,n.force3D=l._config.force3D,n.renderTransform=n.svg?vt:d?gt:ht,n.uncache=0,n},dt=function(t){return(t=t.split(" "))[0]+" "+t[1]},lt=function(t,e,n){var s=(0,l.getUnit)(e);return(0,l._round)(parseFloat(e)+parseFloat($(t,"x",n+"px",s)))+s},ht=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,gt(t,e)},ft="0deg",mt="0px",pt=") ",gt=function(t,e){var n=e||this,s=n.xPercent,r=n.yPercent,o=n.x,i=n.y,a=n.z,u=n.rotation,c=n.rotationY,d=n.rotationX,l=n.skewX,h=n.skewY,f=n.scaleX,p=n.scaleY,g=n.transformPerspective,v=n.force3D,_=n.target,y=n.zOrigin,b="",x="auto"===v&&t&&1!==t||!0===v;if(y&&(d!==ft||c!==ft)){var w,j=parseFloat(c)*m,E=Math.sin(j),A=Math.cos(j);j=parseFloat(d)*m,w=Math.cos(j),o=lt(_,o,E*w*-y),i=lt(_,i,-Math.sin(j)*-y),a=lt(_,a,A*w*-y+y)}g!==mt&&(b+="perspective("+g+pt),(s||r)&&(b+="translate("+s+"%, "+r+"%) "),(x||o!==mt||i!==mt||a!==mt)&&(b+=a!==mt||x?"translate3d("+o+", "+i+", "+a+") ":"translate("+o+", "+i+pt),u!==ft&&(b+="rotate("+u+pt),c!==ft&&(b+="rotateY("+c+pt),d!==ft&&(b+="rotateX("+d+pt),l===ft&&h===ft||(b+="skew("+l+", "+h+pt),1===f&&1===p||(b+="scale("+f+", "+p+pt),_.style[q]=b||"translate(0, 0)"},vt=function(t,e){var n,s,r,o,i,a=e||this,u=a.xPercent,c=a.yPercent,d=a.x,h=a.y,f=a.rotation,p=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,x=a.yOrigin,w=a.xOffset,j=a.yOffset,E=a.forceCSS,A=parseFloat(d),T=parseFloat(h);f=parseFloat(f),p=parseFloat(p),(g=parseFloat(g))&&(p+=g=parseFloat(g),f+=g),f||p?(f*=m,p*=m,n=Math.cos(f)*v,s=Math.sin(f)*v,r=Math.sin(f-p)*-_,o=Math.cos(f-p)*_,p&&(g*=m,i=Math.tan(p-g),r*=i=Math.sqrt(1+i*i),o*=i,g&&(i=Math.tan(g),n*=i=Math.sqrt(1+i*i),s*=i)),n=(0,l._round)(n),s=(0,l._round)(s),r=(0,l._round)(r),o=(0,l._round)(o)):(n=v,o=_,s=r=0),(A&&!~(d+"").indexOf("px")||T&&!~(h+"").indexOf("px"))&&(A=$(y,"x",d,"px"),T=$(y,"y",h,"px")),(b||x||w||j)&&(A=(0,l._round)(A+b-(b*n+x*r)+w),T=(0,l._round)(T+x-(b*s+x*o)+j)),(u||c)&&(i=y.getBBox(),A=(0,l._round)(A+u/100*i.width),T=(0,l._round)(T+c/100*i.height)),i="matrix("+n+","+s+","+r+","+o+","+A+","+T+")",y.setAttribute("transform",i),E&&(y.style[q]=i)},_t=function(t,e,n,s,r){var o,i,a=360,u=(0,l._isString)(r),c=parseFloat(r)*(u&&~r.indexOf("rad")?f:1)-s,d=s+c+"deg";return u&&("short"===(o=r.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===o&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===o&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=i=new l.PropTween(t._pt,e,n,s,c,x),i.e=d,i.u="deg",t._props.push(n),i},yt=function(t,e){for(var n in e)t[n]=e[n];return t},bt=function(t,e,n){var s,r,o,i,a,u,c,d=yt({},n._gsap),f=n.style;for(r in d.svg?(o=n.getAttribute("transform"),n.setAttribute("transform",""),f[q]=e,s=ct(n,1),W(n,q),n.setAttribute("transform",o)):(o=getComputedStyle(n)[q],f[q]=e,s=ct(n,1),f[q]=o),h)(o=d[r])!==(i=s[r])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(r)<0&&(a=(0,l.getUnit)(o)!==(c=(0,l.getUnit)(i))?$(n,r,o,c):parseFloat(o),u=parseFloat(i),t._pt=new l.PropTween(t._pt,s,r,a,u-a,b),t._pt.u=c||0,t._props.push(r));yt(s,d)};(0,l._forEachName)("padding,margin,Width,Radius",(function(t,e){var n="Top",s="Right",r="Bottom",o="Left",i=(e<3?[n,s,r,o]:[n+o,n+s,r+s,r+o]).map((function(n){return e<2?t+n:"border"+n+t}));nt[e>1?"border"+t:t]=function(t,e,n,s,r){var o,a;if(arguments.length<4)return o=i.map((function(e){return Q(t,e,n)})),5===(a=o.join(" ")).split(o[0]).length?o[0]:a;o=(s+"").split(" "),a={},i.forEach((function(t,e){return a[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,a,r)}}));var xt,wt,jt,Et={name:"css",register:B,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,s,r){var o,a,u,c,d,f,m,p,g,v,x,E,A,T,S,M,C,k,O,D,R=this._props,P=t.style,z=n.vars.startAt;for(m in i||B(),this.styles=this.styles||F(t),M=this.styles.props,this.tween=n,e)if("autoRound"!==m&&(a=e[m],!l._plugins[m]||!(0,l._checkPlugin)(m,e,n,s,t,r)))if(d=typeof a,f=nt[m],"function"===d&&(d=typeof(a=a.call(n,s,t,r))),"string"===d&&~a.indexOf("random(")&&(a=(0,l._replaceRandom)(a)),f)f(this,t,m,a,n)&&(S=1);else if("--"===m.substr(0,2))o=(getComputedStyle(t).getPropertyValue(m)+"").trim(),a+="",l._colorExp.lastIndex=0,l._colorExp.test(o)||(p=(0,l.getUnit)(o),g=(0,l.getUnit)(a)),g?p!==g&&(o=$(t,m,o,g)+g):p&&(a+=p),this.add(P,"setProperty",o,a,s,r,0,0,m),R.push(m),M.push(m,0,P[m]);else if("undefined"!==d){if(z&&m in z?(o="function"==typeof z[m]?z[m].call(n,s,t,r):z[m],(0,l._isString)(o)&&~o.indexOf("random(")&&(o=(0,l._replaceRandom)(o)),(0,l.getUnit)(o+"")||(o+=l._config.units[m]||(0,l.getUnit)(Q(t,m))||""),"="===(o+"").charAt(1)&&(o=Q(t,m))):o=Q(t,m),c=parseFloat(o),(v="string"===d&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),u=parseFloat(a),m in y&&("autoAlpha"===m&&(1===c&&"hidden"===Q(t,"visibility")&&u&&(c=0),M.push("visibility",0,P.visibility),X(this,P,"visibility",c?"inherit":"hidden",u?"inherit":"hidden",!u)),"scale"!==m&&"transform"!==m&&~(m=y[m]).indexOf(",")&&(m=m.split(",")[0])),x=m in h)if(this.styles.save(m),E||((A=t._gsap).renderTransform&&!e.parseTransform||ct(t,e.parseTransform),T=!1!==e.smoothOrigin&&A.smooth,(E=this._pt=new l.PropTween(this._pt,P,q,0,1,A.renderTransform,A,0,-1)).dep=1),"scale"===m)this._pt=new l.PropTween(this._pt,A,"scaleY",A.scaleY,(v?(0,l._parseRelative)(A.scaleY,v+u):u)-A.scaleY||0,b),this._pt.u=0,R.push("scaleY",m),m+="X";else{if("transformOrigin"===m){M.push(L,0,P[L]),k=void 0,O=void 0,D=void 0,k=(C=a).split(" "),O=k[0],D=k[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==D&&"right"!==D||(C=O,O=D,D=C),k[0]=tt[O]||O,k[1]=tt[D]||D,a=k.join(" "),A.svg?ut(t,a,0,T,0,this):((g=parseFloat(a.split(" ")[2])||0)!==A.zOrigin&&X(this,A,"zOrigin",A.zOrigin,g),X(this,P,m,dt(o),dt(a)));continue}if("svgOrigin"===m){ut(t,a,1,T,0,this);continue}if(m in rt){_t(this,A,m,c,v?(0,l._parseRelative)(c,v+a):a);continue}if("smoothOrigin"===m){X(this,A,"smooth",A.smooth,a);continue}if("force3D"===m){A[m]=a;continue}if("transform"===m){bt(this,a,t);continue}}else m in P||(m=N(m)||m);if(x||(u||0===u)&&(c||0===c)&&!_.test(a)&&m in P)u||(u=0),(p=(o+"").substr((c+"").length))!==(g=(0,l.getUnit)(a)||(m in l._config.units?l._config.units[m]:p))&&(c=$(t,m,o,g)),this._pt=new l.PropTween(this._pt,x?A:P,m,c,(v?(0,l._parseRelative)(c,v+u):u)-c,x||"px"!==g&&"zIndex"!==m||!1===e.autoRound?b:j),this._pt.u=g||0,p!==g&&"%"!==g&&(this._pt.b=o,this._pt.r=w);else if(m in P)J.call(this,t,m,o,v?v+a:a);else if(m in t)this.add(t,m,o||t[m],v?v+a:a,s,r);else if("parseTransform"!==m){(0,l._missingPlugin)(m,a);continue}x||(m in P?M.push(m,0,P[m]):M.push(m,1,o||t[m])),R.push(m)}S&&(0,l._sortPropTweensByPriority)(this)},render:function(t,e){if(e.tween._time||!c())for(var n=e._pt;n;)n.r(t,n.d),n=n._next;else e.styles.revert()},get:Q,aliases:y,getSetter:function(t,e,n){var s=y[e];return s&&s.indexOf(",")<0&&(e=s),e in h&&e!==L&&(t._gsap.x||Q(t,"x"))?n&&u===n?"scale"===e?C:M:(u=n||{})&&("scale"===e?k:O):t.style&&!(0,l._isUndefined)(t.style[e])?T:~e.indexOf("-")?S:(0,l._getSetter)(t,e)},core:{_removeProperty:W,_getMatrix:at}};l.gsap.utils.checkPrefix=N,l.gsap.core.getStyleSaver=F,xt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",wt="rotation,rotationX,rotationY,skewX,skewY",jt=(0,l._forEachName)(xt+","+wt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){h[t]=1})),(0,l._forEachName)(wt,(function(t){l._config.units[t]="deg",rt[t]=1})),y[jt[13]]=xt+","+wt,(0,l._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");y[e[1]]=jt[e[0]]})),(0,l._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){l._config.units[t]="px"})),l.gsap.registerPlugin(Et)},"./node_modules/gsap/gsap-core.js":(t,e,n)=>{"use strict";function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.r(e),n.d(e,{Animation:()=>We,Back:()=>Gn,Bounce:()=>Wn,Circ:()=>Kn,Cubic:()=>Un,Elastic:()=>Hn,Expo:()=>Zn,GSCache:()=>Ye,Linear:()=>zn,Power0:()=>Ln,Power1:()=>Dn,Power2:()=>Rn,Power3:()=>Pn,Power4:()=>Fn,PropTween:()=>bn,Quad:()=>In,Quart:()=>Nn,Quint:()=>Bn,Sine:()=>Xn,SteppedEase:()=>Yn,Strong:()=>Vn,Timeline:()=>Xe,TimelineLite:()=>Xe,TimelineMax:()=>Xe,Tween:()=>on,TweenLite:()=>on,TweenMax:()=>on,_checkPlugin:()=>Je,_colorExp:()=>ke,_colorStringFilter:()=>qe,_config:()=>b,_forEachName:()=>mt,_getCache:()=>ht,_getProperty:()=>ft,_getSetter:()=>ln,_isString:()=>k,_isUndefined:()=>L,_missingPlugin:()=>K,_numExp:()=>N,_numWithUnitExp:()=>B,_parseRelative:()=>vt,_plugins:()=>it,_relExp:()=>H,_removeLinkedListItem:()=>Ct,_renderComplexString:()=>mn,_replaceRandom:()=>ve,_round:()=>pt,_roundModifier:()=>ue,_setDefaults:()=>jt,_sortPropTweensByPriority:()=>yn,_ticker:()=>Le,clamp:()=>te,default:()=>qn,distribute:()=>ae,getUnit:()=>Jt,gsap:()=>qn,interpolate:()=>ye,mapRange:()=>_e,normalize:()=>fe,pipe:()=>le,random:()=>de,selector:()=>oe,shuffle:()=>ie,snap:()=>ce,splitColor:()=>Se,toArray:()=>re,unitize:()=>he,wrap:()=>pe,wrapYoyo:()=>ge});var o,i,a,u,c,d,l,h,f,m,p,g,v,_,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},x={duration:.5,overwrite:!1,delay:0},w=1e8,j=1e-8,E=2*Math.PI,A=E/4,T=0,S=Math.sqrt,M=Math.cos,C=Math.sin,k=function(t){return"string"==typeof t},O=function(t){return"function"==typeof t},q=function(t){return"number"==typeof t},L=function(t){return void 0===t},D=function(t){return"object"==typeof t},R=function(t){return!1!==t},P=function(){return"undefined"!=typeof window},F=function(t){return O(t)||k(t)},z="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},I=Array.isArray,U=/(?:-?\.?\d|\.)+/gi,N=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,B=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,V=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,H=/[+-]=-?[.\d]+/,G=/[^,'"\[\]\s]+/gi,Y=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,W={},X={},Z=function(t){return(X=Et(t,W))&&qn},K=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},$=function(t,e){return!e&&console.warn(t)},Q=function(t,e){return t&&(W[t]=e)&&X&&(X[t]=e)||W},J=function(){return 0},tt={suppressEvents:!0,isStart:!0,kill:!1},et={suppressEvents:!0,kill:!1},nt={suppressEvents:!0},st={},rt=[],ot={},it={},at={},ut=30,ct=[],dt="",lt=function(t){var e,n,s=t[0];if(D(s)||O(s)||(t=[t]),!(e=(s._gsap||{}).harness)){for(n=ct.length;n--&&!ct[n].targetTest(s););e=ct[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new Ye(t[n],e)))||t.splice(n,1);return t},ht=function(t){return t._gsap||lt(re(t))[0]._gsap},ft=function(t,e,n){return(n=t[e])&&O(n)?t[e]():L(n)&&t.getAttribute&&t.getAttribute(e)||n},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},pt=function(t){return Math.round(1e5*t)/1e5||0},gt=function(t){return Math.round(1e7*t)/1e7||0},vt=function(t,e){var n=e.charAt(0),s=parseFloat(e.substr(2));return t=parseFloat(t),"+"===n?t+s:"-"===n?t-s:"*"===n?t*s:t/s},_t=function(t,e){for(var n=e.length,s=0;t.indexOf(e[s])<0&&++s<n;);return s<n},yt=function(){var t,e,n=rt.length,s=rt.slice(0);for(ot={},rt.length=0,t=0;t<n;t++)(e=s[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},bt=function(t,e,n,s){rt.length&&!i&&yt(),t.render(e,n,s||i&&e<0&&(t._initted||t._startAt)),rt.length&&!i&&yt()},xt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(G).length<2?e:k(t)?t.trim():t},wt=function(t){return t},jt=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},Et=function(t,e){for(var n in e)t[n]=e[n];return t},At=function t(e,n){for(var s in n)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(e[s]=D(n[s])?t(e[s]||(e[s]={}),n[s]):n[s]);return e},Tt=function(t,e){var n,s={};for(n in t)n in e||(s[n]=t[n]);return s},St=function(t){var e,n=t.parent||u,s=t.keyframes?(e=I(t.keyframes),function(t,n){for(var s in n)s in t||"duration"===s&&e||"ease"===s||(t[s]=n[s])}):jt;if(R(t.inherit))for(;n;)s(t,n.vars.defaults),n=n.parent||n._dp;return t},Mt=function(t,e,n,s,r){void 0===n&&(n="_first"),void 0===s&&(s="_last");var o,i=t[s];if(r)for(o=e[r];i&&i[r]>o;)i=i._prev;return i?(e._next=i._next,i._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[s]=e,e._prev=i,e.parent=e._dp=t,e},Ct=function(t,e,n,s){void 0===n&&(n="_first"),void 0===s&&(s="_last");var r=e._prev,o=e._next;r?r._next=o:t[n]===e&&(t[n]=o),o?o._prev=r:t[s]===e&&(t[s]=r),e._next=e._prev=e.parent=null},kt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Ot=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},qt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Lt=function(t,e,n,s){return t._startAt&&(i?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,s))},Dt=function t(e){return!e||e._ts&&t(e.parent)},Rt=function(t){return t._repeat?Pt(t._tTime,t=t.duration()+t._rDelay)*t:0},Pt=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},Ft=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},zt=function(t){return t._end=gt(t._start+(t._tDur/Math.abs(t._ts||t._rts||j)||0))},It=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=gt(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),zt(t),n._dirty||Ot(n,t)),t},Ut=function(t,e){var n;if((e._time||e._initted&&!e._dur)&&(n=Ft(t.rawTime(),e),(!e._dur||Qt(0,e.totalDuration(),n)-e._tTime>j)&&e.render(n,!0)),Ot(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},Nt=function(t,e,n,s){return e.parent&&kt(e),e._start=gt((q(n)?n:n||t!==u?Zt(t,n,e):t._time)+e._delay),e._end=gt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Mt(t,e,"_first","_last",t._sort?"_start":0),Gt(e)||(t._recent=e),s||Ut(t,e),t._ts<0&&It(t,t._tTime),t},Bt=function(t,e){return(W.ScrollTrigger||K("scrollTrigger",e))&&W.ScrollTrigger.create(e,t)},Vt=function(t,e,n,s,r){return tn(t,e,r),t._initted?!n&&t._pt&&!i&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&f!==Le.frame?(rt.push(t),t._lazy=[r,s],1):void 0:1},Ht=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},Gt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Yt=function(t,e,n,s){var r=t._repeat,o=gt(e)||0,i=t._tTime/t._tDur;return i&&!s&&(t._time*=o/t._dur),t._dur=o,t._tDur=r?r<0?1e10:gt(o*(r+1)+t._rDelay*r):o,i>0&&!s&&It(t,t._tTime=t._tDur*i),t.parent&&zt(t),n||Ot(t.parent,t),t},Wt=function(t){return t instanceof Xe?Ot(t):Yt(t,t._dur)},Xt={_start:0,endTime:J,totalDuration:J},Zt=function t(e,n,s){var r,o,i,a=e.labels,u=e._recent||Xt,c=e.duration()>=w?u.endTime(!1):e._dur;return k(n)&&(isNaN(n)||n in a)?(o=n.charAt(0),i="%"===n.substr(-1),r=n.indexOf("="),"<"===o||">"===o?(r>=0&&(n=n.replace(/=/,"")),("<"===o?u._start:u.endTime(u._repeat>=0))+(parseFloat(n.substr(1))||0)*(i?(r<0?u:s).totalDuration()/100:1)):r<0?(n in a||(a[n]=c),a[n]):(o=parseFloat(n.charAt(r-1)+n.substr(r+1)),i&&s&&(o=o/100*(I(s)?s[0]:s).totalDuration()),r>1?t(e,n.substr(0,r-1),s)+o:c+o)):null==n?c:+n},Kt=function(t,e,n){var s,r,o=q(e[1]),i=(o?2:1)+(t<2?0:1),a=e[i];if(o&&(a.duration=e[1]),a.parent=n,t){for(s=a,r=n;r&&!("immediateRender"in s);)s=r.vars.defaults||{},r=R(r.vars.inherit)&&r.parent;a.immediateRender=R(s.immediateRender),t<2?a.runBackwards=1:a.startAt=e[i-1]}return new on(e[0],a,e[i+1])},$t=function(t,e){return t||0===t?e(t):e},Qt=function(t,e,n){return n<t?t:n>e?e:n},Jt=function(t,e){return k(t)&&(e=Y.exec(t))?e[1]:""},te=function(t,e,n){return $t(n,(function(n){return Qt(t,e,n)}))},ee=[].slice,ne=function(t,e){return t&&D(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&D(t[0]))&&!t.nodeType&&t!==c},se=function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var s;return k(t)&&!e||ne(t,1)?(s=n).push.apply(s,re(t)):n.push(t)}))||n},re=function(t,e,n){return a&&!e&&a.selector?a.selector(t):!k(t)||n||!d&&De()?I(t)?se(t,n):ne(t)?ee.call(t,0):t?[t]:[]:ee.call((e||l).querySelectorAll(t),0)},oe=function(t){return t=re(t)[0]||$("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return re(e,n.querySelectorAll?n:n===t?$("Invalid scope")||l.createElement("div"):t)}},ie=function(t){return t.sort((function(){return.5-Math.random()}))},ae=function(t){if(O(t))return t;var e=D(t)?t:{each:t},n=Ne(e.ease),s=e.from||0,r=parseFloat(e.base)||0,o={},i=s>0&&s<1,a=isNaN(s)||i,u=e.axis,c=s,d=s;return k(s)?c=d={center:.5,edges:.5,end:1}[s]||0:!i&&a&&(c=s[0],d=s[1]),function(t,i,l){var h,f,m,p,g,v,_,y,b,x=(l||e).length,j=o[x];if(!j){if(!(b="auto"===e.grid?0:(e.grid||[1,w])[1])){for(_=-w;_<(_=l[b++].getBoundingClientRect().left)&&b<x;);b--}for(j=o[x]=[],h=a?Math.min(b,x)*c-.5:s%b,f=b===w?0:a?x*d/b-.5:s/b|0,_=0,y=w,v=0;v<x;v++)m=v%b-h,p=f-(v/b|0),j[v]=g=u?Math.abs("y"===u?p:m):S(m*m+p*p),g>_&&(_=g),g<y&&(y=g);"random"===s&&ie(j),j.max=_-y,j.min=y,j.v=x=(parseFloat(e.amount)||parseFloat(e.each)*(b>x?x-1:u?"y"===u?x/b:b:Math.max(b,x/b))||0)*("edges"===s?-1:1),j.b=x<0?r-x:r,j.u=Jt(e.amount||e.each)||0,n=n&&x<0?Ie(n):n}return x=(j[t]-j.min)/j.max||0,gt(j.b+(n?n(x):x)*j.v)+j.u}},ue=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var s=gt(Math.round(parseFloat(n)/t)*t*e);return(s-s%1)/e+(q(n)?0:Jt(n))}},ce=function(t,e){var n,s,r=I(t);return!r&&D(t)&&(n=r=t.radius||w,t.values?(t=re(t.values),(s=!q(t[0]))&&(n*=n)):t=ue(t.increment)),$t(e,r?O(t)?function(e){return s=t(e),Math.abs(s-e)<=n?s:e}:function(e){for(var r,o,i=parseFloat(s?e.x:e),a=parseFloat(s?e.y:0),u=w,c=0,d=t.length;d--;)(r=s?(r=t[d].x-i)*r+(o=t[d].y-a)*o:Math.abs(t[d]-i))<u&&(u=r,c=d);return c=!n||u<=n?t[c]:e,s||c===e||q(e)?c:c+Jt(e)}:ue(t))},de=function(t,e,n,s){return $t(I(t)?!e:!0===n?!!(n=0):!s,(function(){return I(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(s=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*s)/s}))},le=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},he=function(t,e){return function(n){return t(parseFloat(n))+(e||Jt(n))}},fe=function(t,e,n){return _e(t,e,0,1,n)},me=function(t,e,n){return $t(n,(function(n){return t[~~e(n)]}))},pe=function t(e,n,s){var r=n-e;return I(e)?me(e,t(0,e.length),n):$t(s,(function(t){return(r+(t-e)%r)%r+e}))},ge=function t(e,n,s){var r=n-e,o=2*r;return I(e)?me(e,t(0,e.length-1),n):$t(s,(function(t){return e+((t=(o+(t-e)%o)%o||0)>r?o-t:t)}))},ve=function(t){for(var e,n,s,r,o=0,i="";~(e=t.indexOf("random(",o));)s=t.indexOf(")",e),r="["===t.charAt(e+7),n=t.substr(e+7,s-e-7).match(r?G:U),i+=t.substr(o,e-o)+de(r?n:+n[0],r?0:+n[1],+n[2]||1e-5),o=s+1;return i+t.substr(o,t.length-o)},_e=function(t,e,n,s,r){var o=e-t,i=s-n;return $t(r,(function(e){return n+((e-t)/o*i||0)}))},ye=function t(e,n,s,r){var o=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!o){var i,a,u,c,d,l=k(e),h={};if(!0===s&&(r=1)&&(s=null),l)e={p:e},n={p:n};else if(I(e)&&!I(n)){for(u=[],c=e.length,d=c-2,a=1;a<c;a++)u.push(t(e[a-1],e[a]));c--,o=function(t){t*=c;var e=Math.min(d,~~t);return u[e](t-e)},s=n}else r||(e=Et(I(e)?[]:{},e));if(!u){for(i in n)Qe.call(h,e,i,"get",n[i]);o=function(t){return pn(t,h)||(l?e.p:e)}}}return $t(s,o)},be=function(t,e,n){var s,r,o,i=t.labels,a=w;for(s in i)(r=i[s]-e)<0==!!n&&r&&a>(r=Math.abs(r))&&(o=s,a=r);return o},xe=function(t,e,n){var s,r,o,i=t.vars,u=i[e],c=a,d=t._ctx;if(u)return s=i[e+"Params"],r=i.callbackScope||t,n&&rt.length&&yt(),d&&(a=d),o=s?u.apply(r,s):u.call(r),a=c,o},we=function(t){return kt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!i),t.progress()<1&&xe(t,"onInterrupt"),t},je=function(t){var e=(t=!t.name&&t.default||t).name,n=O(t),s=e&&!n&&t.init?function(){this._props=[]}:t,r={init:J,render:pn,add:Qe,kill:vn,modifier:gn,rawVars:0},o={targetTest:0,get:0,getSetter:ln,aliases:{},register:0};if(De(),t!==s){if(it[e])return;jt(s,jt(Tt(t,r),o)),Et(s.prototype,Et(r,Tt(t,o))),it[s.prop=e]=s,t.targetTest&&(ct.push(s),st[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Q(e,s),t.register&&t.register(qn,s,bn)},Ee=255,Ae={aqua:[0,Ee,Ee],lime:[0,Ee,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ee],navy:[0,0,128],white:[Ee,Ee,Ee],olive:[128,128,0],yellow:[Ee,Ee,0],orange:[Ee,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ee,0,0],pink:[Ee,192,203],cyan:[0,Ee,Ee],transparent:[Ee,Ee,Ee,0]},Te=function(t,e,n){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*Ee+.5|0},Se=function(t,e,n){var s,r,o,i,a,u,c,d,l,h,f=t?q(t)?[t>>16,t>>8&Ee,t&Ee]:0:Ae.black;if(!f){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Ae[t])f=Ae[t];else if("#"===t.charAt(0)){if(t.length<6&&(s=t.charAt(1),r=t.charAt(2),o=t.charAt(3),t="#"+s+s+r+r+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(f=parseInt(t.substr(1,6),16))>>16,f>>8&Ee,f&Ee,parseInt(t.substr(7),16)/255];f=[(t=parseInt(t.substr(1),16))>>16,t>>8&Ee,t&Ee]}else if("hsl"===t.substr(0,3))if(f=h=t.match(U),e){if(~t.indexOf("="))return f=t.match(N),n&&f.length<4&&(f[3]=1),f}else i=+f[0]%360/360,a=+f[1]/100,s=2*(u=+f[2]/100)-(r=u<=.5?u*(a+1):u+a-u*a),f.length>3&&(f[3]*=1),f[0]=Te(i+1/3,s,r),f[1]=Te(i,s,r),f[2]=Te(i-1/3,s,r);else f=t.match(U)||Ae.transparent;f=f.map(Number)}return e&&!h&&(s=f[0]/Ee,r=f[1]/Ee,o=f[2]/Ee,u=((c=Math.max(s,r,o))+(d=Math.min(s,r,o)))/2,c===d?i=a=0:(l=c-d,a=u>.5?l/(2-c-d):l/(c+d),i=c===s?(r-o)/l+(r<o?6:0):c===r?(o-s)/l+2:(s-r)/l+4,i*=60),f[0]=~~(i+.5),f[1]=~~(100*a+.5),f[2]=~~(100*u+.5)),n&&f.length<4&&(f[3]=1),f},Me=function(t){var e=[],n=[],s=-1;return t.split(ke).forEach((function(t){var r=t.match(B)||[];e.push.apply(e,r),n.push(s+=r.length+1)})),e.c=n,e},Ce=function(t,e,n){var s,r,o,i,a="",u=(t+a).match(ke),c=e?"hsla(":"rgba(",d=0;if(!u)return t;if(u=u.map((function(t){return(t=Se(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(o=Me(t),(s=n.c).join(a)!==o.c.join(a)))for(i=(r=t.replace(ke,"1").split(B)).length-1;d<i;d++)a+=r[d]+(~s.indexOf(d)?u.shift()||c+"0,0,0,0)":(o.length?o:u.length?u:n).shift());if(!r)for(i=(r=t.split(ke)).length-1;d<i;d++)a+=r[d]+u[d];return a+r[i]},ke=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Ae)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Oe=/hsl[a]?\(/,qe=function(t){var e,n=t.join(" ");if(ke.lastIndex=0,ke.test(n))return e=Oe.test(n),t[1]=Ce(t[1],e),t[0]=Ce(t[0],e,Me(t[1])),!0},Le=function(){var t,e,n,s,r,o,i=Date.now,a=500,u=33,f=i(),m=f,g=1e3/240,v=g,_=[],y=function n(c){var d,l,h,p,y=i()-m,b=!0===c;if(y>a&&(f+=y-u),((d=(h=(m+=y)-f)-v)>0||b)&&(p=++s.frame,r=h-1e3*s.time,s.time=h/=1e3,v+=d+(d>=g?4:g-d),l=1),b||(t=e(n)),l)for(o=0;o<_.length;o++)_[o](h,r,p,c)};return s={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return r/(1e3/(t||60))},wake:function(){h&&(!d&&P()&&(c=d=window,l=c.document||{},W.gsap=qn,(c.gsapVersions||(c.gsapVersions=[])).push(qn.version),Z(X||c.GreenSockGlobals||!c.gsap&&c||{}),n=c.requestAnimationFrame),t&&s.sleep(),e=n||function(t){return setTimeout(t,v-1e3*s.time+1|0)},p=1,y(2))},sleep:function(){(n?c.cancelAnimationFrame:clearTimeout)(t),p=0,e=J},lagSmoothing:function(t,e){a=t||1/0,u=Math.min(e||33,a)},fps:function(t){g=1e3/(t||240),v=1e3*s.time+g},add:function(t,e,n){var r=e?function(e,n,o,i){t(e,n,o,i),s.remove(r)}:t;return s.remove(t),_[n?"unshift":"push"](r),De(),r},remove:function(t,e){~(e=_.indexOf(t))&&_.splice(e,1)&&o>=e&&o--},_listeners:_}}(),De=function(){return!p&&Le.wake()},Re={},Pe=/^[\d.\-M][\d.\-,\s]/,Fe=/["']/g,ze=function(t){for(var e,n,s,r={},o=t.substr(1,t.length-3).split(":"),i=o[0],a=1,u=o.length;a<u;a++)n=o[a],e=a!==u-1?n.lastIndexOf(","):n.length,s=n.substr(0,e),r[i]=isNaN(s)?s.replace(Fe,"").trim():+s,i=n.substr(e+1).trim();return r},Ie=function(t){return function(e){return 1-t(1-e)}},Ue=function t(e,n){for(var s,r=e._first;r;)r instanceof Xe?t(r,n):!r.vars.yoyoEase||r._yoyo&&r._repeat||r._yoyo===n||(r.timeline?t(r.timeline,n):(s=r._ease,r._ease=r._yEase,r._yEase=s,r._yoyo=n)),r=r._next},Ne=function(t,e){return t&&(O(t)?t:Re[t]||function(t){var e,n,s,r,o=(t+"").split("("),i=Re[o[0]];return i&&o.length>1&&i.config?i.config.apply(null,~t.indexOf("{")?[ze(o[1])]:(e=t,n=e.indexOf("(")+1,s=e.indexOf(")"),r=e.indexOf("(",n),e.substring(n,~r&&r<s?e.indexOf(")",s+1):s)).split(",").map(xt)):Re._CE&&Pe.test(t)?Re._CE("",t):i}(t))||e},Be=function(t,e,n,s){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===s&&(s=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var r,o={easeIn:e,easeOut:n,easeInOut:s};return mt(t,(function(t){for(var e in Re[t]=W[t]=o,Re[r=t.toLowerCase()]=n,o)Re[r+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Re[t+"."+e]=o[e]})),o},Ve=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},He=function t(e,n,s){var r=n>=1?n:1,o=(s||(e?.3:.45))/(n<1?n:1),i=o/E*(Math.asin(1/r)||0),a=function(t){return 1===t?1:r*Math.pow(2,-10*t)*C((t-i)*o)+1},u="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Ve(a);return o=E/o,u.config=function(n,s){return t(e,n,s)},u},Ge=function t(e,n){void 0===n&&(n=1.70158);var s=function(t){return t?--t*t*((n+1)*t+n)+1:0},r="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:Ve(s);return r.config=function(n){return t(e,n)},r};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;Be(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),Re.Linear.easeNone=Re.none=Re.Linear.easeIn,Be("Elastic",He("in"),He("out"),He()),g=7.5625,_=1/(v=2.75),Be("Bounce",(function(t){return 1-y(1-t)}),y=function(t){return t<_?g*t*t:t<.7272727272727273?g*Math.pow(t-1.5/v,2)+.75:t<.9090909090909092?g*(t-=2.25/v)*t+.9375:g*Math.pow(t-2.625/v,2)+.984375}),Be("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Be("Circ",(function(t){return-(S(1-t*t)-1)})),Be("Sine",(function(t){return 1===t?1:1-M(t*A)})),Be("Back",Ge("in"),Ge("out"),Ge()),Re.SteppedEase=Re.steps=W.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,s=t+(e?0:1),r=e?1:0;return function(t){return((s*Qt(0,.99999999,t)|0)+r)*n}}},x.ease=Re["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return dt+=t+","+t+"Params,"}));var Ye=function(t,e){this.id=T++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:ft,this.set=e?e.getSetter:ln},We=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Yt(this,+t.duration,1,1),this.data=t.data,a&&(this._ctx=a,a.data.push(this)),p||Le.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Yt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(De(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(It(this,t),!n._dp||n.parent||Ut(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Nt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===j||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),bt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Rt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Rt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?Pt(this._tTime,n)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Ft(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Qt(-this._delay,this._tDur,e),!0),zt(this),qt(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(De(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==j&&(this._tTime-=j)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Nt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(R(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ft(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=nt);var e=i;return i=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),i=e,this},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(e._ts||1),e=e._dp;return!this.parent&&this._sat?this._sat.vars.immediateRender?-1:this._sat.globalTime(t):n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Wt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Wt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Zt(this,t),R(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,R(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-j))},e.eventCallback=function(t,e,n){var s=this.vars;return arguments.length>1?(e?(s[t]=e,n&&(s[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete s[t],this):s[t]},e.then=function(t){var e=this;return new Promise((function(n){var s=O(t)?t:wt,r=function(){var t=e.then;e.then=null,O(s)&&(s=s(e))&&(s.then||s===e)&&(e.then=t),n(s),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?r():e._prom=r}))},e.kill=function(){we(this)},t}();jt(We.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Xe=function(t){function e(e,n){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=R(e.sortChildren),u&&Nt(e.parent||u,s(r),n),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&Bt(s(r),e.scrollTrigger),r}r(e,t);var n=e.prototype;return n.to=function(t,e,n){return Kt(0,arguments,this),this},n.from=function(t,e,n){return Kt(1,arguments,this),this},n.fromTo=function(t,e,n,s){return Kt(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,St(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new on(t,e,Zt(this,n),1),this},n.call=function(t,e,n){return Nt(this,on.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,s,r,o,i){return n.duration=e,n.stagger=n.stagger||s,n.onComplete=o,n.onCompleteParams=i,n.parent=this,new on(t,n,Zt(this,r)),this},n.staggerFrom=function(t,e,n,s,r,o,i){return n.runBackwards=1,St(n).immediateRender=R(n.immediateRender),this.staggerTo(t,e,n,s,r,o,i)},n.staggerFromTo=function(t,e,n,s,r,o,i,a){return s.startAt=n,St(s).immediateRender=R(s.immediateRender),this.staggerTo(t,e,s,r,o,i,a)},n.render=function(t,e,n){var s,r,o,a,c,d,l,h,f,m,p,g,v=this._time,_=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=t<=0?0:gt(t),x=this._zTime<0!=t<0&&(this._initted||!y);if(this!==u&&b>_&&t>=0&&(b=_),b!==this._tTime||n||x){if(v!==this._time&&y&&(b+=this._time-v,t+=this._time-v),s=b,f=this._start,d=!(h=this._ts),x&&(y||(v=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(p=this._yoyo,c=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,n);if(s=gt(b%c),b===_?(a=this._repeat,s=y):((a=~~(b/c))&&a===b/c&&(s=y,a--),s>y&&(s=y)),m=Pt(this._tTime,c),!v&&this._tTime&&m!==a&&(m=a),p&&1&a&&(s=y-s,g=1),a!==m&&!this._lock){var w=p&&1&m,E=w===(p&&1&a);if(a<m&&(w=!w),v=w?0:y,this._lock=1,this.render(v||(g?0:gt(a*c)),e,!y)._lock=0,this._tTime=b,!e&&this.parent&&xe(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||d!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,_=this._tDur,E&&(this._lock=2,v=w?y:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!d)return this;Ue(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,n){var s;if(n>e)for(s=t._first;s&&s._start<=n;){if("isPause"===s.data&&s._start>e)return s;s=s._next}else for(s=t._last;s&&s._start>=n;){if("isPause"===s.data&&s._start<e)return s;s=s._prev}}(this,gt(v),gt(s)),l&&(b-=s-(s=l._start))),this._tTime=b,this._time=s,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,v=0),!v&&s&&!e&&(xe(this,"onStart"),this._tTime!==b))return this;if(s>=v&&t>=0)for(r=this._first;r;){if(o=r._next,(r._act||s>=r._start)&&r._ts&&l!==r){if(r.parent!==this)return this.render(t,e,n);if(r.render(r._ts>0?(s-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(s-r._start)*r._ts,e,n),s!==this._time||!this._ts&&!d){l=0,o&&(b+=this._zTime=-1e-8);break}}r=o}else{r=this._last;for(var A=t<0?t:s;r;){if(o=r._prev,(r._act||A<=r._end)&&r._ts&&l!==r){if(r.parent!==this)return this.render(t,e,n);if(r.render(r._ts>0?(A-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(A-r._start)*r._ts,e,n||i&&(r._initted||r._startAt)),s!==this._time||!this._ts&&!d){l=0,o&&(b+=this._zTime=A?-1e-8:j);break}}r=o}}if(l&&!e&&(this.pause(),l.render(s>=v?0:-1e-8)._zTime=s>=v?1:-1,this._ts))return this._start=f,zt(this),this.render(t,e,n);this._onUpdate&&!e&&xe(this,"onUpdate",!0),(b===_&&this._tTime>=this.totalDuration()||!b&&v)&&(f!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!y)&&(b===_&&this._ts>0||!b&&this._ts<0)&&kt(this,1),e||t<0&&!v||!b&&!v&&_||(xe(this,b===_&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<_&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(q(e)||(e=Zt(this,e,t)),!(t instanceof We)){if(I(t))return t.forEach((function(t){return n.add(t,e)})),this;if(k(t))return this.addLabel(t,e);if(!O(t))return this;t=on.delayedCall(0,t)}return this!==t?Nt(this,t,e):this},n.getChildren=function(t,e,n,s){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===s&&(s=-w);for(var r=[],o=this._first;o;)o._start>=s&&(o instanceof on?e&&r.push(o):(n&&r.push(o),t&&r.push.apply(r,o.getChildren(!0,e,n)))),o=o._next;return r},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return k(t)?this.removeLabel(t):O(t)?this.killTweensOf(t):(Ct(this,t),t===this._recent&&(this._recent=this._last),Ot(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=gt(Le.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=Zt(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var s=on.delayedCall(0,e||J,n);return s.data="isPause",this._hasPause=1,Nt(this,s,Zt(this,t))},n.removePause=function(t){var e=this._first;for(t=Zt(this,t);e;)e._start===t&&"isPause"===e.data&&kt(e),e=e._next},n.killTweensOf=function(t,e,n){for(var s=this.getTweensOf(t,n),r=s.length;r--;)Ze!==s[r]&&s[r].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,s=[],r=re(t),o=this._first,i=q(e);o;)o instanceof on?_t(o._targets,r)&&(i?(!Ze||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&s.push(o):(n=o.getTweensOf(r,e)).length&&s.push.apply(s,n),o=o._next;return s},n.tweenTo=function(t,e){e=e||{};var n,s=this,r=Zt(s,t),o=e,i=o.startAt,a=o.onStart,u=o.onStartParams,c=o.immediateRender,d=on.to(s,jt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:e.duration||Math.abs((r-(i&&"time"in i?i.time:s._time))/s.timeScale())||j,onStart:function(){if(s.pause(),!n){var t=e.duration||Math.abs((r-(i&&"time"in i?i.time:s._time))/s.timeScale());d._dur!==t&&Yt(d,t,0,1).render(d._time,!0,!0),n=1}a&&a.apply(d,u||[])}},e));return c?d.render(0):d},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,jt({startAt:{time:Zt(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),be(this,Zt(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),be(this,Zt(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+j)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var s,r=this._first,o=this.labels;r;)r._start>=n&&(r._start+=t,r._end+=t),r=r._next;if(e)for(s in o)o[s]>=n&&(o[s]+=t);return Ot(this)},n.invalidate=function(e){var n=this._first;for(this._lock=0;n;)n.invalidate(e),n=n._next;return t.prototype.invalidate.call(this,e)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Ot(this)},n.totalDuration=function(t){var e,n,s,r=0,o=this,i=o._last,a=w;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(s=o.parent;i;)e=i._prev,i._dirty&&i.totalDuration(),(n=i._start)>a&&o._sort&&i._ts&&!o._lock?(o._lock=1,Nt(o,i,n-i._delay,1)._lock=0):a=n,n<0&&i._ts&&(r-=n,(!s&&!o._dp||s&&s.smoothChildTiming)&&(o._start+=n/o._ts,o._time-=n,o._tTime-=n),o.shiftChildren(-n,!1,-Infinity),a=0),i._end>r&&i._ts&&(r=i._end),i=e;Yt(o,o===u&&o._time>r?o._time:r,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(u._ts&&(bt(u,Ft(t,u)),f=Le.frame),Le.frame>=ut){ut+=b.autoSleep||120;var e=u._first;if((!e||!e._ts)&&b.autoSleep&&Le._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Le.sleep()}}},e}(We);jt(Xe.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ze,Ke,$e=function(t,e,n,s,r,o,i){var a,u,c,d,l,h,f,m,p=new bn(this._pt,t,e,0,1,mn,null,r),g=0,v=0;for(p.b=n,p.e=s,n+="",(f=~(s+="").indexOf("random("))&&(s=ve(s)),o&&(o(m=[n,s],t,e),n=m[0],s=m[1]),u=n.match(V)||[];a=V.exec(s);)d=a[0],l=s.substring(g,a.index),c?c=(c+1)%5:"rgba("===l.substr(-5)&&(c=1),d!==u[v++]&&(h=parseFloat(u[v-1])||0,p._pt={_next:p._pt,p:l||1===v?l:",",s:h,c:"="===d.charAt(1)?vt(h,d)-h:parseFloat(d)-h,m:c&&c<4?Math.round:0},g=V.lastIndex);return p.c=g<s.length?s.substring(g,s.length):"",p.fp=i,(H.test(s)||f)&&(p.e=0),this._pt=p,p},Qe=function(t,e,n,s,r,o,i,a,u,c){O(s)&&(s=s(r||0,t,o));var d,l=t[e],h="get"!==n?n:O(l)?u?t[e.indexOf("set")||!O(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():l,f=O(l)?u?cn:un:an;if(k(s)&&(~s.indexOf("random(")&&(s=ve(s)),"="===s.charAt(1)&&((d=vt(h,s)+(Jt(h)||0))||0===d)&&(s=d)),!c||h!==s||Ke)return isNaN(h*s)||""===s?(!l&&!(e in t)&&K(e,s),$e.call(this,t,e,h,s,f,a||b.stringFilter,u)):(d=new bn(this._pt,t,e,+h||0,s-(h||0),"boolean"==typeof l?fn:hn,0,f),u&&(d.fp=u),i&&d.modifier(i,this,t),this._pt=d)},Je=function(t,e,n,s,r,o){var i,a,u,c;if(it[t]&&!1!==(i=new it[t]).init(r,i.rawVars?e[t]:function(t,e,n,s,r){if(O(t)&&(t=nn(t,r,e,n,s)),!D(t)||t.style&&t.nodeType||I(t)||z(t))return k(t)?nn(t,r,e,n,s):t;var o,i={};for(o in t)i[o]=nn(t[o],r,e,n,s);return i}(e[t],s,r,o,n),n,s,o)&&(n._pt=a=new bn(n._pt,r,t,0,1,i.render,i,0,i.priority),n!==m))for(u=n._ptLookup[n._targets.indexOf(r)],c=i._props.length;c--;)u[i._props[c]]=a;return i},tn=function t(e,n,s){var r,a,c,d,l,h,f,m,p,g,v,_,y,b=e.vars,E=b.ease,A=b.startAt,T=b.immediateRender,S=b.lazy,M=b.onUpdate,C=b.onUpdateParams,k=b.callbackScope,O=b.runBackwards,q=b.yoyoEase,L=b.keyframes,D=b.autoRevert,P=e._dur,F=e._startAt,z=e._targets,I=e.parent,U=I&&"nested"===I.data?I.vars.targets:z,N="auto"===e._overwrite&&!o,B=e.timeline;if(B&&(!L||!E)&&(E="none"),e._ease=Ne(E,x.ease),e._yEase=q?Ie(Ne(!0===q?E:q,x.ease)):0,q&&e._yoyo&&!e._repeat&&(q=e._yEase,e._yEase=e._ease,e._ease=q),e._from=!B&&!!b.runBackwards,!B||L&&!b.stagger){if(_=(m=z[0]?ht(z[0]).harness:0)&&b[m.prop],r=Tt(b,st),F&&(F._zTime<0&&F.progress(1),n<0&&O&&T&&!D?F.render(-1,!0):F.revert(O&&P?et:tt),F._lazy=0),A){if(kt(e._startAt=on.set(z,jt({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:!F&&R(S),startAt:null,delay:0,onUpdate:M,onUpdateParams:C,callbackScope:k,stagger:0},A))),e._startAt._dp=0,e._startAt._sat=e,n<0&&(i||!T&&!D)&&e._startAt.revert(et),T&&P&&n<=0&&s<=0)return void(n&&(e._zTime=n))}else if(O&&P&&!F)if(n&&(T=!1),c=jt({overwrite:!1,data:"isFromStart",lazy:T&&!F&&R(S),immediateRender:T,stagger:0,parent:I},r),_&&(c[m.prop]=_),kt(e._startAt=on.set(z,c)),e._startAt._dp=0,e._startAt._sat=e,n<0&&(i?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=n,T){if(!n)return}else t(e._startAt,j,j);for(e._pt=e._ptCache=0,S=P&&R(S)||S&&!P,a=0;a<z.length;a++){if(f=(l=z[a])._gsap||lt(z)[a]._gsap,e._ptLookup[a]=g={},ot[f.id]&&rt.length&&yt(),v=U===z?a:U.indexOf(l),m&&!1!==(p=new m).init(l,_||r,e,v,U)&&(e._pt=d=new bn(e._pt,l,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(t){g[t]=d})),p.priority&&(h=1)),!m||_)for(c in r)it[c]&&(p=Je(c,r,e,v,l,U))?p.priority&&(h=1):g[c]=d=Qe.call(e,l,c,"get",r[c],v,U,0,b.stringFilter);e._op&&e._op[a]&&e.kill(l,e._op[a]),N&&e._pt&&(Ze=e,u.killTweensOf(l,g,e.globalTime(n)),y=!e.parent,Ze=0),e._pt&&S&&(ot[f.id]=1)}h&&yn(e),e._onInit&&e._onInit(e)}e._onUpdate=M,e._initted=(!e._op||e._pt)&&!y,L&&n<=0&&B.render(w,!0,!0)},en=function(t,e,n,s){var r,o,i=e.ease||s||"power1.inOut";if(I(e))o=n[t]||(n[t]=[]),e.forEach((function(t,n){return o.push({t:n/(e.length-1)*100,v:t,e:i})}));else for(r in e)o=n[r]||(n[r]=[]),"ease"===r||o.push({t:parseFloat(t),v:e[r],e:i})},nn=function(t,e,n,s,r){return O(t)?t.call(e,n,s,r):k(t)&&~t.indexOf("random(")?ve(t):t},sn=dt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",rn={};mt(sn+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return rn[t]=1}));var on=function(t){function e(e,n,r,i){var a;"number"==typeof n&&(r.duration=n,n=r,r=null);var c,d,l,h,f,m,p,g,v=(a=t.call(this,i?n:St(n))||this).vars,_=v.duration,y=v.delay,x=v.immediateRender,w=v.stagger,j=v.overwrite,E=v.keyframes,A=v.defaults,T=v.scrollTrigger,S=v.yoyoEase,M=n.parent||u,C=(I(e)||z(e)?q(e[0]):"length"in n)?[e]:re(e);if(a._targets=C.length?lt(C):$("GSAP target "+e+" not found. https://greensock.com",!b.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,E||w||F(_)||F(y)){if(n=a.vars,(c=a.timeline=new Xe({data:"nested",defaults:A||{},targets:M&&"nested"===M.data?M.vars.targets:C})).kill(),c.parent=c._dp=s(a),c._start=0,w||F(_)||F(y)){if(h=C.length,p=w&&ae(w),D(w))for(f in w)~sn.indexOf(f)&&(g||(g={}),g[f]=w[f]);for(d=0;d<h;d++)(l=Tt(n,rn)).stagger=0,S&&(l.yoyoEase=S),g&&Et(l,g),m=C[d],l.duration=+nn(_,s(a),d,m,C),l.delay=(+nn(y,s(a),d,m,C)||0)-a._delay,!w&&1===h&&l.delay&&(a._delay=y=l.delay,a._start+=y,l.delay=0),c.to(m,l,p?p(d,m,C):0),c._ease=Re.none;c.duration()?_=y=0:a.timeline=0}else if(E){St(jt(c.vars.defaults,{ease:"none"})),c._ease=Ne(E.ease||n.ease||"none");var k,O,L,P=0;if(I(E))E.forEach((function(t){return c.to(C,t,">")})),c.duration();else{for(f in l={},E)"ease"===f||"easeEach"===f||en(f,E[f],l,E.easeEach);for(f in l)for(k=l[f].sort((function(t,e){return t.t-e.t})),P=0,d=0;d<k.length;d++)(L={ease:(O=k[d]).e,duration:(O.t-(d?k[d-1].t:0))/100*_})[f]=O.v,c.to(C,L,P),P+=L.duration;c.duration()<_&&c.to({},{duration:_-c.duration()})}}_||a.duration(_=c.duration())}else a.timeline=0;return!0!==j||o||(Ze=s(a),u.killTweensOf(C),Ze=0),Nt(M,s(a),r),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(x||!_&&!E&&a._start===gt(M._time)&&R(x)&&Dt(s(a))&&"nested"!==M.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),T&&Bt(s(a),T),a}r(e,t);var n=e.prototype;return n.render=function(t,e,n){var s,r,o,a,u,c,d,l,h,f=this._time,m=this._tDur,p=this._dur,g=t<0,v=t>m-j&&!g?m:t<j?0:t;if(p){if(v!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(s=v,l=this.timeline,this._repeat){if(a=p+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+t,e,n);if(s=gt(v%a),v===m?(o=this._repeat,s=p):((o=~~(v/a))&&o===v/a&&(s=p,o--),s>p&&(s=p)),(c=this._yoyo&&1&o)&&(h=this._yEase,s=p-s),u=Pt(this._tTime,a),s===f&&!n&&this._initted)return this._tTime=v,this;o!==u&&(l&&this._yEase&&Ue(l,c),!this.vars.repeatRefresh||c||this._lock||(this._lock=n=1,this.render(gt(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Vt(this,g?t:s,n,e,v))return this._tTime=0,this;if(f!==this._time)return this;if(p!==this._dur)return this.render(t,e,n)}if(this._tTime=v,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(h||this._ease)(s/p),this._from&&(this.ratio=d=1-d),s&&!f&&!e&&(xe(this,"onStart"),this._tTime!==v))return this;for(r=this._pt;r;)r.r(d,r.d),r=r._next;l&&l.render(t<0?t:!s&&c?-1e-8:l._dur*l._ease(s/this._dur),e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(g&&Lt(this,t,0,n),xe(this,"onUpdate")),this._repeat&&o!==u&&this.vars.onRepeat&&!e&&this.parent&&xe(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&Lt(this,t,0,!0),(t||!p)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&kt(this,1),e||g&&!f||!(v||f||c)||(xe(this,v===m?"onComplete":"onReverseComplete",!0),this._prom&&!(v<m&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,s){var r,o,a,u=t.ratio,c=e<0||!e&&(!t._start&&Ht(t)&&(t._initted||!Gt(t))||(t._ts<0||t._dp._ts<0)&&!Gt(t))?0:1,d=t._rDelay,l=0;if(d&&t._repeat&&(l=Qt(0,t._tDur,e),o=Pt(l,d),t._yoyo&&1&o&&(c=1-c),o!==Pt(t._tTime,d)&&(u=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==u||i||s||t._zTime===j||!e&&t._zTime){if(!t._initted&&Vt(t,e,s,n,l))return;for(a=t._zTime,t._zTime=e||(n?j:0),n||(n=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=l,r=t._pt;r;)r.r(c,r.d),r=r._next;e<0&&Lt(t,e,0,!0),t._onUpdate&&!n&&xe(t,"onUpdate"),l&&t._repeat&&!n&&t.parent&&xe(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&kt(t,1),n||i||(xe(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},n.resetTo=function(t,e,n,s){p||Le.wake(),this._ts||this.play();var r=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||tn(this,r),function(t,e,n,s,r,o,i){var a,u,c,d,l=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!l)for(l=t._ptCache[e]=[],c=t._ptLookup,d=t._targets.length;d--;){if((a=c[d][e])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==e&&a.fp!==e;)a=a._next;if(!a)return Ke=1,t.vars[e]="+=0",tn(t,i),Ke=0,1;l.push(a)}for(d=l.length;d--;)(a=(u=l[d])._pt||u).s=!s&&0!==s||r?a.s+(s||0)+o*a.c:s,a.c=n-a.s,u.e&&(u.e=pt(n)+Jt(u.e)),u.b&&(u.b=a.s+Jt(u.b))}(this,t,e,n,s,this._ease(r/this._dur),r)?this.resetTo(t,e,n,s):(It(this,0),this.parent||Mt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?we(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ze&&!0!==Ze.vars.overwrite)._first||we(this),this.parent&&n!==this.timeline.totalDuration()&&Yt(this,this._dur*this.timeline._tDur/n,0,1),this}var s,r,o,i,a,u,c,d=this._targets,l=t?re(t):d,h=this._ptLookup,f=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,s=n===e.length;s&&n--&&t[n]===e[n];);return n<0}(d,l))return"all"===e&&(this._pt=0),we(this);for(s=this._op=this._op||[],"all"!==e&&(k(e)&&(a={},mt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var n,s,r,o,i=t[0]?ht(t[0]).harness:0,a=i&&i.aliases;if(!a)return e;for(s in n=Et({},e),a)if(s in n)for(r=(o=a[s].split(",")).length;r--;)n[o[r]]=n[s];return n}(d,e)),c=d.length;c--;)if(~l.indexOf(d[c]))for(a in r=h[c],"all"===e?(s[c]=e,i=r,o={}):(o=s[c]=s[c]||{},i=e),i)(u=r&&r[a])&&("kill"in u.d&&!0!==u.d.kill(a)||Ct(this,u,"_pt"),delete r[a]),"all"!==o&&(o[a]=1);return this._initted&&!this._pt&&f&&we(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return Kt(1,arguments)},e.delayedCall=function(t,n,s,r){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:r})},e.fromTo=function(t,e,n){return Kt(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return u.killTweensOf(t,e,n)},e}(We);jt(on.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){on[t]=function(){var e=new Xe,n=ee.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var an=function(t,e,n){return t[e]=n},un=function(t,e,n){return t[e](n)},cn=function(t,e,n,s){return t[e](s.fp,n)},dn=function(t,e,n){return t.setAttribute(e,n)},ln=function(t,e){return O(t[e])?un:L(t[e])&&t.setAttribute?dn:an},hn=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},fn=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},mn=function(t,e){var n=e._pt,s="";if(!t&&e.b)s=e.b;else if(1===t&&e.e)s=e.e;else{for(;n;)s=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+s,n=n._next;s+=e.c}e.set(e.t,e.p,s,e)},pn=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},gn=function(t,e,n,s){for(var r,o=this._pt;o;)r=o._next,o.p===s&&o.modifier(t,e,n),o=r},vn=function(t){for(var e,n,s=this._pt;s;)n=s._next,s.p===t&&!s.op||s.op===t?Ct(this,s,"_pt"):s.dep||(e=1),s=n;return!e},_n=function(t,e,n,s){s.mSet(t,e,s.m.call(s.tween,n,s.mt),s)},yn=function(t){for(var e,n,s,r,o=t._pt;o;){for(e=o._next,n=s;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:r)?o._prev._next=o:s=o,(o._next=n)?n._prev=o:r=o,o=e}t._pt=s},bn=function(){function t(t,e,n,s,r,o,i,a,u){this.t=e,this.s=s,this.c=r,this.p=n,this.r=o||hn,this.d=i||this,this.set=a||an,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=_n,this.m=t,this.mt=n,this.tween=e},t}();mt(dt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return st[t]=1})),W.TweenMax=W.TweenLite=on,W.TimelineLite=W.TimelineMax=Xe,u=new Xe({sortChildren:!1,defaults:x,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=qe;var xn=[],wn={},jn=[],En=0,An=function(t){return(wn[t]||jn).map((function(t){return t()}))},Tn=function(){var t=Date.now(),e=[];t-En>2&&(An("matchMediaInit"),xn.forEach((function(t){var n,s,r,o,i=t.queries,a=t.conditions;for(s in i)(n=c.matchMedia(i[s]).matches)&&(r=1),n!==a[s]&&(a[s]=n,o=1);o&&(t.revert(),r&&e.push(t))})),An("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t)})),En=t,An("matchMedia"))},Sn=function(){function t(t,e){this.selector=e&&oe(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,n){O(t)&&(n=e,e=t,t=O);var s=this,r=function(){var t,r=a,o=s.selector;return r&&r!==s&&r.data.push(s),n&&(s.selector=oe(n)),a=s,t=e.apply(s,arguments),O(t)&&s._r.push(t),a=r,s.selector=o,s.isReverted=!1,t};return s.last=r,t===O?r(s):t?s[t]=r:r},e.ignore=function(t){var e=a;a=null,t(this),a=e},e.getTweens=function(){var e=[];return this.data.forEach((function(n){return n instanceof t?e.push.apply(e,n.getTweens()):n instanceof on&&!(n.parent&&"nested"===n.parent.data)&&e.push(n)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var n=this;if(t){var s=this.getTweens();this.data.forEach((function(t){"isFlip"===t.data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(t){return s.splice(s.indexOf(t),1)})))})),s.map((function(t){return{g:t.globalTime(0),t}})).sort((function(t,e){return e.g-t.g||-1})).forEach((function(e){return e.t.revert(t)})),this.data.forEach((function(e){return!(e instanceof We)&&e.revert&&e.revert(t)})),this._r.forEach((function(e){return e(t,n)})),this.isReverted=!0}else this.data.forEach((function(t){return t.kill&&t.kill()}));if(this.clear(),e){var r=xn.indexOf(this);~r&&xn.splice(r,1)}},e.revert=function(t){this.kill(t||{})},t}(),Mn=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,n){D(t)||(t={matches:t});var s,r,o,i=new Sn(0,n||this.scope),a=i.conditions={};for(r in this.contexts.push(i),e=i.add("onMatch",e),i.queries=t,t)"all"===r?o=1:(s=c.matchMedia(t[r]))&&(xn.indexOf(i)<0&&xn.push(i),(a[r]=s.matches)&&(o=1),s.addListener?s.addListener(Tn):s.addEventListener("change",Tn));return o&&e(i),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Cn={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return je(t)}))},timeline:function(t){return new Xe(t)},getTweensOf:function(t,e){return u.getTweensOf(t,e)},getProperty:function(t,e,n,s){k(t)&&(t=re(t)[0]);var r=ht(t||{}).get,o=n?wt:xt;return"native"===n&&(n=""),t?e?o((it[e]&&it[e].get||r)(t,e,n,s)):function(e,n,s){return o((it[e]&&it[e].get||r)(t,e,n,s))}:t},quickSetter:function(t,e,n){if((t=re(t)).length>1){var s=t.map((function(t){return qn.quickSetter(t,e,n)})),r=s.length;return function(t){for(var e=r;e--;)s[e](t)}}t=t[0]||{};var o=it[e],i=ht(t),a=i.harness&&(i.harness.aliases||{})[e]||e,u=o?function(e){var s=new o;m._pt=0,s.init(t,n?e+n:e,m,0,[t]),s.render(1,s),m._pt&&pn(1,m)}:i.set(t,a);return o?u:function(e){return u(t,a,n?e+n:e,i,1)}},quickTo:function(t,e,n){var s,r=qn.to(t,Et(((s={})[e]="+=0.1",s.paused=!0,s),n||{})),o=function(t,n,s){return r.resetTo(e,t,n,s)};return o.tween=r,o},isTweening:function(t){return u.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ne(t.ease,x.ease)),At(x,t||{})},config:function(t){return At(b,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,s=t.plugins,r=t.defaults,o=t.extendTimeline;(s||"").split(",").forEach((function(t){return t&&!it[t]&&!W[t]&&$(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,s){return n(re(t),jt(e||{},r),s)},o&&(Xe.prototype[e]=function(t,n,s){return this.add(at[e](t,D(n)?n:(s=n)&&{},this),s)})},registerEase:function(t,e){Re[t]=Ne(e)},parseEase:function(t,e){return arguments.length?Ne(t,e):Re},getById:function(t){return u.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,s,r=new Xe(t);for(r.smoothChildTiming=R(t.smoothChildTiming),u.remove(r),r._dp=0,r._time=r._tTime=u._time,n=u._first;n;)s=n._next,!e&&!n._dur&&n instanceof on&&n.vars.onComplete===n._targets[0]||Nt(r,n,n._start-n._delay),n=s;return Nt(u,r,0),r},context:function(t,e){return t?new Sn(t,e):a},matchMedia:function(t){return new Mn(t)},matchMediaRefresh:function(){return xn.forEach((function(t){var e,n,s=t.conditions;for(n in s)s[n]&&(s[n]=!1,e=1);e&&t.revert()}))||Tn()},addEventListener:function(t,e){var n=wn[t]||(wn[t]=[]);~n.indexOf(e)||n.push(e)},removeEventListener:function(t,e){var n=wn[t],s=n&&n.indexOf(e);s>=0&&n.splice(s,1)},utils:{wrap:pe,wrapYoyo:ge,distribute:ae,random:de,snap:ce,normalize:fe,getUnit:Jt,clamp:te,splitColor:Se,toArray:re,selector:oe,mapRange:_e,pipe:le,unitize:he,interpolate:ye,shuffle:ie},install:Z,effects:at,ticker:Le,updateRoot:Xe.updateRoot,plugins:it,globalTimeline:u,core:{PropTween:bn,globals:Q,Tween:on,Timeline:Xe,Animation:We,getCache:ht,_removeLinkedListItem:Ct,reverting:function(){return i},context:function(t){return t&&a&&(a.data.push(t),t._ctx=a),a},suppressOverwrites:function(t){return o=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Cn[t]=on[t]})),Le.add(Xe.updateRoot),m=Cn.to({},{duration:0});var kn=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},On=function(t,e){return{name:t,rawVars:1,init:function(t,n,s){s._onInit=function(t){var s,r;if(k(n)&&(s={},mt(n,(function(t){return s[t]=1})),n=s),e){for(r in s={},n)s[r]=e(n[r]);n=s}!function(t,e){var n,s,r,o=t._targets;for(n in e)for(s=o.length;s--;)(r=t._ptLookup[s][n])&&(r=r.d)&&(r._pt&&(r=kn(r,n)),r&&r.modifier&&r.modifier(e[n],t,o[s],n))}(t,n)}}}},qn=Cn.registerPlugin({name:"attr",init:function(t,e,n,s,r){var o,i,a;for(o in this.tween=n,e)a=t.getAttribute(o)||"",(i=this.add(t,"setAttribute",(a||0)+"",e[o],s,r,0,0,o)).op=o,i.b=a,this._props.push(o)},render:function(t,e){for(var n=e._pt;n;)i?n.set(n.t,n.p,n.b,n):n.r(t,n.d),n=n._next}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n],0,0,0,0,0,1)}},On("roundProps",ue),On("modifiers"),On("snap",ce))||Cn;on.version=Xe.version=qn.version="3.11.4",h=1,P()&&De();var Ln=Re.Power0,Dn=Re.Power1,Rn=Re.Power2,Pn=Re.Power3,Fn=Re.Power4,zn=Re.Linear,In=Re.Quad,Un=Re.Cubic,Nn=Re.Quart,Bn=Re.Quint,Vn=Re.Strong,Hn=Re.Elastic,Gn=Re.Back,Yn=Re.SteppedEase,Wn=Re.Bounce,Xn=Re.Sine,Zn=Re.Expo,Kn=Re.Circ},"./node_modules/gsap/index.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>r.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>i,default:()=>o,gsap:()=>o});var s=n("./node_modules/gsap/gsap-core.js"),r=n("./node_modules/gsap/CSSPlugin.js"),o=s.gsap.registerPlugin(r.CSSPlugin)||s.gsap,i=o.core.Tween},"./node_modules/html-entities/lib/index.js":function(t,e,n){"use strict";var s=this&&this.__assign||function(){return s=Object.assign||function(t){for(var e,n=1,s=arguments.length;n<s;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},s.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/named-references.js"),o=n("./node_modules/html-entities/lib/numeric-unicode-map.js"),i=n("./node_modules/html-entities/lib/surrogate-pairs.js"),a=s(s({},r.namedReferences),{all:r.namedReferences.html5}),u={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},c={mode:"specialChars",level:"all",numeric:"decimal"};e.encode=function(t,e){var n=void 0===(d=(o=void 0===e?c:e).mode)?"specialChars":d,s=void 0===(m=o.numeric)?"decimal":m,r=o.level;if(!t)return"";var o,d,l=u[n],h=a[void 0===r?"all":r].characters,f="hexadecimal"===s;if(l.lastIndex=0,o=l.exec(t)){d="";var m=0;do{m!==o.index&&(d+=t.substring(m,o.index));var p=h[r=o[0]];if(!p){var g=r.length>1?i.getCodePoint(r,0):r.charCodeAt(0);p=(f?"&#x"+g.toString(16):"&#"+g)+";"}d+=p,m=o.index+r.length}while(o=l.exec(t));m!==t.length&&(d+=t.substring(m))}else d=t;return d};var d={scope:"body",level:"all"},l=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,f={xml:{strict:l,attribute:h,body:r.bodyRegExps.xml},html4:{strict:l,attribute:h,body:r.bodyRegExps.html4},html5:{strict:l,attribute:h,body:r.bodyRegExps.html5}},m=s(s({},f),{all:f.html5}),p=String.fromCharCode,g=p(65533),v={level:"all"};e.decodeEntity=function(t,e){var n=void 0===(s=(void 0===e?v:e).level)?"all":s;if(!t)return"";var s=t,r=(t[t.length-1],a[n].entities[t]);if(r)s=r;else if("&"===t[0]&&"#"===t[1]){var u=t[2],c="x"==u||"X"==u?parseInt(t.substr(3),16):parseInt(t.substr(2));s=c>=1114111?g:c>65535?i.fromCodePoint(c):p(o.numericUnicodeMap[c]||c)}return s},e.decode=function(t,e){var n=void 0===e?d:e,s=n.level,r=void 0===s?"all":s,u=n.scope,c=void 0===u?"xml"===r?"strict":"body":u;if(!t)return"";var l=m[r][c],h=a[r].entities,f="attribute"===c,v="strict"===c;l.lastIndex=0;var _,y=l.exec(t);if(y){_="";var b=0;do{b!==y.index&&(_+=t.substring(b,y.index));var x=y[0],w=x,j=x[x.length-1];if(f&&"="===j)w=x;else if(v&&";"!==j)w=x;else{var E=h[x];if(E)w=E;else if("&"===x[0]&&"#"===x[1]){var A=x[2],T="x"==A||"X"==A?parseInt(x.substr(3),16):parseInt(x.substr(2));w=T>=1114111?g:T>65535?i.fromCodePoint(T):p(o.numericUnicodeMap[T]||T)}}_+=w,b=y.index+x.length}while(y=l.exec(t));b!==t.length&&(_+=t.substring(b))}else _=t;return _}},"./node_modules/html-entities/lib/named-references.js":(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},e.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fromCodePoint=String.fromCodePoint||function(t){return String.fromCharCode(Math.floor((t-65536)/1024)+55296,(t-65536)%1024+56320)},e.getCodePoint=String.prototype.codePointAt?function(t,e){return t.codePointAt(e)}:function(t,e){return 1024*(t.charCodeAt(e)-55296)+t.charCodeAt(e+1)-56320+65536},e.highSurrogateFrom=55296,e.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"),"DataView");t.exports=s},"./node_modules/lodash/_Hash.js":(t,e,n)=>{var s=n("./node_modules/lodash/_hashClear.js"),r=n("./node_modules/lodash/_hashDelete.js"),o=n("./node_modules/lodash/_hashGet.js"),i=n("./node_modules/lodash/_hashHas.js"),a=n("./node_modules/lodash/_hashSet.js");function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}u.prototype.clear=s,u.prototype.delete=r,u.prototype.get=o,u.prototype.has=i,u.prototype.set=a,t.exports=u},"./node_modules/lodash/_ListCache.js":(t,e,n)=>{var s=n("./node_modules/lodash/_listCacheClear.js"),r=n("./node_modules/lodash/_listCacheDelete.js"),o=n("./node_modules/lodash/_listCacheGet.js"),i=n("./node_modules/lodash/_listCacheHas.js"),a=n("./node_modules/lodash/_listCacheSet.js");function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}u.prototype.clear=s,u.prototype.delete=r,u.prototype.get=o,u.prototype.has=i,u.prototype.set=a,t.exports=u},"./node_modules/lodash/_Map.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"),"Map");t.exports=s},"./node_modules/lodash/_MapCache.js":(t,e,n)=>{var s=n("./node_modules/lodash/_mapCacheClear.js"),r=n("./node_modules/lodash/_mapCacheDelete.js"),o=n("./node_modules/lodash/_mapCacheGet.js"),i=n("./node_modules/lodash/_mapCacheHas.js"),a=n("./node_modules/lodash/_mapCacheSet.js");function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}u.prototype.clear=s,u.prototype.delete=r,u.prototype.get=o,u.prototype.has=i,u.prototype.set=a,t.exports=u},"./node_modules/lodash/_Promise.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"),"Promise");t.exports=s},"./node_modules/lodash/_Set.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"),"Set");t.exports=s},"./node_modules/lodash/_SetCache.js":(t,e,n)=>{var s=n("./node_modules/lodash/_MapCache.js"),r=n("./node_modules/lodash/_setCacheAdd.js"),o=n("./node_modules/lodash/_setCacheHas.js");function i(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new s;++e<n;)this.add(t[e])}i.prototype.add=i.prototype.push=r,i.prototype.has=o,t.exports=i},"./node_modules/lodash/_Stack.js":(t,e,n)=>{var s=n("./node_modules/lodash/_ListCache.js"),r=n("./node_modules/lodash/_stackClear.js"),o=n("./node_modules/lodash/_stackDelete.js"),i=n("./node_modules/lodash/_stackGet.js"),a=n("./node_modules/lodash/_stackHas.js"),u=n("./node_modules/lodash/_stackSet.js");function c(t){var e=this.__data__=new s(t);this.size=e.size}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,t.exports=c},"./node_modules/lodash/_Symbol.js":(t,e,n)=>{var s=n("./node_modules/lodash/_root.js").Symbol;t.exports=s},"./node_modules/lodash/_Uint8Array.js":(t,e,n)=>{var s=n("./node_modules/lodash/_root.js").Uint8Array;t.exports=s},"./node_modules/lodash/_WeakMap.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"),"WeakMap");t.exports=s},"./node_modules/lodash/_arrayEach.js":t=>{t.exports=function(t,e){for(var n=-1,s=null==t?0:t.length;++n<s&&!1!==e(t[n],n,t););return t}},"./node_modules/lodash/_arrayFilter.js":t=>{t.exports=function(t,e){for(var n=-1,s=null==t?0:t.length,r=0,o=[];++n<s;){var i=t[n];e(i,n,t)&&(o[r++]=i)}return o}},"./node_modules/lodash/_arrayLikeKeys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseTimes.js"),r=n("./node_modules/lodash/isArguments.js"),o=n("./node_modules/lodash/isArray.js"),i=n("./node_modules/lodash/isBuffer.js"),a=n("./node_modules/lodash/_isIndex.js"),u=n("./node_modules/lodash/isTypedArray.js"),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),d=!n&&r(t),l=!n&&!d&&i(t),h=!n&&!d&&!l&&u(t),f=n||d||l||h,m=f?s(t.length,String):[],p=m.length;for(var g in t)!e&&!c.call(t,g)||f&&("length"==g||l&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,p))||m.push(g);return m}},"./node_modules/lodash/_arrayMap.js":t=>{t.exports=function(t,e){for(var n=-1,s=null==t?0:t.length,r=Array(s);++n<s;)r[n]=e(t[n],n,t);return r}},"./node_modules/lodash/_arrayPush.js":t=>{t.exports=function(t,e){for(var n=-1,s=e.length,r=t.length;++n<s;)t[r+n]=e[n];return t}},"./node_modules/lodash/_arraySome.js":t=>{t.exports=function(t,e){for(var n=-1,s=null==t?0:t.length;++n<s;)if(e(t[n],n,t))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(t,e,n)=>{var s=n("./node_modules/lodash/eq.js");t.exports=function(t,e){for(var n=t.length;n--;)if(s(t[n][0],e))return n;return-1}},"./node_modules/lodash/_baseEach.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseForOwn.js"),r=n("./node_modules/lodash/_createBaseEach.js")(s);t.exports=r},"./node_modules/lodash/_baseFor.js":(t,e,n)=>{var s=n("./node_modules/lodash/_createBaseFor.js")();t.exports=s},"./node_modules/lodash/_baseForOwn.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseFor.js"),r=n("./node_modules/lodash/keys.js");t.exports=function(t,e){return t&&s(t,e,r)}},"./node_modules/lodash/_baseGet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_castPath.js"),r=n("./node_modules/lodash/_toKey.js");t.exports=function(t,e){for(var n=0,o=(e=s(e,t)).length;null!=t&&n<o;)t=t[r(e[n++])];return n&&n==o?t:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_arrayPush.js"),r=n("./node_modules/lodash/isArray.js");t.exports=function(t,e,n){var o=e(t);return r(t)?o:s(o,n(t))}},"./node_modules/lodash/_baseGetTag.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Symbol.js"),r=n("./node_modules/lodash/_getRawTag.js"),o=n("./node_modules/lodash/_objectToString.js"),i=s?s.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?r(t):o(t)}},"./node_modules/lodash/_baseHasIn.js":t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},"./node_modules/lodash/_baseIsArguments.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGetTag.js"),r=n("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return r(t)&&"[object Arguments]"==s(t)}},"./node_modules/lodash/_baseIsEqual.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsEqualDeep.js"),r=n("./node_modules/lodash/isObjectLike.js");t.exports=function t(e,n,o,i,a){return e===n||(null==e||null==n||!r(e)&&!r(n)?e!=e&&n!=n:s(e,n,o,i,t,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Stack.js"),r=n("./node_modules/lodash/_equalArrays.js"),o=n("./node_modules/lodash/_equalByTag.js"),i=n("./node_modules/lodash/_equalObjects.js"),a=n("./node_modules/lodash/_getTag.js"),u=n("./node_modules/lodash/isArray.js"),c=n("./node_modules/lodash/isBuffer.js"),d=n("./node_modules/lodash/isTypedArray.js"),l="[object Arguments]",h="[object Array]",f="[object Object]",m=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,p,g,v){var _=u(t),y=u(e),b=_?h:a(t),x=y?h:a(e),w=(b=b==l?f:b)==f,j=(x=x==l?f:x)==f,E=b==x;if(E&&c(t)){if(!c(e))return!1;_=!0,w=!1}if(E&&!w)return v||(v=new s),_||d(t)?r(t,e,n,p,g,v):o(t,e,b,n,p,g,v);if(!(1&n)){var A=w&&m.call(t,"__wrapped__"),T=j&&m.call(e,"__wrapped__");if(A||T){var S=A?t.value():t,M=T?e.value():e;return v||(v=new s),g(S,M,n,p,v)}}return!!E&&(v||(v=new s),i(t,e,n,p,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Stack.js"),r=n("./node_modules/lodash/_baseIsEqual.js");t.exports=function(t,e,n,o){var i=n.length,a=i,u=!o;if(null==t)return!a;for(t=Object(t);i--;){var c=n[i];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<a;){var d=(c=n[i])[0],l=t[d],h=c[1];if(u&&c[2]){if(void 0===l&&!(d in t))return!1}else{var f=new s;if(o)var m=o(l,h,d,t,e,f);if(!(void 0===m?r(h,l,3,o,f):m))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(t,e,n)=>{var s=n("./node_modules/lodash/isFunction.js"),r=n("./node_modules/lodash/_isMasked.js"),o=n("./node_modules/lodash/isObject.js"),i=n("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,d=u.toString,l=c.hasOwnProperty,h=RegExp("^"+d.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||r(t))&&(s(t)?h:a).test(i(t))}},"./node_modules/lodash/_baseIsTypedArray.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGetTag.js"),r=n("./node_modules/lodash/isLength.js"),o=n("./node_modules/lodash/isObjectLike.js"),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&r(t.length)&&!!i[s(t)]}},"./node_modules/lodash/_baseIteratee.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseMatches.js"),r=n("./node_modules/lodash/_baseMatchesProperty.js"),o=n("./node_modules/lodash/identity.js"),i=n("./node_modules/lodash/isArray.js"),a=n("./node_modules/lodash/property.js");t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?i(t)?r(t[0],t[1]):s(t):a(t)}},"./node_modules/lodash/_baseKeys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_isPrototype.js"),r=n("./node_modules/lodash/_nativeKeys.js"),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!s(t))return r(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},"./node_modules/lodash/_baseMap.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseEach.js"),r=n("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){var n=-1,o=r(t)?Array(t.length):[];return s(t,(function(t,s,r){o[++n]=e(t,s,r)})),o}},"./node_modules/lodash/_baseMatches.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsMatch.js"),r=n("./node_modules/lodash/_getMatchData.js"),o=n("./node_modules/lodash/_matchesStrictComparable.js");t.exports=function(t){var e=r(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||s(n,t,e)}}},"./node_modules/lodash/_baseMatchesProperty.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsEqual.js"),r=n("./node_modules/lodash/get.js"),o=n("./node_modules/lodash/hasIn.js"),i=n("./node_modules/lodash/_isKey.js"),a=n("./node_modules/lodash/_isStrictComparable.js"),u=n("./node_modules/lodash/_matchesStrictComparable.js"),c=n("./node_modules/lodash/_toKey.js");t.exports=function(t,e){return i(t)&&a(e)?u(c(t),e):function(n){var i=r(n,t);return void 0===i&&i===e?o(n,t):s(e,i,3)}}},"./node_modules/lodash/_baseProperty.js":t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},"./node_modules/lodash/_basePropertyDeep.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGet.js");t.exports=function(t){return function(e){return s(e,t)}}},"./node_modules/lodash/_baseTimes.js":t=>{t.exports=function(t,e){for(var n=-1,s=Array(t);++n<t;)s[n]=e(n);return s}},"./node_modules/lodash/_baseToString.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Symbol.js"),r=n("./node_modules/lodash/_arrayMap.js"),o=n("./node_modules/lodash/isArray.js"),i=n("./node_modules/lodash/isSymbol.js"),a=s?s.prototype:void 0,u=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return r(e,t)+"";if(i(e))return u?u.call(e):"";var n=e+"";return"0"==n&&1/e==-Infinity?"-0":n}},"./node_modules/lodash/_baseUnary.js":t=>{t.exports=function(t){return function(e){return t(e)}}},"./node_modules/lodash/_cacheHas.js":t=>{t.exports=function(t,e){return t.has(e)}},"./node_modules/lodash/_castFunction.js":(t,e,n)=>{var s=n("./node_modules/lodash/identity.js");t.exports=function(t){return"function"==typeof t?t:s}},"./node_modules/lodash/_castPath.js":(t,e,n)=>{var s=n("./node_modules/lodash/isArray.js"),r=n("./node_modules/lodash/_isKey.js"),o=n("./node_modules/lodash/_stringToPath.js"),i=n("./node_modules/lodash/toString.js");t.exports=function(t,e){return s(t)?t:r(t,e)?[t]:o(i(t))}},"./node_modules/lodash/_coreJsData.js":(t,e,n)=>{var s=n("./node_modules/lodash/_root.js")["__core-js_shared__"];t.exports=s},"./node_modules/lodash/_createBaseEach.js":(t,e,n)=>{var s=n("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){return function(n,r){if(null==n)return n;if(!s(n))return t(n,r);for(var o=n.length,i=e?o:-1,a=Object(n);(e?i--:++i<o)&&!1!==r(a[i],i,a););return n}}},"./node_modules/lodash/_createBaseFor.js":t=>{t.exports=function(t){return function(e,n,s){for(var r=-1,o=Object(e),i=s(e),a=i.length;a--;){var u=i[t?a:++r];if(!1===n(o[u],u,o))break}return e}}},"./node_modules/lodash/_equalArrays.js":(t,e,n)=>{var s=n("./node_modules/lodash/_SetCache.js"),r=n("./node_modules/lodash/_arraySome.js"),o=n("./node_modules/lodash/_cacheHas.js");t.exports=function(t,e,n,i,a,u){var c=1&n,d=t.length,l=e.length;if(d!=l&&!(c&&l>d))return!1;var h=u.get(t),f=u.get(e);if(h&&f)return h==e&&f==t;var m=-1,p=!0,g=2&n?new s:void 0;for(u.set(t,e),u.set(e,t);++m<d;){var v=t[m],_=e[m];if(i)var y=c?i(_,v,m,e,t,u):i(v,_,m,t,e,u);if(void 0!==y){if(y)continue;p=!1;break}if(g){if(!r(e,(function(t,e){if(!o(g,e)&&(v===t||a(v,t,n,i,u)))return g.push(e)}))){p=!1;break}}else if(v!==_&&!a(v,_,n,i,u)){p=!1;break}}return u.delete(t),u.delete(e),p}},"./node_modules/lodash/_equalByTag.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Symbol.js"),r=n("./node_modules/lodash/_Uint8Array.js"),o=n("./node_modules/lodash/eq.js"),i=n("./node_modules/lodash/_equalArrays.js"),a=n("./node_modules/lodash/_mapToArray.js"),u=n("./node_modules/lodash/_setToArray.js"),c=s?s.prototype:void 0,d=c?c.valueOf:void 0;t.exports=function(t,e,n,s,c,l,h){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!l(new r(t),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var f=a;case"[object Set]":var m=1&s;if(f||(f=u),t.size!=e.size&&!m)return!1;var p=h.get(t);if(p)return p==e;s|=2,h.set(t,e);var g=i(f(t),f(e),s,c,l,h);return h.delete(t),g;case"[object Symbol]":if(d)return d.call(t)==d.call(e)}return!1}},"./node_modules/lodash/_equalObjects.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getAllKeys.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,i,a){var u=1&n,c=s(t),d=c.length;if(d!=s(e).length&&!u)return!1;for(var l=d;l--;){var h=c[l];if(!(u?h in e:r.call(e,h)))return!1}var f=a.get(t),m=a.get(e);if(f&&m)return f==e&&m==t;var p=!0;a.set(t,e),a.set(e,t);for(var g=u;++l<d;){var v=t[h=c[l]],_=e[h];if(o)var y=u?o(_,v,h,e,t,a):o(v,_,h,t,e,a);if(!(void 0===y?v===_||i(v,_,n,o,a):y)){p=!1;break}g||(g="constructor"==h)}if(p&&!g){var b=t.constructor,x=e.constructor;b==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(p=!1)}return a.delete(t),a.delete(e),p}},"./node_modules/lodash/_freeGlobal.js":(t,e,n)=>{var s="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=s},"./node_modules/lodash/_getAllKeys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGetAllKeys.js"),r=n("./node_modules/lodash/_getSymbols.js"),o=n("./node_modules/lodash/keys.js");t.exports=function(t){return s(t,o,r)}},"./node_modules/lodash/_getMapData.js":(t,e,n)=>{var s=n("./node_modules/lodash/_isKeyable.js");t.exports=function(t,e){var n=t.__data__;return s(e)?n["string"==typeof e?"string":"hash"]:n.map}},"./node_modules/lodash/_getMatchData.js":(t,e,n)=>{var s=n("./node_modules/lodash/_isStrictComparable.js"),r=n("./node_modules/lodash/keys.js");t.exports=function(t){for(var e=r(t),n=e.length;n--;){var o=e[n],i=t[o];e[n]=[o,i,s(i)]}return e}},"./node_modules/lodash/_getNative.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsNative.js"),r=n("./node_modules/lodash/_getValue.js");t.exports=function(t,e){var n=r(t,e);return s(n)?n:void 0}},"./node_modules/lodash/_getRawTag.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Symbol.js"),r=Object.prototype,o=r.hasOwnProperty,i=r.toString,a=s?s.toStringTag:void 0;t.exports=function(t){var e=o.call(t,a),n=t[a];try{t[a]=void 0;var s=!0}catch(t){}var r=i.call(t);return s&&(e?t[a]=n:delete t[a]),r}},"./node_modules/lodash/_getSymbols.js":(t,e,n)=>{var s=n("./node_modules/lodash/_arrayFilter.js"),r=n("./node_modules/lodash/stubArray.js"),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,a=i?function(t){return null==t?[]:(t=Object(t),s(i(t),(function(e){return o.call(t,e)})))}:r;t.exports=a},"./node_modules/lodash/_getTag.js":(t,e,n)=>{var s=n("./node_modules/lodash/_DataView.js"),r=n("./node_modules/lodash/_Map.js"),o=n("./node_modules/lodash/_Promise.js"),i=n("./node_modules/lodash/_Set.js"),a=n("./node_modules/lodash/_WeakMap.js"),u=n("./node_modules/lodash/_baseGetTag.js"),c=n("./node_modules/lodash/_toSource.js"),d="[object Map]",l="[object Promise]",h="[object Set]",f="[object WeakMap]",m="[object DataView]",p=c(s),g=c(r),v=c(o),_=c(i),y=c(a),b=u;(s&&b(new s(new ArrayBuffer(1)))!=m||r&&b(new r)!=d||o&&b(o.resolve())!=l||i&&b(new i)!=h||a&&b(new a)!=f)&&(b=function(t){var e=u(t),n="[object Object]"==e?t.constructor:void 0,s=n?c(n):"";if(s)switch(s){case p:return m;case g:return d;case v:return l;case _:return h;case y:return f}return e}),t.exports=b},"./node_modules/lodash/_getValue.js":t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},"./node_modules/lodash/_hasPath.js":(t,e,n)=>{var s=n("./node_modules/lodash/_castPath.js"),r=n("./node_modules/lodash/isArguments.js"),o=n("./node_modules/lodash/isArray.js"),i=n("./node_modules/lodash/_isIndex.js"),a=n("./node_modules/lodash/isLength.js"),u=n("./node_modules/lodash/_toKey.js");t.exports=function(t,e,n){for(var c=-1,d=(e=s(e,t)).length,l=!1;++c<d;){var h=u(e[c]);if(!(l=null!=t&&n(t,h)))break;t=t[h]}return l||++c!=d?l:!!(d=null==t?0:t.length)&&a(d)&&i(h,d)&&(o(t)||r(t))}},"./node_modules/lodash/_hashClear.js":(t,e,n)=>{var s=n("./node_modules/lodash/_nativeCreate.js");t.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},"./node_modules/lodash/_hashGet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_nativeCreate.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(s){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return r.call(e,t)?e[t]:void 0}},"./node_modules/lodash/_hashHas.js":(t,e,n)=>{var s=n("./node_modules/lodash/_nativeCreate.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return s?void 0!==e[t]:r.call(e,t)}},"./node_modules/lodash/_hashSet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_nativeCreate.js");t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=s&&void 0===e?"__lodash_hash_undefined__":e,this}},"./node_modules/lodash/_isIndex.js":t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var s=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==s||"symbol"!=s&&e.test(t))&&t>-1&&t%1==0&&t<n}},"./node_modules/lodash/_isKey.js":(t,e,n)=>{var s=n("./node_modules/lodash/isArray.js"),r=n("./node_modules/lodash/isSymbol.js"),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(s(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!r(t))||(i.test(t)||!o.test(t)||null!=e&&t in Object(e))}},"./node_modules/lodash/_isKeyable.js":t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},"./node_modules/lodash/_isMasked.js":(t,e,n)=>{var s,r=n("./node_modules/lodash/_coreJsData.js"),o=(s=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";t.exports=function(t){return!!o&&o in t}},"./node_modules/lodash/_isPrototype.js":t=>{var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},"./node_modules/lodash/_isStrictComparable.js":(t,e,n)=>{var s=n("./node_modules/lodash/isObject.js");t.exports=function(t){return t==t&&!s(t)}},"./node_modules/lodash/_listCacheClear.js":t=>{t.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(t,e,n)=>{var s=n("./node_modules/lodash/_assocIndexOf.js"),r=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=s(e,t);return!(n<0)&&(n==e.length-1?e.pop():r.call(e,n,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){var e=this.__data__,n=s(e,t);return n<0?void 0:e[n][1]}},"./node_modules/lodash/_listCacheHas.js":(t,e,n)=>{var s=n("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){return s(this.__data__,t)>-1}},"./node_modules/lodash/_listCacheSet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t,e){var n=this.__data__,r=s(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}},"./node_modules/lodash/_mapCacheClear.js":(t,e,n)=>{var s=n("./node_modules/lodash/_Hash.js"),r=n("./node_modules/lodash/_ListCache.js"),o=n("./node_modules/lodash/_Map.js");t.exports=function(){this.size=0,this.__data__={hash:new s,map:new(o||r),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getMapData.js");t.exports=function(t){var e=s(this,t).delete(t);return this.size-=e?1:0,e}},"./node_modules/lodash/_mapCacheGet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getMapData.js");t.exports=function(t){return s(this,t).get(t)}},"./node_modules/lodash/_mapCacheHas.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getMapData.js");t.exports=function(t){return s(this,t).has(t)}},"./node_modules/lodash/_mapCacheSet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getMapData.js");t.exports=function(t,e){var n=s(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}},"./node_modules/lodash/_mapToArray.js":t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,s){n[++e]=[s,t]})),n}},"./node_modules/lodash/_matchesStrictComparable.js":t=>{t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},"./node_modules/lodash/_memoizeCapped.js":(t,e,n)=>{var s=n("./node_modules/lodash/memoize.js");t.exports=function(t){var e=s(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},"./node_modules/lodash/_nativeCreate.js":(t,e,n)=>{var s=n("./node_modules/lodash/_getNative.js")(Object,"create");t.exports=s},"./node_modules/lodash/_nativeKeys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_overArg.js")(Object.keys,Object);t.exports=s},"./node_modules/lodash/_nodeUtil.js":(t,e,n)=>{t=n.nmd(t);var s=n("./node_modules/lodash/_freeGlobal.js"),r=e&&!e.nodeType&&e,o=r&&t&&!t.nodeType&&t,i=o&&o.exports===r&&s.process,a=function(){try{var t=o&&o.require&&o.require("util").types;return t||i&&i.binding&&i.binding("util")}catch(t){}}();t.exports=a},"./node_modules/lodash/_objectToString.js":t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},"./node_modules/lodash/_overArg.js":t=>{t.exports=function(t,e){return function(n){return t(e(n))}}},"./node_modules/lodash/_root.js":(t,e,n)=>{var s=n("./node_modules/lodash/_freeGlobal.js"),r="object"==typeof self&&self&&self.Object===Object&&self,o=s||r||Function("return this")();t.exports=o},"./node_modules/lodash/_setCacheAdd.js":t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_setToArray.js":t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},"./node_modules/lodash/_stackClear.js":(t,e,n)=>{var s=n("./node_modules/lodash/_ListCache.js");t.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":t=>{t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},"./node_modules/lodash/_stackGet.js":t=>{t.exports=function(t){return this.__data__.get(t)}},"./node_modules/lodash/_stackHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_stackSet.js":(t,e,n)=>{var s=n("./node_modules/lodash/_ListCache.js"),r=n("./node_modules/lodash/_Map.js"),o=n("./node_modules/lodash/_MapCache.js");t.exports=function(t,e){var n=this.__data__;if(n instanceof s){var i=n.__data__;if(!r||i.length<199)return i.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(i)}return n.set(t,e),this.size=n.size,this}},"./node_modules/lodash/_stringToPath.js":(t,e,n)=>{var s=n("./node_modules/lodash/_memoizeCapped.js"),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=s((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(r,(function(t,n,s,r){e.push(s?r.replace(o,"$1"):n||t)})),e}));t.exports=i},"./node_modules/lodash/_toKey.js":(t,e,n)=>{var s=n("./node_modules/lodash/isSymbol.js");t.exports=function(t){if("string"==typeof t||s(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},"./node_modules/lodash/_toSource.js":t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},"./node_modules/lodash/each.js":(t,e,n)=>{t.exports=n("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},"./node_modules/lodash/forEach.js":(t,e,n)=>{var s=n("./node_modules/lodash/_arrayEach.js"),r=n("./node_modules/lodash/_baseEach.js"),o=n("./node_modules/lodash/_castFunction.js"),i=n("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(i(t)?s:r)(t,o(e))}},"./node_modules/lodash/get.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGet.js");t.exports=function(t,e,n){var r=null==t?void 0:s(t,e);return void 0===r?n:r}},"./node_modules/lodash/hasIn.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseHasIn.js"),r=n("./node_modules/lodash/_hasPath.js");t.exports=function(t,e){return null!=t&&r(t,e,s)}},"./node_modules/lodash/identity.js":t=>{t.exports=function(t){return t}},"./node_modules/lodash/isArguments.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsArguments.js"),r=n("./node_modules/lodash/isObjectLike.js"),o=Object.prototype,i=o.hasOwnProperty,a=o.propertyIsEnumerable,u=s(function(){return arguments}())?s:function(t){return r(t)&&i.call(t,"callee")&&!a.call(t,"callee")};t.exports=u},"./node_modules/lodash/isArray.js":t=>{var e=Array.isArray;t.exports=e},"./node_modules/lodash/isArrayLike.js":(t,e,n)=>{var s=n("./node_modules/lodash/isFunction.js"),r=n("./node_modules/lodash/isLength.js");t.exports=function(t){return null!=t&&r(t.length)&&!s(t)}},"./node_modules/lodash/isBuffer.js":(t,e,n)=>{t=n.nmd(t);var s=n("./node_modules/lodash/_root.js"),r=n("./node_modules/lodash/stubFalse.js"),o=e&&!e.nodeType&&e,i=o&&t&&!t.nodeType&&t,a=i&&i.exports===o?s.Buffer:void 0,u=(a?a.isBuffer:void 0)||r;t.exports=u},"./node_modules/lodash/isFunction.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGetTag.js"),r=n("./node_modules/lodash/isObject.js");t.exports=function(t){if(!r(t))return!1;var e=s(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},"./node_modules/lodash/isLength.js":t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},"./node_modules/lodash/isObject.js":t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},"./node_modules/lodash/isObjectLike.js":t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},"./node_modules/lodash/isSymbol.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseGetTag.js"),r=n("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return"symbol"==typeof t||r(t)&&"[object Symbol]"==s(t)}},"./node_modules/lodash/isTypedArray.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseIsTypedArray.js"),r=n("./node_modules/lodash/_baseUnary.js"),o=n("./node_modules/lodash/_nodeUtil.js"),i=o&&o.isTypedArray,a=i?r(i):s;t.exports=a},"./node_modules/lodash/keys.js":(t,e,n)=>{var s=n("./node_modules/lodash/_arrayLikeKeys.js"),r=n("./node_modules/lodash/_baseKeys.js"),o=n("./node_modules/lodash/isArrayLike.js");t.exports=function(t){return o(t)?s(t):r(t)}},"./node_modules/lodash/map.js":(t,e,n)=>{var s=n("./node_modules/lodash/_arrayMap.js"),r=n("./node_modules/lodash/_baseIteratee.js"),o=n("./node_modules/lodash/_baseMap.js"),i=n("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(i(t)?s:o)(t,r(e,3))}},"./node_modules/lodash/memoize.js":(t,e,n)=>{var s=n("./node_modules/lodash/_MapCache.js");function r(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var s=arguments,r=e?e.apply(this,s):s[0],o=n.cache;if(o.has(r))return o.get(r);var i=t.apply(this,s);return n.cache=o.set(r,i)||o,i};return n.cache=new(r.Cache||s),n}r.Cache=s,t.exports=r},"./node_modules/lodash/property.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseProperty.js"),r=n("./node_modules/lodash/_basePropertyDeep.js"),o=n("./node_modules/lodash/_isKey.js"),i=n("./node_modules/lodash/_toKey.js");t.exports=function(t){return o(t)?s(i(t)):r(t)}},"./node_modules/lodash/stubArray.js":t=>{t.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":t=>{t.exports=function(){return!1}},"./node_modules/lodash/toString.js":(t,e,n)=>{var s=n("./node_modules/lodash/_baseToString.js");t.exports=function(t){return null==t?"":s(t)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(t,e,n)=>{"use strict";var s=n("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),r=Object.create(null),o="undefined"==typeof document,i=Array.prototype.forEach;function a(){}function u(t,e){if(!e){if(!t.href)return;e=t.href.split("?")[0]}if(l(e)&&!1!==t.isLoaded&&e&&e.indexOf(".css")>-1){t.visited=!0;var n=t.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,t.parentNode.removeChild(t))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,t.parentNode.removeChild(t))})),n.href="".concat(e,"?").concat(Date.now()),t.nextSibling?t.parentNode.insertBefore(n,t.nextSibling):t.parentNode.appendChild(n)}}function c(t){if(!t)return!1;var e=document.querySelectorAll("link"),n=!1;return i.call(e,(function(e){if(e.href){var r=function(t,e){var n;return t=s(t),e.some((function(s){t.indexOf(e)>-1&&(n=s)})),n}(e.href,t);l(r)&&!0!==e.visited&&r&&(u(e,r),n=!0)}})),n}function d(){var t=document.querySelectorAll("link");i.call(t,(function(t){!0!==t.visited&&u(t)}))}function l(t){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(t)}t.exports=function(t,e){if(o)return console.log("no window.document found, will not HMR CSS"),a;var n,i,u,l=function(t){var e=r[t];if(!e){if(document.currentScript)e=document.currentScript.src;else{var n=document.getElementsByTagName("script"),o=n[n.length-1];o&&(e=o.src)}r[t]=e}return function(t){if(!e)return null;var n=e.split(/([^\\/]+)\.js$/),r=n&&n[1];return r&&t?t.split(",").map((function(t){var n=new RegExp("".concat(r,"\\.js$"),"g");return s(e.replace(n,"".concat(t.replace(/{fileName}/g,r),".css")))})):[e.replace(".js",".css")]}}(t);return n=function(){var t=l(e.filename),n=c(t);if(e.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();n?console.log("[HMR] css reload %s",t.join(" ")):(console.log("[HMR] Reload all css"),d())},i=50,u=0,function(){var t=this,e=arguments,s=function(){return n.apply(t,e)};clearTimeout(u),u=setTimeout(s,i)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":t=>{"use strict";t.exports=function(t){if(t=t.trim(),/^data:/i.test(t))return t;var e=-1!==t.indexOf("//")?t.split("//")[0]+"//":"",n=t.replace(new RegExp(e,"i"),"").split("/"),s=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",e+s+n.reduce((function(t,e){switch(e){case"..":t.pop();break;case".":break;default:t.push(e)}return t}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(t,e,n)=>{t.exports=n("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),n={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=n},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,n,s,r,o,i,a,u,c,d,l,h,f,m,p,g=!1;function v(){if(!g){g=!0;var t=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),_=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(h=/\b(iPhone|iP[ao]d)/.exec(t),f=/\b(iP[ao]d)/.exec(t),d=/Android/i.exec(t),m=/FBAN\/\w+;/i.exec(t),p=/Mobile/i.exec(t),l=!!/Win64/.exec(t),v){(e=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(t);i=y?parseFloat(y[1])+4:e,n=v[2]?parseFloat(v[2]):NaN,s=v[3]?parseFloat(v[3]):NaN,(r=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(t),o=v&&v[1]?parseFloat(v[1]):NaN):o=NaN}else e=n=s=o=r=NaN;if(_){if(_[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;u=!!_[2],c=!!_[3]}else a=u=c=!1}}var _={ie:function(){return v()||e},ieCompatibilityMode:function(){return v()||i>e},ie64:function(){return _.ie()&&l},firefox:function(){return v()||n},opera:function(){return v()||s},webkit:function(){return v()||r},safari:function(){return _.webkit()},chrome:function(){return v()||o},windows:function(){return v()||u},osx:function(){return v()||a},linux:function(){return v()||c},iphone:function(){return v()||h},mobile:function(){return v()||h||f||d||p},nativeApp:function(){return v()||m},android:function(){return v()||d},ipad:function(){return v()||f}};t.exports=_},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,n)=>{"use strict";var s,r=n("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");r.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!r.canUseDOM||e&&!("addEventListener"in document))return!1;var n="on"+t,o=n in document;if(!o){var i=document.createElement("div");i.setAttribute(n,"return;"),o="function"==typeof i[n]}return!o&&s&&"wheel"===t&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,n)=>{"use strict";var s=n("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),r=n("./node_modules/normalize-wheel/src/isEventSupported.js");function o(t){var e=0,n=0,s=0,r=0;return"detail"in t&&(n=t.detail),"wheelDelta"in t&&(n=-t.wheelDelta/120),"wheelDeltaY"in t&&(n=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=n,n=0),s=10*e,r=10*n,"deltaY"in t&&(r=t.deltaY),"deltaX"in t&&(s=t.deltaX),(s||r)&&t.deltaMode&&(1==t.deltaMode?(s*=40,r*=40):(s*=800,r*=800)),s&&!e&&(e=s<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:e,spinY:n,pixelX:s,pixelY:r}}o.getEventType=function(){return s.firefox()?"DOMMouseScroll":r("wheel")?"wheel":"mousewheel"},t.exports=o},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},n=["O","ms","Moz","Webkit"],s=/([A-Z])/g,r={};function o(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var s=t.charAt(0).toUpperCase()+t.slice(1),r=n.length;r--;){var o=n[r]+s;if(void 0!==e[o])return o}return t}t.exports=function(t){return t in r?r[t]:r[t]=o(t)},t.exports.dash=function(t){return t=o(t),s.test(t)&&(t="-"+t.replace(s,"-$1"),s.lastIndex=0),t.toLowerCase()}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>o});var s=n("./node_modules/webpack-dev-server/client/utils/log.js");function r(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.client=new WebSocket(e),this.client.onerror=function(t){s.log.error(t)}}var e,n,o;return e=t,(n=[{key:"onOpen",value:function(t){this.client.onopen=t}},{key:"onClose",value:function(t){this.client.onclose=t}},{key:"onMessage",value:function(t){this.client.onmessage=function(e){t(e.data)}}}])&&r(e.prototype,n),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(t,e,n)=>{"use strict";n.r(e);var s=n("./node_modules/webpack/hot/log.js"),r=n.n(s),o=n("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),i=n("./node_modules/webpack-dev-server/client/utils/parseURL.js"),a=n("./node_modules/webpack-dev-server/client/socket.js"),u=n("./node_modules/webpack-dev-server/client/overlay.js"),c=n("./node_modules/webpack-dev-server/client/utils/log.js"),d=n("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=n("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=n("./node_modules/webpack-dev-server/client/utils/createSocketURL.js");function f(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,s)}return n}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var p={isUnloading:!1,currentHash:n.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},v=(0,i.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),_={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1};if("true"===v.hot&&(g.hot=!0,_["Hot Module Replacement"]=!0),"true"===v["live-reload"]&&(g.liveReload=!0,_["Live Reloading"]=!0),"true"===v.progress&&(g.progress=!0,_.Progress=!0),v.overlay){try{g.overlay=JSON.parse(v.overlay)}catch(t){c.log.error("Error parsing overlay options from resource query:",t)}"object"==typeof g.overlay&&(g.overlay=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?f(Object(n),!0).forEach((function(e){m(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({errors:!0,warnings:!0},g.overlay)),_.Overlay=!0}function y(t){r().setLogLevel("verbose"===t||"log"===t?"info":t),(0,c.setLogLevel)(t)}v.logging&&(g.logging=v.logging),void 0!==v.reconnect&&(g.reconnect=Number(v.reconnect)),g.logging&&y(g.logging),(0,c.logEnabledFeatures)(_),self.addEventListener("beforeunload",(function(){p.isUnloading=!0}));var b={hot:function(){"false"!==v.hot&&(g.hot=!0)},liveReload:function(){"false"!==v["live-reload"]&&(g.liveReload=!0)},invalid:function(){c.log.info("App updated. Recompiling..."),g.overlay&&(0,u.hide)(),(0,d.default)("Invalid")},hash:function(t){p.previousHash=p.currentHash,p.currentHash=t},logging:y,overlay:function(t){"undefined"!=typeof document&&(g.overlay=t)},reconnect:function(t){"false"!==v.reconnect&&(g.reconnect=t)},progress:function(t){g.progress=t},"progress-update":function(t){g.progress&&c.log.info("".concat(t.pluginName?"[".concat(t.pluginName,"] "):"").concat(t.percent,"% - ").concat(t.msg,".")),(0,d.default)("Progress",t)},"still-ok":function(){c.log.info("Nothing changed."),g.overlay&&(0,u.hide)(),(0,d.default)("StillOk")},ok:function(){(0,d.default)("Ok"),g.overlay&&(0,u.hide)(),(0,l.default)(g,p)},"content-changed":function(t){c.log.info("".concat(t?'"'.concat(t,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(t){c.log.info("".concat(t?'"'.concat(t,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(t,e){c.log.warn("Warnings while compiling.");var n=t.map((function(t){var e=(0,u.formatProblem)("warning",t),n=e.header,s=e.body;return"".concat(n,"\n").concat((0,o.default)(s))}));(0,d.default)("Warnings",n);for(var s=0;s<n.length;s++)c.log.warn(n[s]);if("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings){var r="object"==typeof g.overlay&&g.overlay.trustedTypesPolicyName;(0,u.show)("warning",t,r||null)}e&&e.preventReloading||(0,l.default)(g,p)},errors:function(t){c.log.error("Errors while compiling. Reload prevented.");var e=t.map((function(t){var e=(0,u.formatProblem)("error",t),n=e.header,s=e.body;return"".concat(n,"\n").concat((0,o.default)(s))}));(0,d.default)("Errors",e);for(var n=0;n<e.length;n++)c.log.error(e[n]);if("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors){var s="object"==typeof g.overlay&&g.overlay.trustedTypesPolicyName;(0,u.show)("error",t,s||null)}},error:function(t){c.log.error(t)},close:function(){c.log.info("Disconnected!"),g.overlay&&(0,u.hide)(),(0,d.default)("Close")}},x=(0,h.default)(v);(0,a.default)(x,b,g.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(t,e)=>{!function(){"use strict";var t={"./client-src/modules/logger/SyncBailHookFake.js":function(t){t.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(t,e){function n(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(t){return t})&&null!=t[("undefined"!=typeof Symbol?Symbol:function(t){return t}).iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,s=new Array(e);n<e;n++)s[n]=t[n];return s}function r(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var o=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});e.LogType=o;var i=("undefined"!=typeof Symbol?Symbol:function(t){return t})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(t){return t})("webpack logger times"),u=("undefined"!=typeof Symbol?Symbol:function(t){return t})("webpack logger aggregated times"),c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this[i]=e,this.getChildLogger=n}var e,s,c;return e=t,s=[{key:"error",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.error,e)}},{key:"warn",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.warn,e)}},{key:"info",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.info,e)}},{key:"log",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.log,e)}},{key:"debug",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.debug,e)}},{key:"assert",value:function(t){if(!t){for(var e=arguments.length,n=new Array(e>1?e-1:0),s=1;s<e;s++)n[s-1]=arguments[s];this[i](o.error,n)}}},{key:"trace",value:function(){this[i](o.trace,["Trace"])}},{key:"clear",value:function(){this[i](o.clear)}},{key:"status",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.status,e)}},{key:"group",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.group,e)}},{key:"groupCollapsed",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.groupCollapsed,e)}},{key:"groupEnd",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this[i](o.groupEnd,e)}},{key:"profile",value:function(t){this[i](o.profile,[t])}},{key:"profileEnd",value:function(t){this[i](o.profileEnd,[t])}},{key:"time",value:function(t){this[a]=this[a]||new Map,this[a].set(t,process.hrtime())}},{key:"timeLog",value:function(t){var e=this[a]&&this[a].get(t);if(!e)throw new Error("No such label '".concat(t,"' for WebpackLogger.timeLog()"));var s=process.hrtime(e);this[i](o.time,[t].concat(n(s)))}},{key:"timeEnd",value:function(t){var e=this[a]&&this[a].get(t);if(!e)throw new Error("No such label '".concat(t,"' for WebpackLogger.timeEnd()"));var s=process.hrtime(e);this[a].delete(t),this[i](o.time,[t].concat(n(s)))}},{key:"timeAggregate",value:function(t){var e=this[a]&&this[a].get(t);if(!e)throw new Error("No such label '".concat(t,"' for WebpackLogger.timeAggregate()"));var n=process.hrtime(e);this[a].delete(t),this[u]=this[u]||new Map;var s=this[u].get(t);void 0!==s&&(n[1]+s[1]>1e9?(n[0]+=s[0]+1,n[1]=n[1]-1e9+s[1]):(n[0]+=s[0],n[1]+=s[1])),this[u].set(t,n)}},{key:"timeAggregateEnd",value:function(t){if(void 0!==this[u]){var e=this[u].get(t);void 0!==e&&(this[u].delete(t),this[i](o.time,[t].concat(n(e))))}}}],s&&r(e.prototype,s),c&&r(e,c),Object.defineProperty(e,"prototype",{writable:!1}),t}();e.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(t,e,n){function s(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(t){return t})&&null!=t[("undefined"!=typeof Symbol?Symbol:function(t){return t}).iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,s=new Array(e);n<e;n++)s[n]=t[n];return s}var o=n("./node_modules/webpack/lib/logging/Logger.js").LogType,i=function(t){if("string"==typeof t){var e=new RegExp("[\\\\/]".concat(t.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(t){return e.test(t)}}return t&&"object"==typeof t&&"function"==typeof t.test?function(e){return t.test(e)}:"function"==typeof t?t:"boolean"==typeof t?function(){return t}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};t.exports=function(t){var e=t.level,n=void 0===e?"info":e,r=t.debug,u=void 0!==r&&r,c=t.console,d="boolean"==typeof u?[function(){return u}]:[].concat(u).map(i),l=a["".concat(n)]||0;return function(t,e,n){var r=function(){return Array.isArray(n)?n.length>0&&"string"==typeof n[0]?["[".concat(t,"] ").concat(n[0])].concat(s(n.slice(1))):["[".concat(t,"]")].concat(s(n)):[]},i=d.some((function(e){return e(t)}));switch(e){case o.debug:if(!i)return;"function"==typeof c.debug?c.debug.apply(c,s(r())):c.log.apply(c,s(r()));break;case o.log:if(!i&&l>a.log)return;c.log.apply(c,s(r()));break;case o.info:if(!i&&l>a.info)return;c.info.apply(c,s(r()));break;case o.warn:if(!i&&l>a.warn)return;c.warn.apply(c,s(r()));break;case o.error:if(!i&&l>a.error)return;c.error.apply(c,s(r()));break;case o.trace:if(!i)return;c.trace();break;case o.groupCollapsed:if(!i&&l>a.log)return;if(!i&&l>a.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,s(r())):c.log.apply(c,s(r()));break}case o.group:if(!i&&l>a.log)return;"function"==typeof c.group?c.group.apply(c,s(r())):c.log.apply(c,s(r()));break;case o.groupEnd:if(!i&&l>a.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case o.time:if(!i&&l>a.log)return;var u=1e3*n[1]+n[2]/1e6,h="[".concat(t,"] ").concat(n[0],": ").concat(u," ms");"function"==typeof c.logTime?c.logTime(h):c.log(h);break;case o.profile:"function"==typeof c.profile&&c.profile.apply(c,s(r()));break;case o.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,s(r()));break;case o.clear:if(!i&&l>a.log)return;"function"==typeof c.clear&&c.clear();break;case o.status:if(!i&&l>a.info)return;"function"==typeof c.status?0===n.length?c.status():c.status.apply(c,s(r())):0!==n.length&&c.info.apply(c,s(r()));break;default:throw new Error("Unexpected LogType ".concat(e))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(t,e,n){function s(){return s=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},s.apply(this,arguments)}var r=n("./client-src/modules/logger/SyncBailHookFake.js"),o=n("./node_modules/webpack/lib/logging/Logger.js").Logger,i=n("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},u=i(a);e.getLogger=function(t){return new o((function(n,s){void 0===e.hooks.log.call(t,n,s)&&u(t,n,s)}),(function(n){return e.getLogger("".concat(t,"/").concat(n))}))},e.configureDefaultLogger=function(t){s(a,t),u=i(a)},e.hooks={log:new r(["origin","type","args"])}}},n={};function s(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,s),o.exports}s.d=function(t,e){for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){s.r(r),s.d(r,{default:function(){return t}});var t=s("./node_modules/webpack/lib/logging/runtime.js")}();var o=e;for(var i in r)o[i]=r[i];r.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{formatProblem:()=>f,hide:()=>h,show:()=>m});var s,r,o,i=n("./node_modules/ansi-html-community/index.js"),a=n.n(i),u=n("./node_modules/html-entities/lib/index.js"),c={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},d=[];function l(t,e){r?t(r):(d.push(t),s||function(t){window.trustedTypes&&(o=window.trustedTypes.createPolicy(t||"webpack-dev-server#overlay",{createHTML:function(t){return t}})),(s=document.createElement("iframe")).id="webpack-dev-server-client-overlay",s.src="about:blank",s.style.position="fixed",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.border="none",s.style.zIndex=9999999999,s.onload=function(){(r=s.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",r.style.position="fixed",r.style.boxSizing="border-box",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.backgroundColor="rgba(0, 0, 0, 0.85)",r.style.color="#E8E8E8",r.style.fontFamily="Menlo, Consolas, monospace",r.style.fontSize="large",r.style.padding="2rem",r.style.lineHeight="1.2",r.style.whiteSpace="pre-wrap",r.style.overflow="auto";var t=document.createElement("span");t.innerText="Compiled with problems:";var e=document.createElement("button");e.innerText="X",e.style.background="transparent",e.style.border="none",e.style.fontSize="20px",e.style.fontWeight="bold",e.style.color="white",e.style.cursor="pointer",e.style.cssFloat="right",e.style.styleFloat="right",e.addEventListener("click",(function(){h()})),r.appendChild(t),r.appendChild(e),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),s.contentDocument.body.appendChild(r),d.forEach((function(t){t(r)})),d=[],s.onload=null},document.body.appendChild(s)}(e))}function h(){s&&(document.body.removeChild(s),s=null,r=null)}function f(t,e){var n="warning"===t?"WARNING":"ERROR",s="";if("string"==typeof e)s+=e;else{var r=e.file||"",o=e.moduleName?-1!==e.moduleName.indexOf("!")?"".concat(e.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(e.moduleName,")"):"".concat(e.moduleName):"",i=e.loc;n+="".concat(o||r?" in ".concat(o?"".concat(o).concat(r?" (".concat(r,")"):""):r).concat(i?" ".concat(i):""):""),s+=e.message||""}return{header:n,body:s}}function m(t,e,n){l((function(){e.forEach((function(e){var n=document.createElement("div"),s=document.createElement("span"),i=f(t,e),d=i.header,l=i.body;s.innerText=d,s.style.color="#".concat(c.red);var h=a()((0,u.encode)(l)),m=document.createElement("div");m.innerHTML=o?o.createHTML(h):h,n.appendChild(s),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(m),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),r.appendChild(n)}))}),n)}a().setColors(c)},"./node_modules/webpack-dev-server/client/socket.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{client:()=>c,default:()=>l});var s=n("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),r=n("./node_modules/webpack-dev-server/client/utils/log.js"),o=n("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==o?void 0!==o.default?o.default:o:s.default,a=0,u=10,c=null,d=function(t,e,n){(c=new i(t)).onOpen((function(){a=0,void 0!==n&&(u=n)})),c.onClose((function(){if(0===a&&e.close(),c=null,a<u){var s=1e3*Math.pow(2,a)+100*Math.random();a+=1,r.log.info("Trying to reconnect..."),setTimeout((function(){d(t,e,n)}),s)}})),c.onMessage((function(t){var n=JSON.parse(t);e[n.type]&&e[n.type](n.data,n.params)}))};const l=d},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s=function(t){var e=t.hostname,n="0.0.0.0"===e||"::"===e||"[::]"===e;n&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(e=self.location.hostname);var s=t.protocol||self.location.protocol;("auto:"===s||e&&n&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var r="";t.username&&(r=t.username,t.password&&(r=r.concat(":",t.password)));var o=(e||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),i=t.port;i&&"0"!==i||(i=self.location.port);var a="/ws";return t.pathname&&!t.fromCurrentScript&&(a=t.pathname),function(t){var e=t.protocol||"";e&&":"!==e.substr(-1)&&(e+=":");var n=t.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var s="";t.hostname&&(s=n+(-1===t.hostname.indexOf(":")?t.hostname:"[".concat(t.hostname,"]")),t.port&&(s+=":".concat(t.port)));var r=t.pathname||"";t.slashes?(s="//".concat(s||""),r&&"/"!==r.charAt(0)&&(r="/".concat(r))):s||(s="");var o=t.search||"";o&&"?"!==o.charAt(0)&&(o="?".concat(o));var i=t.hash||"";return i&&"#"!==i.charAt(0)&&(i="#".concat(i)),r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})),o=o.replace("#","%23"),"".concat(e).concat(s).concat(r).concat(o).concat(i)}({protocol:s,auth:r,hostname:o,port:i,pathname:a,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var t=document.scripts||[],e=Array.prototype.filter.call(t,(function(t){return t.getAttribute("src")}));if(e.length>0)return e[e.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{log:()=>i,logEnabledFeatures:()=>a,setLogLevel:()=>o});var s=n("./node_modules/webpack-dev-server/client/modules/logger/index.js"),r=n.n(s);function o(t){r().configureDefaultLogger({level:t})}o("info");var i=r().getLogger("webpack-dev-server"),a=function(t){var e=Object.keys(t);if(t&&0!==e.length){for(var n="Server started:",s=0;s<e.length;s++){var r=e[s];n+=" ".concat(r," ").concat(t[r]?"enabled":"disabled",",")}n=n.slice(0,-1).concat("."),i.info(n)}}},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=n("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const r=function(t){var e={};if("string"==typeof t&&""!==t)for(var n=t.slice(1).split("&"),r=0;r<n.length;r++){var o=n[r].split("=");e[o[0]]=decodeURIComponent(o[1])}else{var i,a=(0,s.default)();try{i=new URL(a,self.location.href)}catch(t){}i&&((e=i).fromCurrentScript=!0)}return e}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>i});var s=n("./node_modules/webpack/hot/emitter.js"),r=n.n(s),o=n("./node_modules/webpack-dev-server/client/utils/log.js");const i=function(t,e){var n=t.hot,s=t.liveReload;if(!e.isUnloading){var i=e.currentHash,a=e.previousHash;if(!(i.indexOf(a)>=0)){var u=self.location.search.toLowerCase(),c=-1===u.indexOf("webpack-dev-server-hot=false"),d=-1===u.indexOf("webpack-dev-server-live-reload=false");if(n&&c)o.log.info("App hot update..."),r().emit("webpackHotUpdate",e.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(e.currentHash),"*");else if(s&&d)var l=self,h=self.setInterval((function(){("about:"!==l.location.protocol||(l=l.parent).parent===l)&&f(l,h)}))}}function f(t,e){clearInterval(e),o.log.info("App updated. Reloading..."),t.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s=function(t,e){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(t),data:e},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var s=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const r=function(t){if("string"!=typeof t)throw new TypeError("Expected a `string`, got `".concat(typeof t,"`"));return t.replace(s,"")}},"./node_modules/webpack/hot/dev-server.js":(t,e,n)=>{var s,r=function(){return s.indexOf(n.h())>=0},o=n("./node_modules/webpack/hot/log.js"),i=function e(){t.hot.check(!0).then((function(t){if(!t)return o("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),o("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());r()||e(),n("./node_modules/webpack/hot/log-apply-result.js")(t,t),r()&&o("info","[HMR] App is up to date.")})).catch((function(e){var n=t.hot.status();["abort","fail"].indexOf(n)>=0?(o("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),o("warning","[HMR] "+o.formatError(e)),"undefined"!=typeof window&&window.location.reload()):o("warning","[HMR] Update failed: "+o.formatError(e))}))};n("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(e){s=e,r()||"idle"!==t.hot.status()||(o("info","[HMR] Checking for updates on the server..."),i())})),o("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(t,e,n)=>{var s=n("./node_modules/events/events.js");t.exports=new s},"./node_modules/webpack/hot/log-apply-result.js":(t,e,n)=>{t.exports=function(t,e){var s=t.filter((function(t){return e&&e.indexOf(t)<0})),r=n("./node_modules/webpack/hot/log.js");(s.length>0&&(r("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),s.forEach((function(t){r("warning","[HMR]  - "+t)}))),e&&0!==e.length)?(r("info","[HMR] Updated modules:"),e.forEach((function(t){if("string"==typeof t&&-1!==t.indexOf("!")){var e=t.split("!");r.groupCollapsed("info","[HMR]  - "+e.pop()),r("info","[HMR]  - "+t),r.groupEnd("info")}else r("info","[HMR]  - "+t)})),e.every((function(t){return"number"==typeof t}))&&r("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):r("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":t=>{var e="info";function n(){}function s(t){return"info"===e&&"info"===t||["info","warning"].indexOf(e)>=0&&"warning"===t||["info","warning","error"].indexOf(e)>=0&&"error"===t}function r(t){return function(e,n){s(e)&&t(n)}}t.exports=function(t,e){s(t)&&("info"===t?console.log(e):"warning"===t?console.warn(e):"error"===t&&console.error(e))};var o=console.group||n,i=console.groupCollapsed||n,a=console.groupEnd||n;t.exports.group=r(o),t.exports.groupCollapsed=r(i),t.exports.groupEnd=r(a),t.exports.setLogLevel=function(t){e=t},t.exports.formatError=function(t){var e=t.message,n=t.stack;return n?n.indexOf(e)<0?e+"\n"+n:n:e}},"./fonts/forma.png":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s=n.p+"c4170d08dcd3267f4d4c10c3c3f8364e.png"},"./styles/index.scss":(t,e,n)=>{"use strict";n.r(e);var s=n("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(t.id,{publicPath:"",locals:!1});t.hot.dispose(s),t.hot.accept(void 0,s)},"./app/shaders/about/fragment.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 u_imageSize;\nuniform vec2 u_planeSize;\nuniform vec2 u_viewportSize;\nuniform float u_alpha;\nuniform sampler2D tMap;\n\nvarying vec2 v_uv;\nvarying float v_ele;\n\nvoid main()\n{\n  vec2 ratio = vec2(\n    min((u_planeSize.x / u_planeSize.y) / (u_imageSize.x / u_imageSize.y), 1.0),\n    min((u_planeSize.y / u_planeSize.x) / (u_imageSize.y / u_imageSize.x), 1.0)\n  );\n\n  vec2 uv = vec2(\n    v_uv.x * ratio.x + (1.0 - ratio.x) * .5,\n    v_uv.y * ratio.y + (1.0 - ratio.y) * .5\n  );\n\n  vec4 texture = texture2D(tMap, uv);\n  texture.rgb *= v_ele * 2.0 + .5;\n\n  gl_FragColor = texture;\n  gl_FragColor.a = u_alpha;\n}\n"},"./app/shaders/about/vertex.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\n#define PI 3.1415926535897932384626433832795\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float u_time;\n\nvarying vec2 v_uv;\nvarying float v_ele;\n\nvoid main()\n{\n  vec3 new_pos = position;\n\n  float ele = sin((new_pos.x - u_time / 30. + new_pos.y / 4.) * PI * 3.) * .1;\n  new_pos.z += ele;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(new_pos, 1.0);\n\n  v_uv = uv;\n  v_ele = ele;\n}\n"},"./app/shaders/gallery/fragment.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 u_imageSize;\nuniform vec2 u_planeSize;\nuniform float u_offset;\nuniform float u_alpha;\nuniform sampler2D tMap;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec2 ratio = vec2(\n    min((u_planeSize.x / u_planeSize.y) / (u_imageSize.x / u_imageSize.y), 1.0),\n    min((u_planeSize.y / u_planeSize.x) / (u_imageSize.y / u_imageSize.x), 1.0)\n  );\n\n  vec2 uv = vec2(\n    v_uv.x * ratio.x + (1. - ratio.x) * .5,\n    v_uv.y * ratio.y + (1. - ratio.y) * .5 + u_offset\n  );\n\n  vec4 texture = texture2D(tMap, uv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = u_alpha;\n}\n"},"./app/shaders/gallery/vertex.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float u_strength;\nuniform vec2 u_viewportSize;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec4 new_pos = modelViewMatrix * vec4(position, 1.0);\n\n  new_pos.z += sin(new_pos.y / u_viewportSize.y * PI + PI / 2.0) * abs(u_strength);\n  new_pos.y += sin(new_pos.x / u_viewportSize.x * PI + PI / 2.0) * abs(u_strength);\n\n  gl_Position = projectionMatrix * new_pos;\n\n  v_uv = uv;\n}\n"},"./app/shaders/home/element/fragment.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 u_imageSize;\nuniform vec2 u_planeSize;\nuniform float u_offset;\nuniform float u_alpha;\nuniform sampler2D tMap;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec2 ratio = vec2(\n    min((u_planeSize.x / u_planeSize.y) / (u_imageSize.x / u_imageSize.y), 1.0),\n    min((u_planeSize.y / u_planeSize.x) / (u_imageSize.y / u_imageSize.x), 1.0)\n  );\n\n  vec2 uv = vec2(\n    v_uv.x * ratio.x + (1. - ratio.x) * .5 + u_offset,\n    v_uv.y * ratio.y + (1. - ratio.y) * .5\n  );\n\n  vec4 texture = texture2D(tMap, uv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = u_alpha;\n}\n"},"./app/shaders/home/element/vertex.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float u_scroll;\nuniform vec2 u_viewportSize;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec4 new_pos = modelViewMatrix * vec4(position, 1.0);\n\n  new_pos.x += sin(new_pos.y / u_viewportSize.y * PI + PI / 2.0) * (u_scroll);\n\n  gl_Position = projectionMatrix * new_pos;\n\n  v_uv = uv;\n}\n"},"./app/shaders/home/text/fragment.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="#define GLSLIFY 1\nuniform vec3 u_color;\nuniform sampler2D tMap;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec3 color = texture2D(tMap, v_uv).rgb;\n\n  float signed = max(min(color.r, color.g), min(max(color.r, color.g), color.b)) - 0.5;\n  float d = fwidth(signed);\n  float alpha = smoothstep(-d, d, signed);\n\n  if (alpha < 0.02) discard;\n\n  gl_FragColor = vec4(u_color, alpha);\n}\n"},"./app/shaders/home/text/vertex.glsl":(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float u_scroll;\nuniform vec2 u_viewportSize;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec4 new_pos = modelViewMatrix * vec4(position, 1.0);\n\n  new_pos.x += sin(new_pos.y / u_viewportSize.y * PI + PI / 2.0) * (u_scroll);\n\n  gl_Position = projectionMatrix * new_pos;\n\n  v_uv = uv;\n}\n"},"./node_modules/ogl/src/core/Camera.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Camera:()=>c});var s=n("./node_modules/ogl/src/core/Transform.js"),r=n("./node_modules/ogl/src/math/Mat4.js"),o=n("./node_modules/ogl/src/math/Vec3.js");const i=new r.Mat4,a=new o.Vec3,u=new o.Vec3;class c extends s.Transform{constructor(t,{near:e=.1,far:n=100,fov:s=45,aspect:i=1,left:a,right:u,bottom:c,top:d,zoom:l=1}={}){super(),Object.assign(this,{near:e,far:n,fov:s,aspect:i,left:a,right:u,bottom:c,top:d,zoom:l}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new o.Vec3,this.type=a||u?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:n=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:n,aspect:s}),this.projectionMatrix.fromPerspective({fov:n*(Math.PI/180),aspect:s,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:n=this.left,right:s=this.right,bottom:r=this.bottom,top:o=this.top,zoom:i=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:n,right:s,bottom:r,top:o,zoom:i}),n/=i,s/=i,r/=i,o/=i,this.projectionMatrix.fromOrthogonal({left:n,right:s,bottom:r,top:o,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(i.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t,e=t.worldMatrix){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const n=a;n.copy(t.geometry.bounds.center),n.applyMatrix4(e);const s=t.geometry.bounds.radius*e.getMaxScaleOnAxis();return this.frustumIntersectsSphere(n,s)}frustumIntersectsSphere(t,e){const n=u;for(let s=0;s<6;s++){const r=this.frustum[s];if(n.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Geometry:()=>u});var s=n("./node_modules/ogl/src/math/Vec3.js");const r=new s.Vec3;let o=1,i=1,a=!1;class u{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=o++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=i++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:n})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let r=1;35674===n&&(r=2),35675===n&&(r=3),35676===n&&(r=4);const o=s.size/r,i=1===r?0:r*r*r,a=1===r?0:r*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,o,s.type,s.normalized,s.stride+i,s.offset+e*a),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const n=this.attributes[e];n.needsUpdate&&this.updateAttribute(n)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,n=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const r=this.bounds.min,o=this.bounds.max,i=this.bounds.center,a=this.bounds.scale;r.set(1/0),o.set(-1/0);for(let t=0,s=e.length;t<s;t+=n){const n=e[t],s=e[t+1],i=e[t+2];r.x=Math.min(n,r.x),r.y=Math.min(s,r.y),r.z=Math.min(i,r.z),o.x=Math.max(n,o.x),o.y=Math.max(s,o.y),o.z=Math.max(i,o.z)}a.sub(o,r),i.add(r,o).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,n=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,o=e.length;t<o;t+=n)r.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(r));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Mesh:()=>a});var s=n("./node_modules/ogl/src/core/Transform.js"),r=n("./node_modules/ogl/src/math/Mat3.js"),o=n("./node_modules/ogl/src/math/Mat4.js");let i=0;class a extends s.Transform{constructor(t,{geometry:e,program:n,mode:s=t.TRIANGLES,frustumCulled:a=!0,renderOrder:u=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=i++,this.geometry=e,this.program=n,this.mode=s,this.frustumCulled=a,this.renderOrder=u,this.modelViewMatrix=new o.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Program:()=>o});let s=1;const r={};class o{constructor(t,{vertex:e,fragment:n,uniforms:r={},transparent:o=!1,cullFace:i=t.BACK,frontFace:u=t.CCW,depthTest:c=!0,depthWrite:d=!0,depthFunc:l=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=r,this.id=s++,e||console.warn("vertex shader not supplied"),n||console.warn("fragment shader not supplied"),this.transparent=o,this.cullFace=i,this.frontFace=u,this.depthTest=c,this.depthWrite=d,this.depthFunc=l,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const h=t.createShader(t.VERTEX_SHADER);t.shaderSource(h,e),t.compileShader(h),""!==t.getShaderInfoLog(h)&&console.warn(`${t.getShaderInfoLog(h)}\nVertex Shader\n${a(e)}`);const f=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(f,n),t.compileShader(f),""!==t.getShaderInfoLog(f)&&console.warn(`${t.getShaderInfoLog(f)}\nFragment Shader\n${a(n)}`),this.program=t.createProgram(),t.attachShader(this.program,h),t.attachShader(this.program,f),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(h),t.deleteShader(f),this.uniformLocations=new Map;let m=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<m;e++){let n=t.getActiveUniform(this.program,e);this.uniformLocations.set(n,t.getUniformLocation(this.program,n.name));const s=n.name.match(/(\w+)/g);n.uniformName=s[0],3===s.length?(n.isStructArray=!0,n.structIndex=Number(s[1]),n.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(n.isStruct=!0,n.structProperty=s[1])}this.attributeLocations=new Map;const p=[],g=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<g;e++){const n=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,n.name);-1!==s&&(p[s]=n.name,this.attributeLocations.set(n,s))}this.attributeOrder=p.join("")}setBlendFunc(t,e,n,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=n,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,n)=>{let s=n.uniformName,r=this.uniforms[s];if(n.isStruct&&(r=r[n.structProperty],s+=`.${n.structProperty}`),n.isStructArray&&(r=r[n.structIndex][n.structProperty],s+=`[${n.structIndex}].${n.structProperty}`),!r)return c(`Active uniform ${s} has not been supplied`);if(r&&void 0===r.value)return c(`${s} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),i(this.gl,n.type,t,e);if(r.value.length&&r.value[0].texture){const s=[];return r.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),i(this.gl,n.type,t,s)}i(this.gl,n.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function i(t,e,n,s){s=s.length?function(t){const e=t.length,n=t[0].length;if(void 0===n)return t;const s=e*n;let o=r[s];o||(r[s]=o=new Float32Array(s));for(let s=0;s<e;s++)o.set(t[s],s*n);return o}(s):s;const o=t.renderer.state.uniformLocations.get(n);if(s.length)if(void 0===o||o.length!==s.length)t.renderer.state.uniformLocations.set(n,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let n=0,s=t.length;n<s;n++)if(t[n]!==e[n])return!1;return!0}(o,s))return;o.set?o.set(s):function(t,e){for(let n=0,s=t.length;n<s;n++)t[n]=e[n]}(o,s),t.renderer.state.uniformLocations.set(n,o)}else{if(o===s)return;t.renderer.state.uniformLocations.set(n,s)}switch(e){case 5126:return s.length?t.uniform1fv(n,s):t.uniform1f(n,s);case 35664:return t.uniform2fv(n,s);case 35665:return t.uniform3fv(n,s);case 35666:return t.uniform4fv(n,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(n,s):t.uniform1i(n,s);case 35671:case 35667:return t.uniform2iv(n,s);case 35672:case 35668:return t.uniform3iv(n,s);case 35673:case 35669:return t.uniform4iv(n,s);case 35674:return t.uniformMatrix2fv(n,!1,s);case 35675:return t.uniformMatrix3fv(n,!1,s);case 35676:return t.uniformMatrix4fv(n,!1,s)}}function a(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let u=0;function c(t){u>100||(console.warn(t),u++,u>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Renderer:()=>o});const s=new(n("./node_modules/ogl/src/math/Vec3.js").Vec3);let r=1;class o{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:n=150,dpr:s=1,alpha:o=!1,depth:i=!0,stencil:a=!1,antialias:u=!1,premultipliedAlpha:c=!1,preserveDrawingBuffer:d=!1,powerPreference:l="default",autoClear:h=!0,webgl:f=2}={}){const m={alpha:o,depth:i,stencil:a,antialias:u,premultipliedAlpha:c,preserveDrawingBuffer:d,powerPreference:l};this.dpr=s,this.alpha=o,this.color=!0,this.depth=i,this.stencil=a,this.premultipliedAlpha=c,this.autoClear=h,this.id=r++,2===f&&(this.gl=t.getContext("webgl2",m)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",m)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,n),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,n=0,s=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=n,this.state.viewport.y=s,this.gl.viewport(n,s,t,e))}setScissor(t,e,n=0,s=0){this.gl.scissor(n,s,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,n,s){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===n&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=n,this.state.blendFunc.dstAlpha=s,void 0!==n?this.gl.blendFuncSeparate(t,e,n,s):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,n){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][n].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:n,sort:r}){let o=[];if(e&&n&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(n&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||o.push(t))})),r){const t=[],n=[],r=[];o.forEach((o=>{o.program.transparent?o.program.depthTest?n.push(o):r.push(o):t.push(o),o.zDepth=0,0===o.renderOrder&&o.program.depthTest&&e&&(o.worldMatrix.getTranslation(s),s.applyMatrix4(e.projectionViewMatrix),o.zDepth=s.z)})),t.sort(this.sortOpaque),n.sort(this.sortTransparent),r.sort(this.sortUI),o=t.concat(n,r)}return o}render({scene:t,camera:e,target:n=null,update:s=!0,sort:r=!0,frustumCull:o=!0,clear:i}){null===n?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(n),this.setViewport(n.width,n.height)),(i||this.autoClear&&!1!==i)&&(!this.depth||n&&!n.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:o,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Texture:()=>i});const s=new Uint8Array(4);function r(t){return 0==(t&t-1)}let o=1;class i{constructor(t,{image:e,target:n=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:i=r,wrapS:a=t.CLAMP_TO_EDGE,wrapT:u=t.CLAMP_TO_EDGE,generateMipmaps:c=!0,minFilter:d=(c?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:l=t.LINEAR,premultiplyAlpha:h=!1,unpackAlignment:f=4,flipY:m=n==t.TEXTURE_2D,anisotropy:p=0,level:g=0,width:v,height:_=v}={}){this.gl=t,this.id=o++,this.image=e,this.target=n,this.type=s,this.format=r,this.internalFormat=i,this.minFilter=d,this.magFilter=l,this.wrapS=a,this.wrapT=u,this.generateMipmaps=c,this.premultiplyAlpha=h,this.unpackAlignment=f,this.flipY=m,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=_,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Transform:()=>a});var s=n("./node_modules/ogl/src/math/Vec3.js"),r=n("./node_modules/ogl/src/math/Quat.js"),o=n("./node_modules/ogl/src/math/Mat4.js"),i=n("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new o.Mat4,this.worldMatrix=new o.Mat4,this.matrixAutoUpdate=!0,this.position=new s.Vec3,this.quaternion=new r.Quat,this.scale=new s.Vec3(1),this.rotation=new i.Euler,this.up=new s.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,n=this.children.length;e<n;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,n=this.children.length;e<n;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Plane:()=>r});var s=n("./node_modules/ogl/src/core/Geometry.js");class r extends s.Geometry{constructor(t,{width:e=1,height:n=1,widthSegments:s=1,heightSegments:o=1,attributes:i={}}={}){const a=s,u=o,c=(a+1)*(u+1),d=a*u*6,l=new Float32Array(3*c),h=new Float32Array(3*c),f=new Float32Array(2*c),m=d>65536?new Uint32Array(d):new Uint16Array(d);r.buildPlane(l,h,f,m,e,n,0,a,u),Object.assign(i,{position:{size:3,data:l},normal:{size:3,data:h},uv:{size:2,data:f},index:{data:m}}),super(t,i)}static buildPlane(t,e,n,s,r,o,i,a,u,c=0,d=1,l=2,h=1,f=-1,m=0,p=0){const g=m,v=r/a,_=o/u;for(let y=0;y<=u;y++){let b=y*_-o/2;for(let o=0;o<=a;o++,m++){let _=o*v-r/2;if(t[3*m+c]=_*h,t[3*m+d]=b*f,t[3*m+l]=i/2,e[3*m+c]=0,e[3*m+d]=0,e[3*m+l]=i>=0?1:-1,n[2*m]=o/a,n[2*m+1]=1-y/u,y===u||o===a)continue;let x=g+o+y*(a+1),w=g+o+(y+1)*(a+1),j=g+o+(y+1)*(a+1)+1,E=g+o+y*(a+1)+1;s[6*p]=x,s[6*p+1]=w,s[6*p+2]=E,s[6*p+3]=w,s[6*p+4]=j,s[6*p+5]=E,p++}}}}},"./node_modules/ogl/src/extras/Text.js":(t,e,n)=>{"use strict";function s({font:t,text:e,width:n=1/0,align:s="left",size:r=1,letterSpacing:o=0,lineHeight:i=1.4,wordSpacing:a=0,wordBreak:u=!1}){const c=this;let d,l,h,f,m;const p=/\n/,g=/\s/;function v(){h=t.common.lineHeight,f=t.common.base,m=r/f;let n=e.replace(/[ \n]/g,"").length;l={position:new Float32Array(4*n*3),uv:new Float32Array(4*n*2),id:new Float32Array(4*n),index:new Uint16Array(6*n)};for(let t=0;t<n;t++)l.id.set([t,t,t,t],4*t),l.index.set([4*t,4*t+2,4*t+1,4*t+1,4*t+2,4*t+3],6*t);_()}function _(){const h=[];let f=0,v=0,_=0,b=x();function x(){const t={width:0,glyphs:[]};return h.push(t),v=f,_=0,t}let w=0;for(;f<e.length&&w<100;){w++;const t=e[f];if(!b.width&&g.test(t)){f++,v=f,_=0;continue}if(p.test(t)){f++,b=x();continue}const s=d[t]||d[" "];if(b.glyphs.length){const t=b.glyphs[b.glyphs.length-1][0];let e=y(s.id,t.id)*m;b.width+=e,_+=e}b.glyphs.push([s,b.width]);let i=0;if(g.test(t)?(v=f,_=0,i+=a*r):i+=o*r,i+=s.xadvance*m,b.width+=i,_+=i,b.width>n){if(u&&b.glyphs.length>1){b.width-=i,b.glyphs.pop(),b=x();continue}if(!u&&_!==b.width){let t=f-v+1;b.glyphs.splice(-t,t),f=v,b.width-=_,b=x();continue}}f++,w=0}b.width||h.pop(),function(e){const n=t.common.scaleW,o=t.common.scaleH;let a=.07*r,u=0;for(let t=0;t<e.length;t++){let c=e[t];for(let t=0;t<c.glyphs.length;t++){const e=c.glyphs[t][0];let r=c.glyphs[t][1];if("center"===s?r-=.5*c.width:"right"===s&&(r-=c.width),g.test(e.char))continue;r+=e.xoffset*m,a-=e.yoffset*m;let i=e.width*m,d=e.height*m;l.position.set([r,a-d,0,r,a,0,r+i,a-d,0,r+i,a,0],4*u*3);let h=e.x/n,f=e.width/n,p=1-e.y/o,v=e.height/o;l.uv.set([h,p-v,h,p,h+f,p-v,h+f,p],4*u*2),a+=e.yoffset*m,u++}a-=r*i}c.buffers=l,c.numLines=e.length,c.height=c.numLines*r*i,c.width=Math.max(...e.map((t=>t.width)))}(h)}function y(e,n){for(let s=0;s<t.kernings.length;s++){let r=t.kernings[s];if(!(r.first<e)&&!(r.second<n))return r.first>e||r.first===e&&r.second>n?0:r.amount}return 0}d={},t.chars.forEach((t=>d[t.char]=t)),v(),this.resize=function(t){({width:n}=t),_()},this.update=function(t){({text:e}=t),v()}}n.r(e),n.d(e,{Text:()=>s})},"./node_modules/ogl/src/math/Color.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Color:()=>r});var s=n("./node_modules/ogl/src/math/functions/ColorFunc.js");class r extends Array{constructor(t){return Array.isArray(t)?super(...t):super(...s.parseColor(...arguments))}get r(){return this[0]}get g(){return this[1]}get b(){return this[2]}set r(t){this[0]=t}set g(t){this[1]=t}set b(t){this[2]=t}set(t){return Array.isArray(t)?this.copy(t):this.copy(s.parseColor(...arguments))}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this}}},"./node_modules/ogl/src/math/Euler.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Euler:()=>o});var s=n("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(n("./node_modules/ogl/src/math/Mat4.js").Mat4);class o extends Array{constructor(t=0,e=t,n=t,s="YXZ"){return super(t,e,n),this.order=s,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,n=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=n,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return s.fromRotationMatrix(this,t,e),this.onChange(),this}fromQuaternion(t,e=this.order){return r.fromQuaternion(t),this.fromRotationMatrix(r,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Mat3:()=>r});var s=n("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,n=0,s=0,r=1,o=0,i=0,a=0,u=1){return super(t,e,n,s,r,o,i,a,u),this}set(t,e,n,r,o,i,a,u,c){return t.length?this.copy(t):(s.set(this,t,e,n,r,o,i,a,u,c),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,n){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],n[0],n[1],n[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Mat4:()=>r});var s=n("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,n=0,s=0,r=0,o=1,i=0,a=0,u=0,c=0,d=1,l=0,h=0,f=0,m=0,p=1){return super(t,e,n,s,r,o,i,a,u,c,d,l,h,f,m,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,n,r,o,i,a,u,c,d,l,h,f,m,p,g){return t.length?this.copy(t):(s.set(this,t,e,n,r,o,i,a,u,c,d,l,h,f,m,p,g),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e,n=this){return s.rotate(this,n,t,e),this}scale(t,e=this){return s.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:n,far:r}={}){return s.perspective(this,t,e,n,r),this}fromOrthogonal({left:t,right:e,bottom:n,top:r,near:o,far:i}){return s.ortho(this,t,e,n,r,o,i),this}fromQuaternion(t){return s.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return s.invert(this,t),this}compose(t,e,n){return s.fromRotationTranslationScale(this,t,e,n),this}getRotation(t){return s.getRotation(t,this),this}getTranslation(t){return s.getTranslation(t,this),this}getScaling(t){return s.getScaling(t,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(t,e,n){return s.targetTo(this,t,e,n),this}determinant(){return s.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Quat:()=>r});var s=n("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,n=0,s=1){return super(t,e,n,s),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return s.identity(this),this.onChange(),this}set(t,e,n,r){return t.length?this.copy(t):(s.set(this,t,e,n,r),this.onChange(),this)}rotateX(t){return s.rotateX(this,this,t),this.onChange(),this}rotateY(t){return s.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return s.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return s.invert(this,t),this.onChange(),this}conjugate(t=this){return s.conjugate(this,t),this.onChange(),this}copy(t){return s.copy(this,t),this.onChange(),this}normalize(t=this){return s.normalize(this,t),this.onChange(),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this.onChange(),this}dot(t){return s.dot(this,t)}fromMatrix3(t){return s.fromMat3(this,t),this.onChange(),this}fromEuler(t){return s.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return s.setAxisAngle(this,t,e),this.onChange(),this}slerp(t,e){return s.slerp(this,this,t,e),this.onChange(),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this.onChange(),this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{Vec3:()=>r});var s=n("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,n=t){return super(t,e,n),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,n=t){return t.length?this.copy(t):(s.set(this,t,e,n),this)}copy(t){return s.copy(this,t),this}add(t,e){return e?s.add(this,t,e):s.add(this,this,t),this}sub(t,e){return e?s.subtract(this,t,e):s.subtract(this,this,t),this}multiply(t){return t.length?s.multiply(this,this,t):s.scale(this,this,t),this}divide(t){return t.length?s.divide(this,this,t):s.scale(this,this,1/t),this}inverse(t=this){return s.inverse(this,t),this}len(){return s.length(this)}distance(t){return t?s.distance(this,t):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(t){return t?s.squaredDistance(this,t):s.squaredLength(this)}negate(t=this){return s.negate(this,t),this}cross(t,e){return e?s.cross(this,t,e):s.cross(this,this,t),this}scale(t){return s.scale(this,this,t),this}normalize(){return s.normalize(this,this),this}dot(t){return s.dot(this,t)}equals(t){return s.exactEquals(this,t)}applyMatrix3(t){return s.transformMat3(this,this,t),this}applyMatrix4(t){return s.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return s.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return s.transformQuat(this,this,t),this}angle(t){return s.angle(this,t)}lerp(t,e){return s.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],n=this[1],s=this[2];return this[0]=t[0]*e+t[4]*n+t[8]*s,this[1]=t[1]*e+t[5]*n+t[9]*s,this[2]=t[2]*e+t[6]*n+t[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/ColorFunc.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{hexToRGB:()=>r,numberToRGB:()=>o,parseColor:()=>i});const s={black:"#000000",white:"#ffffff",red:"#ff0000",green:"#00ff00",blue:"#0000ff",fuchsia:"#ff00ff",cyan:"#00ffff",yellow:"#ffff00",orange:"#ff8000"};function r(t){4===t.length&&(t=t[0]+t[1]+t[1]+t[2]+t[2]+t[3]+t[3]);const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e||console.warn(`Unable to convert hex string ${t} to rgb values`),[parseInt(e[1],16)/255,parseInt(e[2],16)/255,parseInt(e[3],16)/255]}function o(t){return[((t=parseInt(t))>>16&255)/255,(t>>8&255)/255,(255&t)/255]}function i(t){return void 0===t?[0,0,0]:3===arguments.length?arguments:isNaN(t)?"#"===t[0]?r(t):s[t.toLowerCase()]?r(s[t.toLowerCase()]):(console.warn("Color format not recognised"),[0,0,0]):o(t)}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,n)=>{"use strict";function s(t,e,n="YXZ"){return"XYZ"===n?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===n?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===n?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===n?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===n?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===n&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}n.r(e),n.d(e,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{add:()=>v,copy:()=>o,determinant:()=>d,fromMat4:()=>s,fromQuat:()=>r,identity:()=>a,invert:()=>c,multiply:()=>l,multiplyScalar:()=>y,normalFromMat4:()=>p,projection:()=>g,rotate:()=>f,scale:()=>m,set:()=>i,subtract:()=>_,translate:()=>h,transpose:()=>u});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=n+n,a=s+s,u=r+r,c=n*i,d=s*i,l=s*a,h=r*i,f=r*a,m=r*u,p=o*i,g=o*a,v=o*u;return t[0]=1-l-m,t[3]=d-v,t[6]=h+g,t[1]=d+v,t[4]=1-c-m,t[7]=f-p,t[2]=h-g,t[5]=f+p,t[8]=1-c-l,t}function o(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function i(t,e,n,s,r,o,i,a,u,c){return t[0]=e,t[1]=n,t[2]=s,t[3]=r,t[4]=o,t[5]=i,t[6]=a,t[7]=u,t[8]=c,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function u(t,e){if(t===e){let n=e[1],s=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=n,t[5]=e[7],t[6]=s,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function c(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=e[4],a=e[5],u=e[6],c=e[7],d=e[8],l=d*i-a*c,h=-d*o+a*u,f=c*o-i*u,m=n*l+s*h+r*f;return m?(m=1/m,t[0]=l*m,t[1]=(-d*s+r*c)*m,t[2]=(a*s-r*i)*m,t[3]=h*m,t[4]=(d*n-r*u)*m,t[5]=(-a*n+r*o)*m,t[6]=f*m,t[7]=(-c*n+s*u)*m,t[8]=(i*n-s*o)*m,t):null}function d(t){let e=t[0],n=t[1],s=t[2],r=t[3],o=t[4],i=t[5],a=t[6],u=t[7],c=t[8];return e*(c*o-i*u)+n*(-c*r+i*a)+s*(u*r-o*a)}function l(t,e,n){let s=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],c=e[6],d=e[7],l=e[8],h=n[0],f=n[1],m=n[2],p=n[3],g=n[4],v=n[5],_=n[6],y=n[7],b=n[8];return t[0]=h*s+f*i+m*c,t[1]=h*r+f*a+m*d,t[2]=h*o+f*u+m*l,t[3]=p*s+g*i+v*c,t[4]=p*r+g*a+v*d,t[5]=p*o+g*u+v*l,t[6]=_*s+y*i+b*c,t[7]=_*r+y*a+b*d,t[8]=_*o+y*u+b*l,t}function h(t,e,n){let s=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],c=e[6],d=e[7],l=e[8],h=n[0],f=n[1];return t[0]=s,t[1]=r,t[2]=o,t[3]=i,t[4]=a,t[5]=u,t[6]=h*s+f*i+c,t[7]=h*r+f*a+d,t[8]=h*o+f*u+l,t}function f(t,e,n){let s=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],c=e[6],d=e[7],l=e[8],h=Math.sin(n),f=Math.cos(n);return t[0]=f*s+h*i,t[1]=f*r+h*a,t[2]=f*o+h*u,t[3]=f*i-h*s,t[4]=f*a-h*r,t[5]=f*u-h*o,t[6]=c,t[7]=d,t[8]=l,t}function m(t,e,n){let s=n[0],r=n[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=e[4],a=e[5],u=e[6],c=e[7],d=e[8],l=e[9],h=e[10],f=e[11],m=e[12],p=e[13],g=e[14],v=e[15],_=n*a-s*i,y=n*u-r*i,b=n*c-o*i,x=s*u-r*a,w=s*c-o*a,j=r*c-o*u,E=d*p-l*m,A=d*g-h*m,T=d*v-f*m,S=l*g-h*p,M=l*v-f*p,C=h*v-f*g,k=_*C-y*M+b*S+x*T-w*A+j*E;return k?(k=1/k,t[0]=(a*C-u*M+c*S)*k,t[1]=(u*T-i*C-c*A)*k,t[2]=(i*M-a*T+c*E)*k,t[3]=(r*M-s*C-o*S)*k,t[4]=(n*C-r*T+o*A)*k,t[5]=(s*T-n*M-o*E)*k,t[6]=(p*j-g*w+v*x)*k,t[7]=(g*b-m*j-v*y)*k,t[8]=(m*w-p*b+v*_)*k,t):null}function g(t,e,n){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/n,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function v(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t}function _(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t}function y(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{add:()=>w,copy:()=>s,determinant:()=>u,fromQuat:()=>_,fromRotationTranslationScale:()=>v,getMaxScaleOnAxis:()=>p,getRotation:()=>g,getScaling:()=>m,getTranslation:()=>f,identity:()=>o,invert:()=>a,multiply:()=>c,multiplyScalar:()=>E,ortho:()=>b,perspective:()=>y,rotate:()=>h,scale:()=>l,set:()=>r,subtract:()=>j,targetTo:()=>x,translate:()=>d,transpose:()=>i});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function r(t,e,n,s,r,o,i,a,u,c,d,l,h,f,m,p,g){return t[0]=e,t[1]=n,t[2]=s,t[3]=r,t[4]=o,t[5]=i,t[6]=a,t[7]=u,t[8]=c,t[9]=d,t[10]=l,t[11]=h,t[12]=f,t[13]=m,t[14]=p,t[15]=g,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function i(t,e){if(t===e){let n=e[1],s=e[2],r=e[3],o=e[6],i=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=s,t[9]=o,t[11]=e[14],t[12]=r,t[13]=i,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function a(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=e[4],a=e[5],u=e[6],c=e[7],d=e[8],l=e[9],h=e[10],f=e[11],m=e[12],p=e[13],g=e[14],v=e[15],_=n*a-s*i,y=n*u-r*i,b=n*c-o*i,x=s*u-r*a,w=s*c-o*a,j=r*c-o*u,E=d*p-l*m,A=d*g-h*m,T=d*v-f*m,S=l*g-h*p,M=l*v-f*p,C=h*v-f*g,k=_*C-y*M+b*S+x*T-w*A+j*E;return k?(k=1/k,t[0]=(a*C-u*M+c*S)*k,t[1]=(r*M-s*C-o*S)*k,t[2]=(p*j-g*w+v*x)*k,t[3]=(h*w-l*j-f*x)*k,t[4]=(u*T-i*C-c*A)*k,t[5]=(n*C-r*T+o*A)*k,t[6]=(g*b-m*j-v*y)*k,t[7]=(d*j-h*b+f*y)*k,t[8]=(i*M-a*T+c*E)*k,t[9]=(s*T-n*M-o*E)*k,t[10]=(m*w-p*b+v*_)*k,t[11]=(l*b-d*w-f*_)*k,t[12]=(a*A-i*S-u*E)*k,t[13]=(n*S-s*A+r*E)*k,t[14]=(p*y-m*x-g*_)*k,t[15]=(d*x-l*y+h*_)*k,t):null}function u(t){let e=t[0],n=t[1],s=t[2],r=t[3],o=t[4],i=t[5],a=t[6],u=t[7],c=t[8],d=t[9],l=t[10],h=t[11],f=t[12],m=t[13],p=t[14],g=t[15];return(e*i-n*o)*(l*g-h*p)-(e*a-s*o)*(d*g-h*m)+(e*u-r*o)*(d*p-l*m)+(n*a-s*i)*(c*g-h*f)-(n*u-r*i)*(c*p-l*f)+(s*u-r*a)*(c*m-d*f)}function c(t,e,n){let s=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],c=e[6],d=e[7],l=e[8],h=e[9],f=e[10],m=e[11],p=e[12],g=e[13],v=e[14],_=e[15],y=n[0],b=n[1],x=n[2],w=n[3];return t[0]=y*s+b*a+x*l+w*p,t[1]=y*r+b*u+x*h+w*g,t[2]=y*o+b*c+x*f+w*v,t[3]=y*i+b*d+x*m+w*_,y=n[4],b=n[5],x=n[6],w=n[7],t[4]=y*s+b*a+x*l+w*p,t[5]=y*r+b*u+x*h+w*g,t[6]=y*o+b*c+x*f+w*v,t[7]=y*i+b*d+x*m+w*_,y=n[8],b=n[9],x=n[10],w=n[11],t[8]=y*s+b*a+x*l+w*p,t[9]=y*r+b*u+x*h+w*g,t[10]=y*o+b*c+x*f+w*v,t[11]=y*i+b*d+x*m+w*_,y=n[12],b=n[13],x=n[14],w=n[15],t[12]=y*s+b*a+x*l+w*p,t[13]=y*r+b*u+x*h+w*g,t[14]=y*o+b*c+x*f+w*v,t[15]=y*i+b*d+x*m+w*_,t}function d(t,e,n){let s,r,o,i,a,u,c,d,l,h,f,m,p=n[0],g=n[1],v=n[2];return e===t?(t[12]=e[0]*p+e[4]*g+e[8]*v+e[12],t[13]=e[1]*p+e[5]*g+e[9]*v+e[13],t[14]=e[2]*p+e[6]*g+e[10]*v+e[14],t[15]=e[3]*p+e[7]*g+e[11]*v+e[15]):(s=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],c=e[6],d=e[7],l=e[8],h=e[9],f=e[10],m=e[11],t[0]=s,t[1]=r,t[2]=o,t[3]=i,t[4]=a,t[5]=u,t[6]=c,t[7]=d,t[8]=l,t[9]=h,t[10]=f,t[11]=m,t[12]=s*p+a*g+l*v+e[12],t[13]=r*p+u*g+h*v+e[13],t[14]=o*p+c*g+f*v+e[14],t[15]=i*p+d*g+m*v+e[15]),t}function l(t,e,n){let s=n[0],r=n[1],o=n[2];return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function h(t,e,n,s){let r,o,i,a,u,c,d,l,h,f,m,p,g,v,_,y,b,x,w,j,E,A,T,S,M=s[0],C=s[1],k=s[2],O=Math.hypot(M,C,k);return Math.abs(O)<1e-6?null:(O=1/O,M*=O,C*=O,k*=O,r=Math.sin(n),o=Math.cos(n),i=1-o,a=e[0],u=e[1],c=e[2],d=e[3],l=e[4],h=e[5],f=e[6],m=e[7],p=e[8],g=e[9],v=e[10],_=e[11],y=M*M*i+o,b=C*M*i+k*r,x=k*M*i-C*r,w=M*C*i-k*r,j=C*C*i+o,E=k*C*i+M*r,A=M*k*i+C*r,T=C*k*i-M*r,S=k*k*i+o,t[0]=a*y+l*b+p*x,t[1]=u*y+h*b+g*x,t[2]=c*y+f*b+v*x,t[3]=d*y+m*b+_*x,t[4]=a*w+l*j+p*E,t[5]=u*w+h*j+g*E,t[6]=c*w+f*j+v*E,t[7]=d*w+m*j+_*E,t[8]=a*A+l*T+p*S,t[9]=u*A+h*T+g*S,t[10]=c*A+f*T+v*S,t[11]=d*A+m*T+_*S,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function f(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let n=e[0],s=e[1],r=e[2],o=e[4],i=e[5],a=e[6],u=e[8],c=e[9],d=e[10];return t[0]=Math.hypot(n,s,r),t[1]=Math.hypot(o,i,a),t[2]=Math.hypot(u,c,d),t}function p(t){let e=t[0],n=t[1],s=t[2],r=t[4],o=t[5],i=t[6],a=t[8],u=t[9],c=t[10];const d=e*e+n*n+s*s,l=r*r+o*o+i*i,h=a*a+u*u+c*c;return Math.sqrt(Math.max(d,l,h))}const g=function(){const t=[0,0,0];return function(e,n){let s=t;m(s,n);let r=1/s[0],o=1/s[1],i=1/s[2],a=n[0]*r,u=n[1]*o,c=n[2]*i,d=n[4]*r,l=n[5]*o,h=n[6]*i,f=n[8]*r,p=n[9]*o,g=n[10]*i,v=a+l+g,_=0;return v>0?(_=2*Math.sqrt(v+1),e[3]=.25*_,e[0]=(h-p)/_,e[1]=(f-c)/_,e[2]=(u-d)/_):a>l&&a>g?(_=2*Math.sqrt(1+a-l-g),e[3]=(h-p)/_,e[0]=.25*_,e[1]=(u+d)/_,e[2]=(f+c)/_):l>g?(_=2*Math.sqrt(1+l-a-g),e[3]=(f-c)/_,e[0]=(u+d)/_,e[1]=.25*_,e[2]=(h+p)/_):(_=2*Math.sqrt(1+g-a-l),e[3]=(u-d)/_,e[0]=(f+c)/_,e[1]=(h+p)/_,e[2]=.25*_),e}}();function v(t,e,n,s){let r=e[0],o=e[1],i=e[2],a=e[3],u=r+r,c=o+o,d=i+i,l=r*u,h=r*c,f=r*d,m=o*c,p=o*d,g=i*d,v=a*u,_=a*c,y=a*d,b=s[0],x=s[1],w=s[2];return t[0]=(1-(m+g))*b,t[1]=(h+y)*b,t[2]=(f-_)*b,t[3]=0,t[4]=(h-y)*x,t[5]=(1-(l+g))*x,t[6]=(p+v)*x,t[7]=0,t[8]=(f+_)*w,t[9]=(p-v)*w,t[10]=(1-(l+m))*w,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function _(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=n+n,a=s+s,u=r+r,c=n*i,d=s*i,l=s*a,h=r*i,f=r*a,m=r*u,p=o*i,g=o*a,v=o*u;return t[0]=1-l-m,t[1]=d+v,t[2]=h-g,t[3]=0,t[4]=d-v,t[5]=1-c-m,t[6]=f+p,t[7]=0,t[8]=h+g,t[9]=f-p,t[10]=1-c-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e,n,s,r){let o=1/Math.tan(e/2),i=1/(s-r);return t[0]=o/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+s)*i,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*s*i,t[15]=0,t}function b(t,e,n,s,r,o,i){let a=1/(e-n),u=1/(s-r),c=1/(o-i);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*a,t[13]=(r+s)*u,t[14]=(i+o)*c,t[15]=1,t}function x(t,e,n,s){let r=e[0],o=e[1],i=e[2],a=s[0],u=s[1],c=s[2],d=r-n[0],l=o-n[1],h=i-n[2],f=d*d+l*l+h*h;0===f?h=1:(f=1/Math.sqrt(f),d*=f,l*=f,h*=f);let m=u*h-c*l,p=c*d-a*h,g=a*l-u*d;return f=m*m+p*p+g*g,0===f&&(c?a+=1e-6:u?c+=1e-6:u+=1e-6,m=u*h-c*l,p=c*d-a*h,g=a*l-u*d,f=m*m+p*p+g*g),f=1/Math.sqrt(f),m*=f,p*=f,g*=f,t[0]=m,t[1]=p,t[2]=g,t[3]=0,t[4]=l*g-h*p,t[5]=h*m-d*g,t[6]=d*p-l*m,t[7]=0,t[8]=d,t[9]=l,t[10]=h,t[11]=0,t[12]=r,t[13]=o,t[14]=i,t[15]=1,t}function w(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function j(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function E(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{add:()=>v,conjugate:()=>h,copy:()=>p,dot:()=>y,fromEuler:()=>m,fromMat3:()=>f,identity:()=>r,invert:()=>l,length:()=>x,lerp:()=>b,multiply:()=>i,normalize:()=>w,rotateX:()=>a,rotateY:()=>u,rotateZ:()=>c,scale:()=>_,set:()=>g,setAxisAngle:()=>o,slerp:()=>d});var s=n("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function o(t,e,n){n*=.5;let s=Math.sin(n);return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=Math.cos(n),t}function i(t,e,n){let s=e[0],r=e[1],o=e[2],i=e[3],a=n[0],u=n[1],c=n[2],d=n[3];return t[0]=s*d+i*a+r*c-o*u,t[1]=r*d+i*u+o*a-s*c,t[2]=o*d+i*c+s*u-r*a,t[3]=i*d-s*a-r*u-o*c,t}function a(t,e,n){n*=.5;let s=e[0],r=e[1],o=e[2],i=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=s*u+i*a,t[1]=r*u+o*a,t[2]=o*u-r*a,t[3]=i*u-s*a,t}function u(t,e,n){n*=.5;let s=e[0],r=e[1],o=e[2],i=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=s*u-o*a,t[1]=r*u+i*a,t[2]=o*u+s*a,t[3]=i*u-r*a,t}function c(t,e,n){n*=.5;let s=e[0],r=e[1],o=e[2],i=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=s*u+r*a,t[1]=r*u-s*a,t[2]=o*u+i*a,t[3]=i*u-o*a,t}function d(t,e,n,s){let r,o,i,a,u,c=e[0],d=e[1],l=e[2],h=e[3],f=n[0],m=n[1],p=n[2],g=n[3];return o=c*f+d*m+l*p+h*g,o<0&&(o=-o,f=-f,m=-m,p=-p,g=-g),1-o>1e-6?(r=Math.acos(o),i=Math.sin(r),a=Math.sin((1-s)*r)/i,u=Math.sin(s*r)/i):(a=1-s,u=s),t[0]=a*c+u*f,t[1]=a*d+u*m,t[2]=a*l+u*p,t[3]=a*h+u*g,t}function l(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=n*n+s*s+r*r+o*o,a=i?1/i:0;return t[0]=-n*a,t[1]=-s*a,t[2]=-r*a,t[3]=o*a,t}function h(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function f(t,e){let n,s=e[0]+e[4]+e[8];if(s>0)n=Math.sqrt(s+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{let s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);let r=(s+1)%3,o=(s+2)%3;n=Math.sqrt(e[3*s+s]-e[3*r+r]-e[3*o+o]+1),t[s]=.5*n,n=.5/n,t[3]=(e[3*r+o]-e[3*o+r])*n,t[r]=(e[3*r+s]+e[3*s+r])*n,t[o]=(e[3*o+s]+e[3*s+o])*n}return t}function m(t,e,n="YXZ"){let s=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),o=Math.sin(.5*e[1]),i=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),u=Math.cos(.5*e[2]);return"XYZ"===n?(t[0]=s*i*u+r*o*a,t[1]=r*o*u-s*i*a,t[2]=r*i*a+s*o*u,t[3]=r*i*u-s*o*a):"YXZ"===n?(t[0]=s*i*u+r*o*a,t[1]=r*o*u-s*i*a,t[2]=r*i*a-s*o*u,t[3]=r*i*u+s*o*a):"ZXY"===n?(t[0]=s*i*u-r*o*a,t[1]=r*o*u+s*i*a,t[2]=r*i*a+s*o*u,t[3]=r*i*u-s*o*a):"ZYX"===n?(t[0]=s*i*u-r*o*a,t[1]=r*o*u+s*i*a,t[2]=r*i*a-s*o*u,t[3]=r*i*u+s*o*a):"YZX"===n?(t[0]=s*i*u+r*o*a,t[1]=r*o*u+s*i*a,t[2]=r*i*a-s*o*u,t[3]=r*i*u-s*o*a):"XZY"===n&&(t[0]=s*i*u-r*o*a,t[1]=r*o*u-s*i*a,t[2]=r*i*a+s*o*u,t[3]=r*i*u+s*o*a),t}const p=s.copy,g=s.set,v=s.add,_=s.scale,y=s.dot,b=s.lerp,x=s.length,w=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{add:()=>i,angle:()=>E,copy:()=>r,cross:()=>_,distance:()=>l,divide:()=>c,dot:()=>v,exactEquals:()=>A,inverse:()=>p,length:()=>s,lerp:()=>y,multiply:()=>u,negate:()=>m,normalize:()=>g,scale:()=>d,scaleRotateMat4:()=>x,set:()=>o,squaredDistance:()=>h,squaredLength:()=>f,subtract:()=>a,transformMat3:()=>w,transformMat4:()=>b,transformQuat:()=>j});function s(t){let e=t[0],n=t[1],s=t[2];return Math.sqrt(e*e+n*n+s*s)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function o(t,e,n,s){return t[0]=e,t[1]=n,t[2]=s,t}function i(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function a(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function u(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function c(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function d(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function l(t,e){let n=e[0]-t[0],s=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(n*n+s*s+r*r)}function h(t,e){let n=e[0]-t[0],s=e[1]-t[1],r=e[2]-t[2];return n*n+s*s+r*r}function f(t){let e=t[0],n=t[1],s=t[2];return e*e+n*n+s*s}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function g(t,e){let n=e[0],s=e[1],r=e[2],o=n*n+s*s+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function v(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function _(t,e,n){let s=e[0],r=e[1],o=e[2],i=n[0],a=n[1],u=n[2];return t[0]=r*u-o*a,t[1]=o*i-s*u,t[2]=s*a-r*i,t}function y(t,e,n,s){let r=e[0],o=e[1],i=e[2];return t[0]=r+s*(n[0]-r),t[1]=o+s*(n[1]-o),t[2]=i+s*(n[2]-i),t}function b(t,e,n){let s=e[0],r=e[1],o=e[2],i=n[3]*s+n[7]*r+n[11]*o+n[15];return i=i||1,t[0]=(n[0]*s+n[4]*r+n[8]*o+n[12])/i,t[1]=(n[1]*s+n[5]*r+n[9]*o+n[13])/i,t[2]=(n[2]*s+n[6]*r+n[10]*o+n[14])/i,t}function x(t,e,n){let s=e[0],r=e[1],o=e[2],i=n[3]*s+n[7]*r+n[11]*o+n[15];return i=i||1,t[0]=(n[0]*s+n[4]*r+n[8]*o)/i,t[1]=(n[1]*s+n[5]*r+n[9]*o)/i,t[2]=(n[2]*s+n[6]*r+n[10]*o)/i,t}function w(t,e,n){let s=e[0],r=e[1],o=e[2];return t[0]=s*n[0]+r*n[3]+o*n[6],t[1]=s*n[1]+r*n[4]+o*n[7],t[2]=s*n[2]+r*n[5]+o*n[8],t}function j(t,e,n){let s=e[0],r=e[1],o=e[2],i=n[0],a=n[1],u=n[2],c=a*o-u*r,d=u*s-i*o,l=i*r-a*s,h=a*l-u*d,f=u*c-i*l,m=i*d-a*c,p=2*n[3];return c*=p,d*=p,l*=p,h*=2,f*=2,m*=2,t[0]=s+c+h,t[1]=r+d+f,t[2]=o+l+m,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(n,s){r(t,n),r(e,s),g(t,t),g(e,e);let o=v(t,e);return o>1?0:o<-1?Math.PI:Math.acos(o)}}();function A(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,n)=>{"use strict";n.r(e),n.d(e,{add:()=>o,copy:()=>s,dot:()=>c,length:()=>a,lerp:()=>d,normalize:()=>u,scale:()=>i,set:()=>r});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,n,s,r){return t[0]=e,t[1]=n,t[2]=s,t[3]=r,t}function o(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t}function i(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t}function a(t){let e=t[0],n=t[1],s=t[2],r=t[3];return Math.sqrt(e*e+n*n+s*s+r*r)}function u(t,e){let n=e[0],s=e[1],r=e[2],o=e[3],i=n*n+s*s+r*r+o*o;return i>0&&(i=1/Math.sqrt(i)),t[0]=n*i,t[1]=s*i,t[2]=r*i,t[3]=o*i,t}function c(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function d(t,e,n,s){let r=e[0],o=e[1],i=e[2],a=e[3];return t[0]=r+s*(n[0]-r),t[1]=o+s*(n[1]-o),t[2]=i+s*(n[2]-i),t[3]=a+s*(n[3]-a),t}},"./fonts/forma.json":t=>{"use strict";t.exports=JSON.parse('{"pages":["forma.png"],"chars":[{"id":36,"index":367,"char":"$","width":25,"height":41,"xoffset":-1,"yoffset":0.5,"xadvance":23.436,"chnl":15,"x":0,"y":0,"page":0},{"id":40,"index":298,"char":"(","width":12,"height":41,"xoffset":-1,"yoffset":2.5,"xadvance":8.862,"chnl":15,"x":26,"y":0,"page":0},{"id":41,"index":299,"char":")","width":12,"height":41,"xoffset":-1,"yoffset":2.5,"xadvance":8.862,"chnl":15,"x":39,"y":0,"page":0},{"id":47,"index":331,"char":"/","width":16,"height":41,"xoffset":-1,"yoffset":3.5,"xadvance":13.02,"chnl":15,"x":52,"y":0,"page":0},{"id":64,"index":336,"char":"@","width":37,"height":41,"xoffset":-1,"yoffset":4.5,"xadvance":34.272,"chnl":15,"x":69,"y":0,"page":0},{"id":91,"index":300,"char":"[","width":11,"height":41,"xoffset":0,"yoffset":2.5,"xadvance":9.618,"chnl":15,"x":107,"y":0,"page":0},{"id":92,"index":332,"char":"\\\\","width":16,"height":41,"xoffset":-1,"yoffset":3.5,"xadvance":13.062,"chnl":15,"x":0,"y":42,"page":0},{"id":93,"index":301,"char":"]","width":11,"height":41,"xoffset":-1,"yoffset":2.5,"xadvance":9.618,"chnl":15,"x":0,"y":84,"page":0},{"id":123,"index":302,"char":"{","width":12,"height":41,"xoffset":0,"yoffset":2.5,"xadvance":10.29,"chnl":15,"x":12,"y":84,"page":0},{"id":124,"index":334,"char":"|","width":7,"height":41,"xoffset":-1,"yoffset":2.5,"xadvance":5.208,"chnl":15,"x":17,"y":42,"page":0},{"id":125,"index":303,"char":"}","width":12,"height":41,"xoffset":-1,"yoffset":2.5,"xadvance":10.29,"chnl":15,"x":25,"y":42,"page":0},{"id":87,"index":100,"char":"W","width":40,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":36.162,"chnl":15,"x":25,"y":84,"page":0},{"id":106,"index":176,"char":"j","width":8,"height":39,"xoffset":-1,"yoffset":5.5,"xadvance":6.888,"chnl":15,"x":119,"y":0,"page":0},{"id":38,"index":337,"char":"&","width":30,"height":35,"xoffset":-1,"yoffset":3.5,"xadvance":26.796,"chnl":15,"x":38,"y":42,"page":0},{"id":37,"index":305,"char":"%","width":33,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":30.702,"chnl":15,"x":66,"y":78,"page":0},{"id":48,"index":280,"char":"0","width":25,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":22.932,"chnl":15,"x":69,"y":42,"page":0},{"id":50,"index":282,"char":"2","width":23,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":20.454,"chnl":15,"x":95,"y":42,"page":0},{"id":51,"index":283,"char":"3","width":24,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":21.588,"chnl":15,"x":100,"y":77,"page":0},{"id":53,"index":285,"char":"5","width":24,"height":34,"xoffset":-1,"yoffset":4.5,"xadvance":21.504,"chnl":15,"x":119,"y":40,"page":0},{"id":54,"index":286,"char":"6","width":24,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":22.05,"chnl":15,"x":128,"y":0,"page":0},{"id":56,"index":288,"char":"8","width":25,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":22.344,"chnl":15,"x":125,"y":75,"page":0},{"id":57,"index":289,"char":"9","width":24,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":22.05,"chnl":15,"x":144,"y":35,"page":0},{"id":63,"index":329,"char":"?","width":23,"height":34,"xoffset":-2,"yoffset":3.5,"xadvance":19.74,"chnl":15,"x":153,"y":0,"page":0},{"id":67,"index":13,"char":"C","width":30,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":27.51,"chnl":15,"x":151,"y":70,"page":0},{"id":71,"index":32,"char":"G","width":30,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":27.888,"chnl":15,"x":169,"y":35,"page":0},{"id":74,"index":49,"char":"J","width":22,"height":34,"xoffset":-2,"yoffset":4.5,"xadvance":19.446,"chnl":15,"x":177,"y":0,"page":0},{"id":79,"index":63,"char":"O","width":32,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":29.568,"chnl":15,"x":182,"y":70,"page":0},{"id":81,"index":73,"char":"Q","width":32,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":29.694,"chnl":15,"x":215,"y":0,"page":0},{"id":83,"index":78,"char":"S","width":28,"height":34,"xoffset":-1,"yoffset":3.5,"xadvance":24.738,"chnl":15,"x":200,"y":35,"page":0},{"id":85,"index":88,"char":"U","width":26,"height":34,"xoffset":-1,"yoffset":4.5,"xadvance":24.15,"chnl":15,"x":229,"y":35,"page":0},{"id":98,"index":140,"char":"b","width":24,"height":34,"xoffset":-1,"yoffset":4.5,"xadvance":21.546,"chnl":15,"x":215,"y":70,"page":0},{"id":100,"index":147,"char":"d","width":24,"height":34,"xoffset":-1,"yoffset":4.5,"xadvance":21.546,"chnl":15,"x":151,"y":105,"page":0},{"id":102,"index":159,"char":"f","width":16,"height":34,"xoffset":-2,"yoffset":3.5,"xadvance":13.02,"chnl":15,"x":240,"y":70,"page":0},{"id":103,"index":160,"char":"g","width":24,"height":34,"xoffset":-1,"yoffset":11.5,"xadvance":21.504,"chnl":15,"x":125,"y":110,"page":0},{"id":109,"index":184,"char":"m","width":34,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":32.634,"chnl":15,"x":66,"y":113,"page":0},{"id":33,"index":327,"char":"!","width":8,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":7.056,"chnl":15,"x":248,"y":0,"page":0},{"id":35,"index":304,"char":"#","width":32,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":28.014,"chnl":15,"x":25,"y":118,"page":0},{"id":49,"index":281,"char":"1","width":14,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":12.894,"chnl":15,"x":200,"y":0,"page":0},{"id":52,"index":284,"char":"4","width":25,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":21.63,"chnl":15,"x":58,"y":140,"page":0},{"id":55,"index":287,"char":"7","width":22,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":18.186,"chnl":15,"x":101,"y":112,"page":0},{"id":65,"index":2,"char":"A","width":30,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":25.494,"chnl":15,"x":0,"y":152,"page":0},{"id":66,"index":12,"char":"B","width":26,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":24.864,"chnl":15,"x":31,"y":152,"page":0},{"id":68,"index":19,"char":"D","width":29,"height":33,"xoffset":0,"yoffset":4.5,"xadvance":26.754,"chnl":15,"x":0,"y":186,"page":0},{"id":69,"index":21,"char":"E","width":23,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":20.958,"chnl":15,"x":0,"y":220,"page":0},{"id":70,"index":31,"char":"F","width":22,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":19.866,"chnl":15,"x":24,"y":220,"page":0},{"id":72,"index":37,"char":"H","width":27,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":26.418,"chnl":15,"x":30,"y":186,"page":0},{"id":73,"index":39,"char":"I","width":8,"height":33,"xoffset":0,"yoffset":4.5,"xadvance":7.35,"chnl":15,"x":47,"y":220,"page":0},{"id":75,"index":51,"char":"K","width":25,"height":33,"xoffset":0,"yoffset":4.5,"xadvance":22.554,"chnl":15,"x":56,"y":220,"page":0},{"id":76,"index":53,"char":"L","width":21,"height":33,"xoffset":0,"yoffset":4.5,"xadvance":19.026,"chnl":15,"x":58,"y":174,"page":0},{"id":77,"index":57,"char":"M","width":33,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":32.004,"chnl":15,"x":80,"y":174,"page":0},{"id":78,"index":58,"char":"N","width":28,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":26.67,"chnl":15,"x":82,"y":208,"page":0},{"id":80,"index":72,"char":"P","width":24,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":22.428,"chnl":15,"x":111,"y":208,"page":0},{"id":82,"index":74,"char":"R","width":26,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":23.856,"chnl":15,"x":114,"y":146,"page":0},{"id":84,"index":84,"char":"T","width":25,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":21.504,"chnl":15,"x":136,"y":180,"page":0},{"id":86,"index":99,"char":"V","width":29,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":24.822,"chnl":15,"x":141,"y":145,"page":0},{"id":88,"index":105,"char":"X","width":28,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":24.318,"chnl":15,"x":136,"y":214,"page":0},{"id":89,"index":106,"char":"Y","width":27,"height":33,"xoffset":-2,"yoffset":4.5,"xadvance":22.806,"chnl":15,"x":162,"y":179,"page":0},{"id":90,"index":111,"char":"Z","width":26,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":22.89,"chnl":15,"x":171,"y":140,"page":0},{"id":104,"index":165,"char":"h","width":22,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":20.58,"chnl":15,"x":176,"y":105,"page":0},{"id":107,"index":178,"char":"k","width":21,"height":33,"xoffset":-1,"yoffset":4.5,"xadvance":18.396,"chnl":15,"x":165,"y":213,"page":0},{"id":108,"index":180,"char":"l","width":8,"height":33,"xoffset":0,"yoffset":4.5,"xadvance":6.846,"chnl":15,"x":84,"y":140,"page":0},{"id":112,"index":199,"char":"p","width":24,"height":33,"xoffset":-1,"yoffset":11.5,"xadvance":21.546,"chnl":15,"x":187,"y":213,"page":0},{"id":113,"index":200,"char":"q","width":24,"height":33,"xoffset":-1,"yoffset":11.5,"xadvance":21.546,"chnl":15,"x":190,"y":174,"page":0},{"id":119,"index":227,"char":"w","width":33,"height":26,"xoffset":-2,"yoffset":11.5,"xadvance":28.938,"chnl":15,"x":198,"y":139,"page":0},{"id":121,"index":233,"char":"y","width":24,"height":33,"xoffset":-2,"yoffset":11.5,"xadvance":19.152,"chnl":15,"x":199,"y":105,"page":0},{"id":105,"index":167,"char":"i","width":8,"height":32,"xoffset":-1,"yoffset":5.5,"xadvance":6.888,"chnl":15,"x":224,"y":105,"page":0},{"id":116,"index":211,"char":"t","width":16,"height":31,"xoffset":-2,"yoffset":6.5,"xadvance":12.642,"chnl":15,"x":233,"y":105,"page":0},{"id":59,"index":325,"char":";","width":9,"height":30,"xoffset":-2,"yoffset":11.5,"xadvance":6.174,"chnl":15,"x":233,"y":137,"page":0},{"id":99,"index":141,"char":"c","width":24,"height":27,"xoffset":-1,"yoffset":11.5,"xadvance":20.664,"chnl":15,"x":215,"y":168,"page":0},{"id":101,"index":149,"char":"e","width":24,"height":27,"xoffset":-1,"yoffset":11.5,"xadvance":21.42,"chnl":15,"x":215,"y":196,"page":0},{"id":111,"index":190,"char":"o","width":24,"height":27,"xoffset":-1,"yoffset":11.5,"xadvance":21.798,"chnl":15,"x":212,"y":224,"page":0},{"id":115,"index":205,"char":"s","width":23,"height":27,"xoffset":-1,"yoffset":11.5,"xadvance":19.95,"chnl":15,"x":237,"y":224,"page":0},{"id":58,"index":324,"char":":","width":8,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":6.174,"chnl":15,"x":114,"y":180,"page":0},{"id":97,"index":130,"char":"a","width":24,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":21.546,"chnl":15,"x":256,"y":34,"page":0},{"id":110,"index":185,"char":"n","width":22,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":20.622,"chnl":15,"x":257,"y":0,"page":0},{"id":114,"index":201,"char":"r","width":17,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":14.112,"chnl":15,"x":93,"y":146,"page":0},{"id":117,"index":215,"char":"u","width":22,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":20.622,"chnl":15,"x":280,"y":0,"page":0},{"id":118,"index":226,"char":"v","width":24,"height":26,"xoffset":-2,"yoffset":11.5,"xadvance":19.824,"chnl":15,"x":240,"y":168,"page":0},{"id":120,"index":232,"char":"x","width":23,"height":26,"xoffset":-2,"yoffset":11.5,"xadvance":19.236,"chnl":15,"x":240,"y":195,"page":0},{"id":122,"index":238,"char":"z","width":21,"height":26,"xoffset":-1,"yoffset":11.5,"xadvance":18.228,"chnl":15,"x":243,"y":137,"page":0},{"id":43,"index":344,"char":"+","width":23,"height":25,"xoffset":-1,"yoffset":8.5,"xadvance":21.126,"chnl":15,"x":0,"y":126,"page":0},{"id":60,"index":350,"char":"<","width":23,"height":24,"xoffset":-1,"yoffset":8.5,"xadvance":21.126,"chnl":15,"x":250,"y":105,"page":0},{"id":62,"index":351,"char":">","width":23,"height":24,"xoffset":-1,"yoffset":8.5,"xadvance":21.126,"chnl":15,"x":261,"y":222,"page":0},{"id":61,"index":349,"char":"=","width":23,"height":17,"xoffset":-1,"yoffset":12.5,"xadvance":21.126,"chnl":15,"x":264,"y":195,"page":0},{"id":94,"index":374,"char":"^","width":23,"height":22,"xoffset":-1,"yoffset":4.5,"xadvance":20.622,"chnl":15,"x":257,"y":61,"page":0},{"id":126,"index":375,"char":"~","width":23,"height":13,"xoffset":-1,"yoffset":12.5,"xadvance":20.958,"chnl":15,"x":82,"y":242,"page":0},{"id":95,"index":293,"char":"_","width":19,"height":7,"xoffset":-2,"yoffset":37.5,"xadvance":15.96,"chnl":15,"x":264,"y":213,"page":0},{"id":42,"index":319,"char":"*","width":17,"height":17,"xoffset":-1,"yoffset":1.5,"xadvance":14.112,"chnl":15,"x":257,"y":84,"page":0},{"id":96,"index":377,"char":"`","width":15,"height":10,"xoffset":2,"yoffset":3.5,"xadvance":21,"chnl":15,"x":58,"y":208,"page":0},{"id":34,"index":308,"char":"\\"","width":13,"height":13,"xoffset":-1,"yoffset":4.5,"xadvance":11.34,"chnl":15,"x":106,"y":242,"page":0},{"id":39,"index":307,"char":"\'","width":8,"height":13,"xoffset":-1,"yoffset":4.5,"xadvance":6.258,"chnl":15,"x":120,"y":242,"page":0},{"id":44,"index":323,"char":",","width":9,"height":13,"xoffset":-2,"yoffset":29.5,"xadvance":5.88,"chnl":15,"x":123,"y":180,"page":0},{"id":45,"index":294,"char":"-","width":13,"height":7,"xoffset":-2,"yoffset":19.5,"xadvance":10.206,"chnl":15,"x":198,"y":166,"page":0},{"id":46,"index":322,"char":".","width":8,"height":8,"xoffset":-1,"yoffset":29.5,"xadvance":5.88,"chnl":15,"x":284,"y":213,"page":0},{"id":32,"index":1,"char":" ","width":0,"height":0,"xoffset":-2,"yoffset":33.5,"xadvance":6.972,"chnl":15,"x":69,"y":77,"page":0}],"info":{"face":"forma","size":42,"bold":0,"italic":0,"charset":[" ","!","\\"","#","$","%","&","\'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","\\\\","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~"],"unicode":1,"stretchH":100,"smooth":1,"aa":1,"padding":[2,2,2,2],"spacing":[0,0]},"common":{"lineHeight":50.4,"base":33.5,"scaleW":512,"scaleH":256,"pages":1,"packed":0,"alphaChnl":0,"redChnl":0,"greenChnl":0,"blueChnl":0},"distanceField":{"fieldType":"msdf","distanceRange":4},"kernings":[{"first":32,"second":65,"amount":-0.63},{"first":32,"second":67,"amount":-0.42},{"first":32,"second":71,"amount":-0.42},{"first":32,"second":74,"amount":-0.21},{"first":32,"second":79,"amount":-0.42},{"first":32,"second":81,"amount":-0.42},{"first":32,"second":84,"amount":-0.63},{"first":32,"second":86,"amount":-0.63},{"first":32,"second":87,"amount":-0.42},{"first":32,"second":88,"amount":-0.21},{"first":32,"second":89,"amount":-0.63},{"first":32,"second":97,"amount":-0.336},{"first":32,"second":99,"amount":-0.336},{"first":32,"second":100,"amount":-0.336},{"first":32,"second":101,"amount":-0.336},{"first":32,"second":103,"amount":-0.336},{"first":32,"second":111,"amount":-0.336},{"first":32,"second":113,"amount":-0.336},{"first":32,"second":116,"amount":-0.21},{"first":32,"second":118,"amount":-0.42},{"first":32,"second":119,"amount":-0.42},{"first":32,"second":120,"amount":-0.21},{"first":32,"second":121,"amount":-0.42},{"first":34,"second":48,"amount":-0.42},{"first":34,"second":49,"amount":0.21},{"first":34,"second":52,"amount":-2.52},{"first":34,"second":54,"amount":-0.21},{"first":34,"second":55,"amount":0.21},{"first":34,"second":56,"amount":-0.63},{"first":34,"second":65,"amount":-1.26},{"first":34,"second":67,"amount":-0.63},{"first":34,"second":71,"amount":-0.63},{"first":34,"second":74,"amount":-2.94},{"first":34,"second":79,"amount":-0.63},{"first":34,"second":81,"amount":-0.63},{"first":34,"second":83,"amount":-0.42},{"first":34,"second":86,"amount":0.21},{"first":34,"second":87,"amount":0.21},{"first":34,"second":88,"amount":-0.63},{"first":34,"second":89,"amount":0.21},{"first":34,"second":90,"amount":-0.42},{"first":34,"second":97,"amount":-1.05},{"first":34,"second":99,"amount":-1.05},{"first":34,"second":100,"amount":-1.05},{"first":34,"second":101,"amount":-1.05},{"first":34,"second":102,"amount":-0.21},{"first":34,"second":103,"amount":-1.05},{"first":34,"second":111,"amount":-1.05},{"first":34,"second":113,"amount":-1.05},{"first":34,"second":115,"amount":-0.84},{"first":34,"second":118,"amount":0.42},{"first":34,"second":119,"amount":0.21},{"first":34,"second":120,"amount":-0.21},{"first":34,"second":121,"amount":0.42},{"first":35,"second":55,"amount":-1.05},{"first":38,"second":65,"amount":0.21},{"first":38,"second":67,"amount":-0.966},{"first":38,"second":71,"amount":-0.966},{"first":38,"second":74,"amount":-1.05},{"first":38,"second":79,"amount":-0.966},{"first":38,"second":81,"amount":-0.966},{"first":38,"second":83,"amount":-1.68},{"first":38,"second":84,"amount":-4.62},{"first":38,"second":85,"amount":-0.63},{"first":38,"second":86,"amount":-3.78},{"first":38,"second":87,"amount":-2.73},{"first":38,"second":89,"amount":-4.62},{"first":38,"second":90,"amount":0.42},{"first":38,"second":97,"amount":-0.63},{"first":38,"second":99,"amount":-0.63},{"first":38,"second":100,"amount":-0.63},{"first":38,"second":101,"amount":-0.63},{"first":38,"second":102,"amount":-0.84},{"first":38,"second":103,"amount":-0.63},{"first":38,"second":111,"amount":-0.63},{"first":38,"second":113,"amount":-0.63},{"first":38,"second":116,"amount":-1.05},{"first":38,"second":122,"amount":0.42},{"first":39,"second":48,"amount":-0.42},{"first":39,"second":49,"amount":0.21},{"first":39,"second":52,"amount":-2.52},{"first":39,"second":54,"amount":-0.21},{"first":39,"second":55,"amount":0.21},{"first":39,"second":56,"amount":-0.63},{"first":39,"second":65,"amount":-1.26},{"first":39,"second":67,"amount":-0.63},{"first":39,"second":71,"amount":-0.63},{"first":39,"second":74,"amount":-2.94},{"first":39,"second":79,"amount":-0.63},{"first":39,"second":81,"amount":-0.63},{"first":39,"second":83,"amount":-0.42},{"first":39,"second":86,"amount":0.21},{"first":39,"second":87,"amount":0.21},{"first":39,"second":88,"amount":-0.63},{"first":39,"second":89,"amount":0.21},{"first":39,"second":90,"amount":-0.42},{"first":39,"second":97,"amount":-1.05},{"first":39,"second":99,"amount":-1.05},{"first":39,"second":100,"amount":-1.05},{"first":39,"second":101,"amount":-1.05},{"first":39,"second":102,"amount":-0.21},{"first":39,"second":103,"amount":-1.05},{"first":39,"second":111,"amount":-1.05},{"first":39,"second":113,"amount":-1.05},{"first":39,"second":115,"amount":-0.84},{"first":39,"second":118,"amount":0.42},{"first":39,"second":119,"amount":0.21},{"first":39,"second":120,"amount":-0.21},{"first":39,"second":121,"amount":0.42},{"first":40,"second":48,"amount":-1.89},{"first":40,"second":49,"amount":-1.47},{"first":40,"second":50,"amount":-0.84},{"first":40,"second":51,"amount":-1.26},{"first":40,"second":52,"amount":-1.89},{"first":40,"second":53,"amount":-1.05},{"first":40,"second":54,"amount":-1.89},{"first":40,"second":55,"amount":0.42},{"first":40,"second":56,"amount":-1.47},{"first":40,"second":57,"amount":-1.26},{"first":40,"second":65,"amount":-0.84},{"first":40,"second":67,"amount":-1.26},{"first":40,"second":71,"amount":-1.26},{"first":40,"second":74,"amount":-1.05},{"first":40,"second":79,"amount":-1.26},{"first":40,"second":81,"amount":-1.26},{"first":40,"second":83,"amount":-1.47},{"first":40,"second":88,"amount":-0.63},{"first":40,"second":90,"amount":-0.21},{"first":40,"second":97,"amount":-0.21},{"first":40,"second":99,"amount":-0.21},{"first":40,"second":100,"amount":-0.21},{"first":40,"second":101,"amount":-0.21},{"first":40,"second":103,"amount":-0.21},{"first":40,"second":111,"amount":-0.21},{"first":40,"second":113,"amount":-0.21},{"first":40,"second":116,"amount":-0.21},{"first":40,"second":118,"amount":-0.21},{"first":40,"second":119,"amount":-0.21},{"first":40,"second":120,"amount":-0.42},{"first":40,"second":121,"amount":-0.21},{"first":42,"second":44,"amount":-1.89},{"first":42,"second":46,"amount":-1.89},{"first":42,"second":52,"amount":-4.41},{"first":42,"second":53,"amount":-0.21},{"first":42,"second":55,"amount":0.21},{"first":42,"second":56,"amount":-0.42},{"first":42,"second":65,"amount":-4.41},{"first":42,"second":67,"amount":-1.05},{"first":42,"second":71,"amount":-1.05},{"first":42,"second":74,"amount":-7.14},{"first":42,"second":79,"amount":-1.05},{"first":42,"second":81,"amount":-1.05},{"first":42,"second":83,"amount":-0.21},{"first":42,"second":86,"amount":0.21},{"first":42,"second":87,"amount":0.21},{"first":42,"second":88,"amount":-0.42},{"first":42,"second":89,"amount":0.21},{"first":42,"second":90,"amount":-0.42},{"first":42,"second":97,"amount":-1.47},{"first":42,"second":99,"amount":-1.47},{"first":42,"second":100,"amount":-1.47},{"first":42,"second":101,"amount":-1.47},{"first":42,"second":103,"amount":-1.47},{"first":42,"second":111,"amount":-1.47},{"first":42,"second":113,"amount":-1.47},{"first":42,"second":115,"amount":-0.63},{"first":42,"second":118,"amount":0.42},{"first":42,"second":121,"amount":0.42},{"first":43,"second":49,"amount":-3.36},{"first":43,"second":50,"amount":-1.89},{"first":43,"second":51,"amount":-1.89},{"first":43,"second":52,"amount":-0.63},{"first":43,"second":53,"amount":-0.63},{"first":43,"second":55,"amount":-4.2},{"first":43,"second":56,"amount":-1.26},{"first":43,"second":57,"amount":-0.42},{"first":44,"second":32,"amount":-0.63},{"first":44,"second":48,"amount":-1.05},{"first":44,"second":49,"amount":-3.36},{"first":44,"second":50,"amount":0.21},{"first":44,"second":51,"amount":-0.21},{"first":44,"second":52,"amount":-1.05},{"first":44,"second":53,"amount":-0.21},{"first":44,"second":54,"amount":-1.05},{"first":44,"second":55,"amount":-2.1},{"first":44,"second":56,"amount":-0.21},{"first":44,"second":57,"amount":-0.84},{"first":44,"second":65,"amount":0.63},{"first":44,"second":67,"amount":-1.47},{"first":44,"second":71,"amount":-1.47},{"first":44,"second":74,"amount":-0.21},{"first":44,"second":79,"amount":-1.47},{"first":44,"second":81,"amount":-1.47},{"first":44,"second":83,"amount":-0.21},{"first":44,"second":84,"amount":-2.31},{"first":44,"second":85,"amount":-0.63},{"first":44,"second":86,"amount":-2.52},{"first":44,"second":87,"amount":-1.26},{"first":44,"second":89,"amount":-2.73},{"first":44,"second":97,"amount":-0.63},{"first":44,"second":99,"amount":-0.63},{"first":44,"second":100,"amount":-0.63},{"first":44,"second":101,"amount":-0.63},{"first":44,"second":102,"amount":-0.84},{"first":44,"second":103,"amount":-0.63},{"first":44,"second":111,"amount":-0.63},{"first":44,"second":113,"amount":-0.63},{"first":44,"second":115,"amount":-0.21},{"first":44,"second":116,"amount":-0.84},{"first":44,"second":118,"amount":-1.68},{"first":44,"second":119,"amount":-1.05},{"first":44,"second":121,"amount":-1.68},{"first":45,"second":48,"amount":0.21},{"first":45,"second":49,"amount":-3.36},{"first":45,"second":50,"amount":-1.47},{"first":45,"second":51,"amount":-1.26},{"first":45,"second":52,"amount":0.336},{"first":45,"second":53,"amount":-0.21},{"first":45,"second":54,"amount":0.21},{"first":45,"second":55,"amount":-3.36},{"first":45,"second":56,"amount":-0.42},{"first":45,"second":57,"amount":-0.63},{"first":45,"second":65,"amount":-1.47},{"first":45,"second":67,"amount":0.126},{"first":45,"second":71,"amount":0.126},{"first":45,"second":79,"amount":0.126},{"first":45,"second":81,"amount":0.126},{"first":45,"second":84,"amount":-3.99},{"first":45,"second":86,"amount":-2.73},{"first":45,"second":87,"amount":-1.89},{"first":45,"second":88,"amount":-3.15},{"first":45,"second":89,"amount":-3.99},{"first":45,"second":90,"amount":-1.68},{"first":45,"second":97,"amount":0.21},{"first":45,"second":99,"amount":0.21},{"first":45,"second":100,"amount":0.21},{"first":45,"second":101,"amount":0.21},{"first":45,"second":102,"amount":-0.42},{"first":45,"second":103,"amount":0.21},{"first":45,"second":111,"amount":0.21},{"first":45,"second":113,"amount":0.21},{"first":45,"second":115,"amount":-0.21},{"first":45,"second":116,"amount":-0.42},{"first":45,"second":118,"amount":-0.84},{"first":45,"second":119,"amount":-0.42},{"first":45,"second":120,"amount":-2.52},{"first":45,"second":121,"amount":-0.84},{"first":45,"second":122,"amount":-1.47},{"first":46,"second":32,"amount":-0.63},{"first":46,"second":48,"amount":-1.05},{"first":46,"second":49,"amount":-3.36},{"first":46,"second":50,"amount":0.21},{"first":46,"second":51,"amount":-0.21},{"first":46,"second":52,"amount":-1.05},{"first":46,"second":53,"amount":-0.21},{"first":46,"second":54,"amount":-1.05},{"first":46,"second":55,"amount":-2.1},{"first":46,"second":56,"amount":-0.21},{"first":46,"second":57,"amount":-0.84},{"first":46,"second":65,"amount":0.63},{"first":46,"second":67,"amount":-1.47},{"first":46,"second":71,"amount":-1.47},{"first":46,"second":74,"amount":-0.21},{"first":46,"second":79,"amount":-1.47},{"first":46,"second":81,"amount":-1.47},{"first":46,"second":83,"amount":-0.21},{"first":46,"second":84,"amount":-2.31},{"first":46,"second":85,"amount":-0.63},{"first":46,"second":86,"amount":-2.52},{"first":46,"second":87,"amount":-1.26},{"first":46,"second":89,"amount":-2.73},{"first":46,"second":97,"amount":-0.63},{"first":46,"second":99,"amount":-0.63},{"first":46,"second":100,"amount":-0.63},{"first":46,"second":101,"amount":-0.63},{"first":46,"second":102,"amount":-0.84},{"first":46,"second":103,"amount":-0.63},{"first":46,"second":111,"amount":-0.63},{"first":46,"second":113,"amount":-0.63},{"first":46,"second":115,"amount":-0.21},{"first":46,"second":116,"amount":-0.84},{"first":46,"second":118,"amount":-1.68},{"first":46,"second":119,"amount":-1.05},{"first":46,"second":121,"amount":-1.68},{"first":47,"second":47,"amount":-5.25},{"first":47,"second":55,"amount":0.42},{"first":47,"second":65,"amount":-3.36},{"first":47,"second":67,"amount":-1.47},{"first":47,"second":71,"amount":-1.47},{"first":47,"second":74,"amount":-3.15},{"first":47,"second":79,"amount":-1.47},{"first":47,"second":81,"amount":-1.47},{"first":47,"second":83,"amount":-1.26},{"first":47,"second":84,"amount":0.21},{"first":47,"second":86,"amount":0.21},{"first":47,"second":87,"amount":0.21},{"first":47,"second":88,"amount":-0.84},{"first":47,"second":89,"amount":0.21},{"first":47,"second":90,"amount":-0.84},{"first":47,"second":97,"amount":-1.89},{"first":47,"second":99,"amount":-1.89},{"first":47,"second":100,"amount":-1.89},{"first":47,"second":101,"amount":-1.89},{"first":47,"second":102,"amount":-0.756},{"first":47,"second":103,"amount":-1.89},{"first":47,"second":109,"amount":-0.84},{"first":47,"second":110,"amount":-0.84},{"first":47,"second":111,"amount":-1.89},{"first":47,"second":112,"amount":-0.84},{"first":47,"second":113,"amount":-1.89},{"first":47,"second":114,"amount":-0.84},{"first":47,"second":115,"amount":-1.47},{"first":47,"second":116,"amount":-0.63},{"first":47,"second":117,"amount":-0.42},{"first":47,"second":118,"amount":-0.63},{"first":47,"second":119,"amount":-0.63},{"first":47,"second":120,"amount":-0.63},{"first":47,"second":121,"amount":-0.63},{"first":47,"second":122,"amount":-1.68},{"first":48,"second":34,"amount":-0.42},{"first":48,"second":39,"amount":-0.42},{"first":48,"second":41,"amount":-1.89},{"first":48,"second":44,"amount":-1.05},{"first":48,"second":45,"amount":0.21},{"first":48,"second":46,"amount":-1.05},{"first":48,"second":49,"amount":-0.21},{"first":48,"second":52,"amount":0.126},{"first":48,"second":53,"amount":-0.21},{"first":48,"second":55,"amount":-1.47},{"first":48,"second":93,"amount":-1.89},{"first":48,"second":125,"amount":-1.89},{"first":49,"second":41,"amount":-0.63},{"first":49,"second":43,"amount":-0.84},{"first":49,"second":49,"amount":-0.21},{"first":49,"second":60,"amount":-0.21},{"first":49,"second":93,"amount":-0.63},{"first":49,"second":125,"amount":-0.63},{"first":50,"second":34,"amount":0.21},{"first":50,"second":39,"amount":0.21},{"first":50,"second":41,"amount":-0.84},{"first":50,"second":43,"amount":-1.68},{"first":50,"second":44,"amount":0.126},{"first":50,"second":45,"amount":-1.89},{"first":50,"second":46,"amount":0.126},{"first":50,"second":49,"amount":0.42},{"first":50,"second":50,"amount":0.42},{"first":50,"second":51,"amount":-0.21},{"first":50,"second":52,"amount":-2.73},{"first":50,"second":53,"amount":-0.21},{"first":50,"second":54,"amount":-0.126},{"first":50,"second":55,"amount":-0.336},{"first":50,"second":56,"amount":-0.126},{"first":50,"second":57,"amount":0.21},{"first":50,"second":60,"amount":-1.47},{"first":50,"second":63,"amount":0.21},{"first":50,"second":93,"amount":-0.84},{"first":50,"second":116,"amount":0.21},{"first":50,"second":125,"amount":-0.84},{"first":51,"second":34,"amount":-0.21},{"first":51,"second":39,"amount":-0.21},{"first":51,"second":41,"amount":-1.26},{"first":51,"second":43,"amount":-1.05},{"first":51,"second":44,"amount":-0.21},{"first":51,"second":46,"amount":-0.21},{"first":51,"second":52,"amount":0.126},{"first":51,"second":55,"amount":-0.966},{"first":51,"second":57,"amount":-0.42},{"first":51,"second":60,"amount":-0.84},{"first":51,"second":63,"amount":-0.21},{"first":51,"second":93,"amount":-1.26},{"first":51,"second":125,"amount":-1.26},{"first":52,"second":34,"amount":-1.26},{"first":52,"second":37,"amount":-0.84},{"first":52,"second":39,"amount":-1.26},{"first":52,"second":41,"amount":-1.68},{"first":52,"second":42,"amount":-1.68},{"first":52,"second":43,"amount":-1.47},{"first":52,"second":45,"amount":0.21},{"first":52,"second":49,"amount":-0.84},{"first":52,"second":52,"amount":0.21},{"first":52,"second":53,"amount":-0.336},{"first":52,"second":55,"amount":-1.176},{"first":52,"second":57,"amount":-0.84},{"first":52,"second":60,"amount":-1.05},{"first":52,"second":63,"amount":-1.68},{"first":52,"second":93,"amount":-1.68},{"first":52,"second":125,"amount":-1.68},{"first":53,"second":34,"amount":-1.05},{"first":53,"second":39,"amount":-1.05},{"first":53,"second":41,"amount":-1.26},{"first":53,"second":42,"amount":-1.26},{"first":53,"second":43,"amount":-0.21},{"first":53,"second":44,"amount":-0.21},{"first":53,"second":45,"amount":0.21},{"first":53,"second":46,"amount":-0.21},{"first":53,"second":49,"amount":-1.89},{"first":53,"second":53,"amount":-0.126},{"first":53,"second":55,"amount":-0.84},{"first":53,"second":57,"amount":-0.546},{"first":53,"second":63,"amount":-1.68},{"first":53,"second":93,"amount":-1.26},{"first":53,"second":125,"amount":-1.26},{"first":54,"second":34,"amount":-0.63},{"first":54,"second":37,"amount":-0.21},{"first":54,"second":39,"amount":-0.63},{"first":54,"second":41,"amount":-1.68},{"first":54,"second":42,"amount":-0.21},{"first":54,"second":43,"amount":-0.21},{"first":54,"second":44,"amount":-0.42},{"first":54,"second":45,"amount":0.21},{"first":54,"second":46,"amount":-0.42},{"first":54,"second":49,"amount":-0.63},{"first":54,"second":52,"amount":0.126},{"first":54,"second":54,"amount":-0.126},{"first":54,"second":55,"amount":-1.05},{"first":54,"second":57,"amount":-0.336},{"first":54,"second":60,"amount":-0.21},{"first":54,"second":63,"amount":-0.42},{"first":54,"second":93,"amount":-1.68},{"first":54,"second":125,"amount":-1.68},{"first":55,"second":34,"amount":0.42},{"first":55,"second":37,"amount":0.126},{"first":55,"second":39,"amount":0.42},{"first":55,"second":41,"amount":0.546},{"first":55,"second":42,"amount":0.42},{"first":55,"second":43,"amount":-3.15},{"first":55,"second":44,"amount":-2.52},{"first":55,"second":45,"amount":-3.15},{"first":55,"second":46,"amount":-2.52},{"first":55,"second":47,"amount":-1.89},{"first":55,"second":48,"amount":-1.05},{"first":55,"second":49,"amount":0.21},{"first":55,"second":50,"amount":-0.546},{"first":55,"second":51,"amount":-0.63},{"first":55,"second":52,"amount":-3.066},{"first":55,"second":53,"amount":-0.546},{"first":55,"second":54,"amount":-1.05},{"first":55,"second":55,"amount":1.176},{"first":55,"second":56,"amount":-0.84},{"first":55,"second":57,"amount":-0.21},{"first":55,"second":58,"amount":-0.63},{"first":55,"second":59,"amount":-0.63},{"first":55,"second":60,"amount":-2.52},{"first":55,"second":61,"amount":-1.26},{"first":55,"second":62,"amount":-0.42},{"first":55,"second":92,"amount":0.42},{"first":55,"second":93,"amount":0.546},{"first":55,"second":116,"amount":-0.63},{"first":55,"second":125,"amount":0.546},{"first":56,"second":34,"amount":-0.63},{"first":56,"second":39,"amount":-0.63},{"first":56,"second":41,"amount":-1.47},{"first":56,"second":42,"amount":-0.42},{"first":56,"second":43,"amount":-1.26},{"first":56,"second":44,"amount":-0.21},{"first":56,"second":45,"amount":-0.42},{"first":56,"second":46,"amount":-0.21},{"first":56,"second":53,"amount":-0.21},{"first":56,"second":55,"amount":-1.176},{"first":56,"second":60,"amount":-0.84},{"first":56,"second":93,"amount":-1.47},{"first":56,"second":125,"amount":-1.47},{"first":57,"second":34,"amount":-0.63},{"first":57,"second":39,"amount":-0.63},{"first":57,"second":41,"amount":-1.26},{"first":57,"second":44,"amount":-1.05},{"first":57,"second":45,"amount":0.21},{"first":57,"second":46,"amount":-1.05},{"first":57,"second":49,"amount":-0.21},{"first":57,"second":50,"amount":-0.21},{"first":57,"second":51,"amount":-0.21},{"first":57,"second":53,"amount":-0.336},{"first":57,"second":55,"amount":-1.47},{"first":57,"second":57,"amount":-0.126},{"first":57,"second":63,"amount":-0.21},{"first":57,"second":93,"amount":-1.26},{"first":57,"second":125,"amount":-1.26},{"first":58,"second":47,"amount":-0.21},{"first":58,"second":49,"amount":-0.42},{"first":58,"second":52,"amount":-0.42},{"first":58,"second":55,"amount":-0.84},{"first":58,"second":65,"amount":0.21},{"first":58,"second":84,"amount":-1.89},{"first":58,"second":86,"amount":-0.42},{"first":58,"second":87,"amount":-0.21},{"first":58,"second":89,"amount":-0.63},{"first":58,"second":118,"amount":0.42},{"first":58,"second":119,"amount":0.21},{"first":58,"second":121,"amount":0.42},{"first":59,"second":47,"amount":-0.21},{"first":59,"second":49,"amount":-0.42},{"first":59,"second":52,"amount":-0.42},{"first":59,"second":55,"amount":-0.84},{"first":59,"second":65,"amount":0.21},{"first":59,"second":84,"amount":-1.89},{"first":59,"second":86,"amount":-0.42},{"first":59,"second":87,"amount":-0.21},{"first":59,"second":89,"amount":-0.63},{"first":59,"second":118,"amount":0.42},{"first":59,"second":119,"amount":0.21},{"first":59,"second":121,"amount":0.42},{"first":60,"second":52,"amount":-0.21},{"first":60,"second":55,"amount":-0.42},{"first":61,"second":49,"amount":-1.26},{"first":61,"second":55,"amount":-2.52},{"first":62,"second":49,"amount":-2.94},{"first":62,"second":50,"amount":-2.31},{"first":62,"second":51,"amount":-2.1},{"first":62,"second":52,"amount":-0.63},{"first":62,"second":53,"amount":-0.21},{"first":62,"second":55,"amount":-4.62},{"first":62,"second":56,"amount":-0.84},{"first":62,"second":57,"amount":-0.21},{"first":64,"second":65,"amount":-0.84},{"first":64,"second":74,"amount":0.126},{"first":64,"second":84,"amount":-3.99},{"first":64,"second":86,"amount":-2.94},{"first":64,"second":87,"amount":-2.31},{"first":64,"second":88,"amount":-2.1},{"first":64,"second":89,"amount":-4.2},{"first":64,"second":90,"amount":-1.05},{"first":64,"second":102,"amount":-0.63},{"first":64,"second":116,"amount":-0.21},{"first":64,"second":118,"amount":-0.336},{"first":64,"second":119,"amount":-0.21},{"first":64,"second":120,"amount":-0.84},{"first":64,"second":121,"amount":-0.336},{"first":64,"second":122,"amount":-0.84},{"first":65,"second":32,"amount":-0.63},{"first":65,"second":33,"amount":0.21},{"first":65,"second":34,"amount":-1.26},{"first":65,"second":38,"amount":-0.21},{"first":65,"second":39,"amount":-1.26},{"first":65,"second":41,"amount":-0.84},{"first":65,"second":42,"amount":-4.41},{"first":65,"second":44,"amount":0.63},{"first":65,"second":45,"amount":-1.47},{"first":65,"second":46,"amount":0.63},{"first":65,"second":47,"amount":-0.21},{"first":65,"second":58,"amount":0.21},{"first":65,"second":59,"amount":0.21},{"first":65,"second":63,"amount":-3.57},{"first":65,"second":64,"amount":-0.63},{"first":65,"second":65,"amount":1.008},{"first":65,"second":67,"amount":-1.26},{"first":65,"second":71,"amount":-1.26},{"first":65,"second":79,"amount":-1.26},{"first":65,"second":81,"amount":-1.26},{"first":65,"second":83,"amount":-0.84},{"first":65,"second":84,"amount":-3.36},{"first":65,"second":85,"amount":-1.26},{"first":65,"second":86,"amount":-2.94},{"first":65,"second":87,"amount":-2.1},{"first":65,"second":88,"amount":0.756},{"first":65,"second":89,"amount":-3.15},{"first":65,"second":90,"amount":0.42},{"first":65,"second":92,"amount":-3.36},{"first":65,"second":93,"amount":-0.84},{"first":65,"second":97,"amount":-0.756},{"first":65,"second":99,"amount":-0.756},{"first":65,"second":100,"amount":-0.756},{"first":65,"second":101,"amount":-0.756},{"first":65,"second":102,"amount":-0.84},{"first":65,"second":103,"amount":-0.756},{"first":65,"second":111,"amount":-0.756},{"first":65,"second":113,"amount":-0.756},{"first":65,"second":115,"amount":-0.546},{"first":65,"second":116,"amount":-1.386},{"first":65,"second":117,"amount":-0.546},{"first":65,"second":118,"amount":-1.47},{"first":65,"second":119,"amount":-0.966},{"first":65,"second":120,"amount":0.546},{"first":65,"second":121,"amount":-1.47},{"first":65,"second":122,"amount":0.42},{"first":65,"second":125,"amount":-0.84},{"first":66,"second":32,"amount":-0.21},{"first":66,"second":34,"amount":-0.21},{"first":66,"second":39,"amount":-0.21},{"first":66,"second":41,"amount":-1.68},{"first":66,"second":42,"amount":-0.42},{"first":66,"second":44,"amount":-0.21},{"first":66,"second":46,"amount":-0.21},{"first":66,"second":47,"amount":-2.1},{"first":66,"second":65,"amount":-0.84},{"first":66,"second":74,"amount":0.42},{"first":66,"second":84,"amount":-1.26},{"first":66,"second":86,"amount":-1.05},{"first":66,"second":87,"amount":-0.966},{"first":66,"second":88,"amount":-1.47},{"first":66,"second":89,"amount":-1.596},{"first":66,"second":92,"amount":-1.68},{"first":66,"second":93,"amount":-1.68},{"first":66,"second":98,"amount":-0.126},{"first":66,"second":102,"amount":-0.336},{"first":66,"second":104,"amount":-0.126},{"first":66,"second":107,"amount":-0.126},{"first":66,"second":108,"amount":-0.126},{"first":66,"second":118,"amount":-0.42},{"first":66,"second":119,"amount":-0.546},{"first":66,"second":120,"amount":-1.05},{"first":66,"second":121,"amount":-0.42},{"first":66,"second":122,"amount":-0.756},{"first":66,"second":125,"amount":-1.68},{"first":67,"second":32,"amount":-0.42},{"first":67,"second":34,"amount":-0.42},{"first":67,"second":39,"amount":-0.42},{"first":67,"second":41,"amount":-1.26},{"first":67,"second":42,"amount":-0.21},{"first":67,"second":44,"amount":-0.84},{"first":67,"second":45,"amount":0.126},{"first":67,"second":46,"amount":-0.84},{"first":67,"second":47,"amount":-1.89},{"first":67,"second":65,"amount":-1.26},{"first":67,"second":84,"amount":-1.05},{"first":67,"second":86,"amount":-1.05},{"first":67,"second":87,"amount":-0.84},{"first":67,"second":88,"amount":-1.26},{"first":67,"second":89,"amount":-1.68},{"first":67,"second":90,"amount":-0.84},{"first":67,"second":92,"amount":-1.05},{"first":67,"second":93,"amount":-1.26},{"first":67,"second":97,"amount":0.21},{"first":67,"second":99,"amount":0.21},{"first":67,"second":100,"amount":0.21},{"first":67,"second":101,"amount":0.21},{"first":67,"second":103,"amount":0.21},{"first":67,"second":111,"amount":0.21},{"first":67,"second":113,"amount":0.21},{"first":67,"second":115,"amount":-0.21},{"first":67,"second":118,"amount":0.336},{"first":67,"second":119,"amount":0.21},{"first":67,"second":121,"amount":0.336},{"first":67,"second":122,"amount":-0.21},{"first":67,"second":125,"amount":-1.26},{"first":68,"second":32,"amount":-0.42},{"first":68,"second":34,"amount":-0.63},{"first":68,"second":39,"amount":-0.63},{"first":68,"second":41,"amount":-1.26},{"first":68,"second":42,"amount":-1.05},{"first":68,"second":44,"amount":-1.47},{"first":68,"second":45,"amount":0.126},{"first":68,"second":46,"amount":-1.47},{"first":68,"second":47,"amount":-2.73},{"first":68,"second":63,"amount":-0.63},{"first":68,"second":65,"amount":-1.26},{"first":68,"second":84,"amount":-2.1},{"first":68,"second":86,"amount":-1.26},{"first":68,"second":87,"amount":-0.84},{"first":68,"second":88,"amount":-2.73},{"first":68,"second":89,"amount":-2.1},{"first":68,"second":90,"amount":-1.47},{"first":68,"second":92,"amount":-1.47},{"first":68,"second":93,"amount":-1.26},{"first":68,"second":97,"amount":0.21},{"first":68,"second":99,"amount":0.21},{"first":68,"second":100,"amount":0.21},{"first":68,"second":101,"amount":0.21},{"first":68,"second":103,"amount":0.21},{"first":68,"second":111,"amount":0.21},{"first":68,"second":113,"amount":0.21},{"first":68,"second":122,"amount":-0.21},{"first":68,"second":125,"amount":-1.26},{"first":69,"second":42,"amount":-0.21},{"first":69,"second":45,"amount":-0.42},{"first":69,"second":47,"amount":-0.42},{"first":69,"second":63,"amount":-0.21},{"first":69,"second":64,"amount":-0.21},{"first":69,"second":65,"amount":0.546},{"first":69,"second":67,"amount":-0.84},{"first":69,"second":71,"amount":-0.84},{"first":69,"second":74,"amount":-0.42},{"first":69,"second":79,"amount":-0.84},{"first":69,"second":81,"amount":-0.84},{"first":69,"second":86,"amount":0.126},{"first":69,"second":88,"amount":0.126},{"first":69,"second":89,"amount":0.21},{"first":69,"second":92,"amount":-0.21},{"first":69,"second":97,"amount":-0.546},{"first":69,"second":99,"amount":-0.546},{"first":69,"second":100,"amount":-0.546},{"first":69,"second":101,"amount":-0.546},{"first":69,"second":102,"amount":-0.63},{"first":69,"second":103,"amount":-0.546},{"first":69,"second":111,"amount":-0.546},{"first":69,"second":113,"amount":-0.546},{"first":69,"second":115,"amount":-0.42},{"first":69,"second":116,"amount":-0.42},{"first":69,"second":117,"amount":-0.42},{"first":69,"second":118,"amount":-0.42},{"first":69,"second":119,"amount":-0.42},{"first":69,"second":120,"amount":0.126},{"first":69,"second":121,"amount":-0.42},{"first":70,"second":32,"amount":-0.42},{"first":70,"second":38,"amount":-0.42},{"first":70,"second":42,"amount":0.21},{"first":70,"second":44,"amount":-2.31},{"first":70,"second":46,"amount":-2.31},{"first":70,"second":47,"amount":-3.15},{"first":70,"second":64,"amount":-0.21},{"first":70,"second":65,"amount":-2.52},{"first":70,"second":74,"amount":-1.47},{"first":70,"second":83,"amount":-0.21},{"first":70,"second":84,"amount":0.126},{"first":70,"second":86,"amount":0.63},{"first":70,"second":87,"amount":0.336},{"first":70,"second":88,"amount":-0.21},{"first":70,"second":89,"amount":0.756},{"first":70,"second":90,"amount":-0.84},{"first":70,"second":92,"amount":0.21},{"first":70,"second":97,"amount":-0.21},{"first":70,"second":99,"amount":-0.21},{"first":70,"second":100,"amount":-0.21},{"first":70,"second":101,"amount":-0.21},{"first":70,"second":103,"amount":-0.21},{"first":70,"second":109,"amount":-0.21},{"first":70,"second":110,"amount":-0.21},{"first":70,"second":111,"amount":-0.21},{"first":70,"second":112,"amount":-0.21},{"first":70,"second":113,"amount":-0.21},{"first":70,"second":114,"amount":-0.21},{"first":70,"second":115,"amount":-0.21},{"first":70,"second":116,"amount":-0.21},{"first":70,"second":118,"amount":-0.84},{"first":70,"second":119,"amount":-0.42},{"first":70,"second":120,"amount":-1.89},{"first":70,"second":121,"amount":-0.84},{"first":70,"second":122,"amount":-1.05},{"first":71,"second":32,"amount":-0.42},{"first":71,"second":34,"amount":-0.63},{"first":71,"second":39,"amount":-0.63},{"first":71,"second":41,"amount":-1.26},{"first":71,"second":42,"amount":-1.05},{"first":71,"second":44,"amount":-1.47},{"first":71,"second":45,"amount":0.126},{"first":71,"second":46,"amount":-1.47},{"first":71,"second":47,"amount":-2.73},{"first":71,"second":63,"amount":-0.63},{"first":71,"second":65,"amount":-1.26},{"first":71,"second":84,"amount":-2.1},{"first":71,"second":86,"amount":-1.26},{"first":71,"second":87,"amount":-0.84},{"first":71,"second":88,"amount":-2.73},{"first":71,"second":89,"amount":-2.1},{"first":71,"second":90,"amount":-1.47},{"first":71,"second":92,"amount":-1.47},{"first":71,"second":93,"amount":-1.26},{"first":71,"second":97,"amount":0.21},{"first":71,"second":99,"amount":0.21},{"first":71,"second":100,"amount":0.21},{"first":71,"second":101,"amount":0.21},{"first":71,"second":103,"amount":0.21},{"first":71,"second":111,"amount":0.21},{"first":71,"second":113,"amount":0.21},{"first":71,"second":122,"amount":-0.21},{"first":71,"second":125,"amount":-1.26},{"first":72,"second":47,"amount":-1.26},{"first":73,"second":47,"amount":-1.26},{"first":74,"second":44,"amount":-0.63},{"first":74,"second":46,"amount":-0.63},{"first":74,"second":47,"amount":-1.89},{"first":74,"second":63,"amount":0.21},{"first":74,"second":65,"amount":-1.26},{"first":74,"second":88,"amount":-0.63},{"first":74,"second":89,"amount":0.126},{"first":74,"second":97,"amount":0.21},{"first":74,"second":99,"amount":0.21},{"first":74,"second":100,"amount":0.21},{"first":74,"second":101,"amount":0.21},{"first":74,"second":103,"amount":0.21},{"first":74,"second":111,"amount":0.21},{"first":74,"second":113,"amount":0.21},{"first":74,"second":118,"amount":0.21},{"first":74,"second":121,"amount":0.21},{"first":75,"second":32,"amount":-0.21},{"first":75,"second":34,"amount":-1.05},{"first":75,"second":38,"amount":-0.42},{"first":75,"second":39,"amount":-1.05},{"first":75,"second":41,"amount":-0.42},{"first":75,"second":42,"amount":-0.84},{"first":75,"second":44,"amount":0.84},{"first":75,"second":45,"amount":-3.57},{"first":75,"second":46,"amount":0.84},{"first":75,"second":47,"amount":-0.21},{"first":75,"second":58,"amount":0.126},{"first":75,"second":59,"amount":0.126},{"first":75,"second":63,"amount":-2.94},{"first":75,"second":64,"amount":-0.42},{"first":75,"second":65,"amount":1.05},{"first":75,"second":67,"amount":-2.52},{"first":75,"second":71,"amount":-2.52},{"first":75,"second":74,"amount":-0.84},{"first":75,"second":79,"amount":-2.52},{"first":75,"second":81,"amount":-2.52},{"first":75,"second":83,"amount":-1.89},{"first":75,"second":84,"amount":-1.05},{"first":75,"second":85,"amount":-1.596},{"first":75,"second":86,"amount":-0.672},{"first":75,"second":87,"amount":-0.966},{"first":75,"second":88,"amount":0.546},{"first":75,"second":89,"amount":-0.588},{"first":75,"second":90,"amount":0.63},{"first":75,"second":92,"amount":-0.84},{"first":75,"second":93,"amount":-0.42},{"first":75,"second":97,"amount":-1.806},{"first":75,"second":99,"amount":-1.806},{"first":75,"second":100,"amount":-1.806},{"first":75,"second":101,"amount":-1.806},{"first":75,"second":102,"amount":-1.68},{"first":75,"second":103,"amount":-1.806},{"first":75,"second":111,"amount":-1.806},{"first":75,"second":113,"amount":-1.806},{"first":75,"second":115,"amount":-1.26},{"first":75,"second":116,"amount":-1.806},{"first":75,"second":117,"amount":-1.05},{"first":75,"second":118,"amount":-2.52},{"first":75,"second":119,"amount":-1.68},{"first":75,"second":120,"amount":1.05},{"first":75,"second":121,"amount":-2.52},{"first":75,"second":122,"amount":0.756},{"first":75,"second":125,"amount":-0.42},{"first":76,"second":32,"amount":-0.63},{"first":76,"second":34,"amount":-2.31},{"first":76,"second":38,"amount":-0.42},{"first":76,"second":39,"amount":-2.31},{"first":76,"second":41,"amount":-0.84},{"first":76,"second":42,"amount":-7.14},{"first":76,"second":44,"amount":0.21},{"first":76,"second":45,"amount":-4.2},{"first":76,"second":46,"amount":0.21},{"first":76,"second":47,"amount":-0.42},{"first":76,"second":63,"amount":-5.04},{"first":76,"second":64,"amount":-0.63},{"first":76,"second":65,"amount":0.672},{"first":76,"second":67,"amount":-2.646},{"first":76,"second":71,"amount":-2.646},{"first":76,"second":74,"amount":-0.21},{"first":76,"second":79,"amount":-2.646},{"first":76,"second":81,"amount":-2.646},{"first":76,"second":83,"amount":-1.68},{"first":76,"second":84,"amount":-5.88},{"first":76,"second":85,"amount":-1.26},{"first":76,"second":86,"amount":-4.83},{"first":76,"second":87,"amount":-3.57},{"first":76,"second":88,"amount":0.546},{"first":76,"second":89,"amount":-5.46},{"first":76,"second":92,"amount":-4.62},{"first":76,"second":93,"amount":-0.84},{"first":76,"second":97,"amount":-1.26},{"first":76,"second":99,"amount":-1.26},{"first":76,"second":100,"amount":-1.26},{"first":76,"second":101,"amount":-1.26},{"first":76,"second":102,"amount":-1.47},{"first":76,"second":103,"amount":-1.26},{"first":76,"second":111,"amount":-1.26},{"first":76,"second":113,"amount":-1.26},{"first":76,"second":115,"amount":-0.63},{"first":76,"second":116,"amount":-1.68},{"first":76,"second":117,"amount":-1.05},{"first":76,"second":118,"amount":-3.36},{"first":76,"second":119,"amount":-2.016},{"first":76,"second":120,"amount":0.336},{"first":76,"second":121,"amount":-3.36},{"first":76,"second":122,"amount":0.336},{"first":76,"second":125,"amount":-0.84},{"first":77,"second":47,"amount":-1.26},{"first":78,"second":47,"amount":-1.26},{"first":79,"second":32,"amount":-0.42},{"first":79,"second":34,"amount":-0.63},{"first":79,"second":39,"amount":-0.63},{"first":79,"second":41,"amount":-1.26},{"first":79,"second":42,"amount":-1.05},{"first":79,"second":44,"amount":-1.47},{"first":79,"second":45,"amount":0.126},{"first":79,"second":46,"amount":-1.47},{"first":79,"second":47,"amount":-2.73},{"first":79,"second":63,"amount":-0.63},{"first":79,"second":65,"amount":-1.26},{"first":79,"second":84,"amount":-2.1},{"first":79,"second":86,"amount":-1.26},{"first":79,"second":87,"amount":-0.84},{"first":79,"second":88,"amount":-2.73},{"first":79,"second":89,"amount":-2.1},{"first":79,"second":90,"amount":-1.47},{"first":79,"second":92,"amount":-1.47},{"first":79,"second":93,"amount":-1.26},{"first":79,"second":97,"amount":0.21},{"first":79,"second":99,"amount":0.21},{"first":79,"second":100,"amount":0.21},{"first":79,"second":101,"amount":0.21},{"first":79,"second":103,"amount":0.21},{"first":79,"second":111,"amount":0.21},{"first":79,"second":113,"amount":0.21},{"first":79,"second":122,"amount":-0.21},{"first":79,"second":125,"amount":-1.26},{"first":80,"second":32,"amount":-0.63},{"first":80,"second":38,"amount":-1.47},{"first":80,"second":41,"amount":-1.26},{"first":80,"second":44,"amount":-2.52},{"first":80,"second":45,"amount":-0.84},{"first":80,"second":46,"amount":-2.52},{"first":80,"second":47,"amount":-3.99},{"first":80,"second":63,"amount":0.42},{"first":80,"second":64,"amount":-0.84},{"first":80,"second":65,"amount":-3.78},{"first":80,"second":74,"amount":-3.36},{"first":80,"second":84,"amount":-1.05},{"first":80,"second":86,"amount":-0.756},{"first":80,"second":87,"amount":-0.42},{"first":80,"second":88,"amount":-2.52},{"first":80,"second":89,"amount":-1.26},{"first":80,"second":90,"amount":-2.1},{"first":80,"second":92,"amount":-0.42},{"first":80,"second":93,"amount":-1.26},{"first":80,"second":97,"amount":-1.05},{"first":80,"second":99,"amount":-1.05},{"first":80,"second":100,"amount":-1.05},{"first":80,"second":101,"amount":-1.05},{"first":80,"second":103,"amount":-1.05},{"first":80,"second":109,"amount":-0.21},{"first":80,"second":110,"amount":-0.21},{"first":80,"second":111,"amount":-1.05},{"first":80,"second":112,"amount":-0.21},{"first":80,"second":113,"amount":-1.05},{"first":80,"second":114,"amount":-0.21},{"first":80,"second":115,"amount":-0.84},{"first":80,"second":117,"amount":-0.21},{"first":80,"second":118,"amount":0.63},{"first":80,"second":119,"amount":0.42},{"first":80,"second":120,"amount":-0.21},{"first":80,"second":121,"amount":0.63},{"first":80,"second":122,"amount":-0.84},{"first":80,"second":125,"amount":-1.26},{"first":81,"second":34,"amount":-0.63},{"first":81,"second":39,"amount":-0.63},{"first":81,"second":41,"amount":-1.05},{"first":81,"second":42,"amount":-0.63},{"first":81,"second":47,"amount":-0.84},{"first":81,"second":63,"amount":-0.42},{"first":81,"second":65,"amount":0.42},{"first":81,"second":84,"amount":-1.68},{"first":81,"second":86,"amount":-1.26},{"first":81,"second":87,"amount":-0.84},{"first":81,"second":88,"amount":0.126},{"first":81,"second":89,"amount":-1.68},{"first":81,"second":92,"amount":-1.47},{"first":81,"second":93,"amount":-1.05},{"first":81,"second":120,"amount":0.126},{"first":81,"second":125,"amount":-1.05},{"first":82,"second":34,"amount":-0.21},{"first":82,"second":38,"amount":-0.84},{"first":82,"second":39,"amount":-0.21},{"first":82,"second":41,"amount":-0.63},{"first":82,"second":42,"amount":-0.21},{"first":82,"second":45,"amount":-1.05},{"first":82,"second":47,"amount":-0.63},{"first":82,"second":63,"amount":0.21},{"first":82,"second":64,"amount":-0.63},{"first":82,"second":65,"amount":0.672},{"first":82,"second":67,"amount":-0.42},{"first":82,"second":71,"amount":-0.42},{"first":82,"second":74,"amount":-1.68},{"first":82,"second":79,"amount":-0.42},{"first":82,"second":81,"amount":-0.42},{"first":82,"second":83,"amount":-0.42},{"first":82,"second":84,"amount":-1.05},{"first":82,"second":86,"amount":-1.26},{"first":82,"second":87,"amount":-0.756},{"first":82,"second":88,"amount":0.546},{"first":82,"second":89,"amount":-1.386},{"first":82,"second":90,"amount":0.126},{"first":82,"second":92,"amount":-1.05},{"first":82,"second":93,"amount":-0.63},{"first":82,"second":97,"amount":-1.05},{"first":82,"second":99,"amount":-1.05},{"first":82,"second":100,"amount":-1.05},{"first":82,"second":101,"amount":-1.05},{"first":82,"second":103,"amount":-1.05},{"first":82,"second":111,"amount":-1.05},{"first":82,"second":113,"amount":-1.05},{"first":82,"second":115,"amount":-0.42},{"first":82,"second":117,"amount":-0.42},{"first":82,"second":118,"amount":0.336},{"first":82,"second":119,"amount":0.126},{"first":82,"second":120,"amount":0.42},{"first":82,"second":121,"amount":0.336},{"first":82,"second":122,"amount":0.126},{"first":82,"second":125,"amount":-0.63},{"first":83,"second":34,"amount":-0.42},{"first":83,"second":38,"amount":0.21},{"first":83,"second":39,"amount":-0.42},{"first":83,"second":41,"amount":-1.47},{"first":83,"second":42,"amount":-0.21},{"first":83,"second":44,"amount":-0.21},{"first":83,"second":46,"amount":-0.21},{"first":83,"second":47,"amount":-1.89},{"first":83,"second":63,"amount":-0.21},{"first":83,"second":65,"amount":-0.756},{"first":83,"second":84,"amount":-1.26},{"first":83,"second":86,"amount":-0.756},{"first":83,"second":87,"amount":-0.336},{"first":83,"second":88,"amount":-1.47},{"first":83,"second":89,"amount":-1.89},{"first":83,"second":92,"amount":-1.26},{"first":83,"second":93,"amount":-1.47},{"first":83,"second":97,"amount":0.126},{"first":83,"second":99,"amount":0.126},{"first":83,"second":100,"amount":0.126},{"first":83,"second":101,"amount":0.126},{"first":83,"second":103,"amount":0.126},{"first":83,"second":111,"amount":0.126},{"first":83,"second":113,"amount":0.126},{"first":83,"second":115,"amount":0.126},{"first":83,"second":122,"amount":-0.336},{"first":83,"second":125,"amount":-1.47},{"first":84,"second":32,"amount":-0.63},{"first":84,"second":38,"amount":-3.36},{"first":84,"second":44,"amount":-2.31},{"first":84,"second":45,"amount":-3.99},{"first":84,"second":46,"amount":-2.31},{"first":84,"second":47,"amount":-4.62},{"first":84,"second":58,"amount":-1.89},{"first":84,"second":59,"amount":-1.89},{"first":84,"second":63,"amount":-0.84},{"first":84,"second":64,"amount":-3.99},{"first":84,"second":65,"amount":-3.36},{"first":84,"second":67,"amount":-2.1},{"first":84,"second":71,"amount":-2.1},{"first":84,"second":74,"amount":-5.04},{"first":84,"second":79,"amount":-2.1},{"first":84,"second":81,"amount":-2.1},{"first":84,"second":83,"amount":-0.63},{"first":84,"second":84,"amount":0.21},{"first":84,"second":86,"amount":0.63},{"first":84,"second":87,"amount":0.336},{"first":84,"second":88,"amount":-0.336},{"first":84,"second":89,"amount":0.756},{"first":84,"second":90,"amount":-1.176},{"first":84,"second":92,"amount":0.21},{"first":84,"second":97,"amount":-5.25},{"first":84,"second":98,"amount":-0.21},{"first":84,"second":99,"amount":-5.25},{"first":84,"second":100,"amount":-5.25},{"first":84,"second":101,"amount":-5.25},{"first":84,"second":102,"amount":-2.1},{"first":84,"second":103,"amount":-5.25},{"first":84,"second":104,"amount":-0.21},{"first":84,"second":105,"amount":-0.42},{"first":84,"second":106,"amount":-0.42},{"first":84,"second":107,"amount":-0.21},{"first":84,"second":108,"amount":-0.21},{"first":84,"second":109,"amount":-4.2},{"first":84,"second":110,"amount":-4.2},{"first":84,"second":111,"amount":-5.25},{"first":84,"second":112,"amount":-4.2},{"first":84,"second":113,"amount":-5.25},{"first":84,"second":114,"amount":-4.2},{"first":84,"second":115,"amount":-4.2},{"first":84,"second":116,"amount":-1.89},{"first":84,"second":117,"amount":-4.2},{"first":84,"second":118,"amount":-4.41},{"first":84,"second":119,"amount":-4.41},{"first":84,"second":120,"amount":-5.04},{"first":84,"second":121,"amount":-4.41},{"first":84,"second":122,"amount":-4.62},{"first":85,"second":44,"amount":-0.63},{"first":85,"second":46,"amount":-0.63},{"first":85,"second":47,"amount":-1.89},{"first":85,"second":63,"amount":0.21},{"first":85,"second":65,"amount":-1.26},{"first":85,"second":88,"amount":-0.63},{"first":85,"second":89,"amount":0.126},{"first":85,"second":97,"amount":0.21},{"first":85,"second":99,"amount":0.21},{"first":85,"second":100,"amount":0.21},{"first":85,"second":101,"amount":0.21},{"first":85,"second":103,"amount":0.21},{"first":85,"second":111,"amount":0.21},{"first":85,"second":113,"amount":0.21},{"first":85,"second":118,"amount":0.21},{"first":85,"second":121,"amount":0.21},{"first":86,"second":32,"amount":-0.63},{"first":86,"second":34,"amount":0.21},{"first":86,"second":38,"amount":-2.31},{"first":86,"second":39,"amount":0.21},{"first":86,"second":42,"amount":0.21},{"first":86,"second":44,"amount":-2.52},{"first":86,"second":45,"amount":-2.73},{"first":86,"second":46,"amount":-2.52},{"first":86,"second":47,"amount":-4.2},{"first":86,"second":58,"amount":-0.42},{"first":86,"second":59,"amount":-0.42},{"first":86,"second":63,"amount":-0.42},{"first":86,"second":64,"amount":-2.94},{"first":86,"second":65,"amount":-2.94},{"first":86,"second":67,"amount":-1.26},{"first":86,"second":71,"amount":-1.26},{"first":86,"second":74,"amount":-3.36},{"first":86,"second":79,"amount":-1.26},{"first":86,"second":81,"amount":-1.26},{"first":86,"second":83,"amount":-0.546},{"first":86,"second":84,"amount":0.63},{"first":86,"second":86,"amount":1.008},{"first":86,"second":87,"amount":0.756},{"first":86,"second":89,"amount":1.134},{"first":86,"second":90,"amount":-0.63},{"first":86,"second":92,"amount":0.21},{"first":86,"second":97,"amount":-3.15},{"first":86,"second":98,"amount":0.21},{"first":86,"second":99,"amount":-3.15},{"first":86,"second":100,"amount":-3.15},{"first":86,"second":101,"amount":-3.15},{"first":86,"second":102,"amount":-0.42},{"first":86,"second":103,"amount":-3.15},{"first":86,"second":104,"amount":0.21},{"first":86,"second":105,"amount":0.21},{"first":86,"second":106,"amount":0.21},{"first":86,"second":107,"amount":0.21},{"first":86,"second":108,"amount":0.21},{"first":86,"second":109,"amount":-1.26},{"first":86,"second":110,"amount":-1.26},{"first":86,"second":111,"amount":-3.15},{"first":86,"second":112,"amount":-1.26},{"first":86,"second":113,"amount":-3.15},{"first":86,"second":114,"amount":-1.26},{"first":86,"second":115,"amount":-1.68},{"first":86,"second":117,"amount":-1.26},{"first":86,"second":118,"amount":-0.63},{"first":86,"second":119,"amount":-0.84},{"first":86,"second":120,"amount":-0.84},{"first":86,"second":121,"amount":-0.63},{"first":86,"second":122,"amount":-0.84},{"first":87,"second":32,"amount":-0.42},{"first":87,"second":34,"amount":0.21},{"first":87,"second":38,"amount":-2.1},{"first":87,"second":39,"amount":0.21},{"first":87,"second":42,"amount":0.21},{"first":87,"second":44,"amount":-1.26},{"first":87,"second":45,"amount":-2.1},{"first":87,"second":46,"amount":-1.26},{"first":87,"second":47,"amount":-3.78},{"first":87,"second":58,"amount":-0.21},{"first":87,"second":59,"amount":-0.21},{"first":87,"second":63,"amount":-0.21},{"first":87,"second":64,"amount":-2.31},{"first":87,"second":65,"amount":-2.1},{"first":87,"second":67,"amount":-0.84},{"first":87,"second":71,"amount":-0.84},{"first":87,"second":74,"amount":-2.52},{"first":87,"second":79,"amount":-0.84},{"first":87,"second":81,"amount":-0.84},{"first":87,"second":83,"amount":-0.21},{"first":87,"second":84,"amount":0.336},{"first":87,"second":86,"amount":0.756},{"first":87,"second":87,"amount":0.588},{"first":87,"second":88,"amount":-0.21},{"first":87,"second":89,"amount":0.966},{"first":87,"second":90,"amount":-0.63},{"first":87,"second":92,"amount":0.21},{"first":87,"second":97,"amount":-1.89},{"first":87,"second":99,"amount":-1.89},{"first":87,"second":100,"amount":-1.89},{"first":87,"second":101,"amount":-1.89},{"first":87,"second":103,"amount":-1.89},{"first":87,"second":105,"amount":0.126},{"first":87,"second":106,"amount":0.126},{"first":87,"second":109,"amount":-0.42},{"first":87,"second":110,"amount":-0.42},{"first":87,"second":111,"amount":-1.89},{"first":87,"second":112,"amount":-0.42},{"first":87,"second":113,"amount":-1.89},{"first":87,"second":114,"amount":-0.42},{"first":87,"second":115,"amount":-0.84},{"first":87,"second":117,"amount":-0.42},{"first":87,"second":119,"amount":-0.21},{"first":87,"second":120,"amount":-0.42},{"first":87,"second":122,"amount":-1.05},{"first":88,"second":32,"amount":-0.21},{"first":88,"second":34,"amount":-0.63},{"first":88,"second":38,"amount":-1.26},{"first":88,"second":39,"amount":-0.63},{"first":88,"second":41,"amount":-0.63},{"first":88,"second":42,"amount":-0.42},{"first":88,"second":45,"amount":-3.15},{"first":88,"second":47,"amount":-0.84},{"first":88,"second":63,"amount":-2.31},{"first":88,"second":64,"amount":-1.26},{"first":88,"second":65,"amount":0.756},{"first":88,"second":67,"amount":-2.73},{"first":88,"second":71,"amount":-2.73},{"first":88,"second":74,"amount":-0.42},{"first":88,"second":79,"amount":-2.73},{"first":88,"second":81,"amount":-2.73},{"first":88,"second":83,"amount":-1.47},{"first":88,"second":84,"amount":-0.42},{"first":88,"second":85,"amount":-0.63},{"first":88,"second":86,"amount":-0.126},{"first":88,"second":87,"amount":-0.21},{"first":88,"second":92,"amount":-0.84},{"first":88,"second":93,"amount":-0.63},{"first":88,"second":97,"amount":-1.68},{"first":88,"second":99,"amount":-1.68},{"first":88,"second":100,"amount":-1.68},{"first":88,"second":101,"amount":-1.68},{"first":88,"second":102,"amount":-1.26},{"first":88,"second":103,"amount":-1.68},{"first":88,"second":111,"amount":-1.68},{"first":88,"second":113,"amount":-1.68},{"first":88,"second":115,"amount":-1.26},{"first":88,"second":116,"amount":-1.26},{"first":88,"second":117,"amount":-1.05},{"first":88,"second":118,"amount":-2.52},{"first":88,"second":119,"amount":-1.89},{"first":88,"second":120,"amount":0.42},{"first":88,"second":121,"amount":-2.52},{"first":88,"second":122,"amount":0.21},{"first":88,"second":125,"amount":-0.63},{"first":89,"second":32,"amount":-0.63},{"first":89,"second":34,"amount":0.21},{"first":89,"second":38,"amount":-3.36},{"first":89,"second":39,"amount":0.21},{"first":89,"second":42,"amount":0.21},{"first":89,"second":44,"amount":-2.73},{"first":89,"second":45,"amount":-3.99},{"first":89,"second":46,"amount":-2.73},{"first":89,"second":47,"amount":-4.83},{"first":89,"second":58,"amount":-0.63},{"first":89,"second":59,"amount":-0.63},{"first":89,"second":63,"amount":-0.84},{"first":89,"second":64,"amount":-4.2},{"first":89,"second":65,"amount":-3.15},{"first":89,"second":67,"amount":-2.1},{"first":89,"second":71,"amount":-2.1},{"first":89,"second":74,"amount":-4.62},{"first":89,"second":79,"amount":-2.1},{"first":89,"second":81,"amount":-2.1},{"first":89,"second":83,"amount":-1.47},{"first":89,"second":84,"amount":0.756},{"first":89,"second":85,"amount":0.126},{"first":89,"second":86,"amount":1.134},{"first":89,"second":87,"amount":0.966},{"first":89,"second":88,"amount":0.126},{"first":89,"second":89,"amount":1.218},{"first":89,"second":90,"amount":-0.546},{"first":89,"second":92,"amount":0.21},{"first":89,"second":97,"amount":-4.41},{"first":89,"second":98,"amount":0.21},{"first":89,"second":99,"amount":-4.41},{"first":89,"second":100,"amount":-4.41},{"first":89,"second":101,"amount":-4.41},{"first":89,"second":102,"amount":-1.26},{"first":89,"second":103,"amount":-4.41},{"first":89,"second":104,"amount":0.21},{"first":89,"second":107,"amount":0.21},{"first":89,"second":108,"amount":0.21},{"first":89,"second":109,"amount":-2.1},{"first":89,"second":110,"amount":-2.1},{"first":89,"second":111,"amount":-4.41},{"first":89,"second":112,"amount":-2.1},{"first":89,"second":113,"amount":-4.41},{"first":89,"second":114,"amount":-2.1},{"first":89,"second":115,"amount":-3.36},{"first":89,"second":116,"amount":-1.26},{"first":89,"second":117,"amount":-2.1},{"first":89,"second":118,"amount":-1.89},{"first":89,"second":119,"amount":-2.1},{"first":89,"second":120,"amount":-2.52},{"first":89,"second":121,"amount":-1.89},{"first":89,"second":122,"amount":-2.52},{"first":90,"second":38,"amount":-1.47},{"first":90,"second":41,"amount":-0.21},{"first":90,"second":45,"amount":-2.52},{"first":90,"second":47,"amount":-0.84},{"first":90,"second":63,"amount":-0.84},{"first":90,"second":64,"amount":-0.84},{"first":90,"second":65,"amount":0.42},{"first":90,"second":67,"amount":-1.47},{"first":90,"second":71,"amount":-1.47},{"first":90,"second":74,"amount":-0.63},{"first":90,"second":79,"amount":-1.47},{"first":90,"second":81,"amount":-1.47},{"first":90,"second":84,"amount":-0.126},{"first":90,"second":86,"amount":0.126},{"first":90,"second":89,"amount":0.21},{"first":90,"second":90,"amount":0.126},{"first":90,"second":92,"amount":-0.21},{"first":90,"second":93,"amount":-0.21},{"first":90,"second":97,"amount":-1.596},{"first":90,"second":99,"amount":-1.596},{"first":90,"second":100,"amount":-1.596},{"first":90,"second":101,"amount":-1.596},{"first":90,"second":102,"amount":-0.42},{"first":90,"second":103,"amount":-1.596},{"first":90,"second":111,"amount":-1.596},{"first":90,"second":113,"amount":-1.596},{"first":90,"second":115,"amount":-0.63},{"first":90,"second":116,"amount":-0.42},{"first":90,"second":117,"amount":-0.63},{"first":90,"second":118,"amount":-1.47},{"first":90,"second":119,"amount":-0.84},{"first":90,"second":121,"amount":-1.47},{"first":90,"second":125,"amount":-0.21},{"first":91,"second":48,"amount":-1.89},{"first":91,"second":49,"amount":-1.47},{"first":91,"second":50,"amount":-0.84},{"first":91,"second":51,"amount":-1.26},{"first":91,"second":52,"amount":-1.89},{"first":91,"second":53,"amount":-1.05},{"first":91,"second":54,"amount":-1.89},{"first":91,"second":55,"amount":0.42},{"first":91,"second":56,"amount":-1.47},{"first":91,"second":57,"amount":-1.26},{"first":91,"second":65,"amount":-0.84},{"first":91,"second":67,"amount":-1.26},{"first":91,"second":71,"amount":-1.26},{"first":91,"second":74,"amount":-1.05},{"first":91,"second":79,"amount":-1.26},{"first":91,"second":81,"amount":-1.26},{"first":91,"second":83,"amount":-1.47},{"first":91,"second":88,"amount":-0.63},{"first":91,"second":90,"amount":-0.21},{"first":91,"second":97,"amount":-0.21},{"first":91,"second":99,"amount":-0.21},{"first":91,"second":100,"amount":-0.21},{"first":91,"second":101,"amount":-0.21},{"first":91,"second":103,"amount":-0.21},{"first":91,"second":111,"amount":-0.21},{"first":91,"second":113,"amount":-0.21},{"first":91,"second":116,"amount":-0.21},{"first":91,"second":118,"amount":-0.21},{"first":91,"second":119,"amount":-0.21},{"first":91,"second":120,"amount":-0.42},{"first":91,"second":121,"amount":-0.21},{"first":92,"second":49,"amount":-2.52},{"first":92,"second":55,"amount":-1.89},{"first":92,"second":65,"amount":-0.21},{"first":92,"second":66,"amount":-1.26},{"first":92,"second":67,"amount":-2.73},{"first":92,"second":68,"amount":-1.26},{"first":92,"second":69,"amount":-1.26},{"first":92,"second":70,"amount":-1.26},{"first":92,"second":71,"amount":-2.73},{"first":92,"second":72,"amount":-1.26},{"first":92,"second":73,"amount":-1.26},{"first":92,"second":74,"amount":-1.47},{"first":92,"second":75,"amount":-1.26},{"first":92,"second":76,"amount":-1.26},{"first":92,"second":77,"amount":-1.26},{"first":92,"second":78,"amount":-1.26},{"first":92,"second":79,"amount":-2.73},{"first":92,"second":80,"amount":-1.26},{"first":92,"second":81,"amount":-2.73},{"first":92,"second":82,"amount":-1.26},{"first":92,"second":83,"amount":-2.31},{"first":92,"second":84,"amount":-4.62},{"first":92,"second":85,"amount":-1.89},{"first":92,"second":86,"amount":-4.2},{"first":92,"second":87,"amount":-3.78},{"first":92,"second":88,"amount":-0.84},{"first":92,"second":89,"amount":-4.83},{"first":92,"second":90,"amount":-1.05},{"first":92,"second":97,"amount":-0.63},{"first":92,"second":99,"amount":-0.63},{"first":92,"second":100,"amount":-0.63},{"first":92,"second":101,"amount":-0.63},{"first":92,"second":102,"amount":-0.84},{"first":92,"second":103,"amount":-0.63},{"first":92,"second":109,"amount":-0.42},{"first":92,"second":110,"amount":-0.42},{"first":92,"second":111,"amount":-0.63},{"first":92,"second":112,"amount":-0.42},{"first":92,"second":113,"amount":-0.63},{"first":92,"second":114,"amount":-0.42},{"first":92,"second":115,"amount":-0.63},{"first":92,"second":116,"amount":-0.84},{"first":92,"second":117,"amount":-0.63},{"first":92,"second":118,"amount":-1.26},{"first":92,"second":119,"amount":-1.26},{"first":92,"second":120,"amount":-0.42},{"first":92,"second":121,"amount":-1.26},{"first":97,"second":41,"amount":-0.21},{"first":97,"second":65,"amount":0.126},{"first":97,"second":84,"amount":-2.52},{"first":97,"second":86,"amount":-1.26},{"first":97,"second":87,"amount":-0.42},{"first":97,"second":89,"amount":-1.68},{"first":97,"second":92,"amount":-0.63},{"first":97,"second":93,"amount":-0.21},{"first":97,"second":125,"amount":-0.21},{"first":98,"second":32,"amount":-0.336},{"first":98,"second":34,"amount":-1.05},{"first":98,"second":39,"amount":-1.05},{"first":98,"second":41,"amount":-0.21},{"first":98,"second":42,"amount":-1.47},{"first":98,"second":44,"amount":-0.63},{"first":98,"second":45,"amount":0.21},{"first":98,"second":46,"amount":-0.63},{"first":98,"second":47,"amount":-1.26},{"first":98,"second":63,"amount":-2.31},{"first":98,"second":65,"amount":-0.42},{"first":98,"second":84,"amount":-3.15},{"first":98,"second":85,"amount":0.21},{"first":98,"second":86,"amount":-1.89},{"first":98,"second":87,"amount":-1.05},{"first":98,"second":88,"amount":-1.05},{"first":98,"second":89,"amount":-2.73},{"first":98,"second":92,"amount":-0.84},{"first":98,"second":93,"amount":-0.21},{"first":98,"second":102,"amount":-1.05},{"first":98,"second":115,"amount":-0.21},{"first":98,"second":116,"amount":-0.63},{"first":98,"second":118,"amount":-1.05},{"first":98,"second":119,"amount":-0.756},{"first":98,"second":120,"amount":-1.68},{"first":98,"second":121,"amount":-1.05},{"first":98,"second":122,"amount":-1.176},{"first":98,"second":125,"amount":-0.21},{"first":99,"second":32,"amount":-0.336},{"first":99,"second":34,"amount":-0.63},{"first":99,"second":39,"amount":-0.63},{"first":99,"second":41,"amount":-0.21},{"first":99,"second":42,"amount":-1.05},{"first":99,"second":47,"amount":-1.26},{"first":99,"second":63,"amount":-1.47},{"first":99,"second":84,"amount":-3.15},{"first":99,"second":86,"amount":-1.89},{"first":99,"second":87,"amount":-1.05},{"first":99,"second":88,"amount":-0.42},{"first":99,"second":89,"amount":-3.15},{"first":99,"second":92,"amount":-0.84},{"first":99,"second":93,"amount":-0.21},{"first":99,"second":102,"amount":-0.63},{"first":99,"second":116,"amount":-0.42},{"first":99,"second":118,"amount":-0.546},{"first":99,"second":119,"amount":-0.21},{"first":99,"second":120,"amount":-0.84},{"first":99,"second":121,"amount":-0.546},{"first":99,"second":122,"amount":-0.63},{"first":99,"second":125,"amount":-0.21},{"first":100,"second":65,"amount":0.126},{"first":100,"second":89,"amount":0.21},{"first":101,"second":32,"amount":-0.336},{"first":101,"second":34,"amount":-1.05},{"first":101,"second":39,"amount":-1.05},{"first":101,"second":41,"amount":-0.21},{"first":101,"second":42,"amount":-1.47},{"first":101,"second":44,"amount":-0.63},{"first":101,"second":45,"amount":0.21},{"first":101,"second":46,"amount":-0.63},{"first":101,"second":47,"amount":-1.26},{"first":101,"second":63,"amount":-2.31},{"first":101,"second":65,"amount":-0.42},{"first":101,"second":84,"amount":-3.15},{"first":101,"second":85,"amount":0.21},{"first":101,"second":86,"amount":-1.89},{"first":101,"second":87,"amount":-1.05},{"first":101,"second":88,"amount":-1.05},{"first":101,"second":89,"amount":-2.73},{"first":101,"second":92,"amount":-0.84},{"first":101,"second":93,"amount":-0.21},{"first":101,"second":102,"amount":-1.05},{"first":101,"second":115,"amount":-0.21},{"first":101,"second":116,"amount":-0.63},{"first":101,"second":118,"amount":-1.05},{"first":101,"second":119,"amount":-0.756},{"first":101,"second":120,"amount":-1.68},{"first":101,"second":121,"amount":-1.05},{"first":101,"second":122,"amount":-1.176},{"first":101,"second":125,"amount":-0.21},{"first":102,"second":32,"amount":-0.126},{"first":102,"second":34,"amount":0.42},{"first":102,"second":38,"amount":-0.84},{"first":102,"second":39,"amount":0.42},{"first":102,"second":42,"amount":0.63},{"first":102,"second":44,"amount":-2.52},{"first":102,"second":45,"amount":-1.68},{"first":102,"second":46,"amount":-2.52},{"first":102,"second":47,"amount":-2.94},{"first":102,"second":63,"amount":0.63},{"first":102,"second":64,"amount":-0.63},{"first":102,"second":65,"amount":-1.05},{"first":102,"second":74,"amount":-1.68},{"first":102,"second":84,"amount":0.42},{"first":102,"second":86,"amount":0.84},{"first":102,"second":87,"amount":0.42},{"first":102,"second":88,"amount":-0.21},{"first":102,"second":89,"amount":0.84},{"first":102,"second":90,"amount":-0.63},{"first":102,"second":92,"amount":0.21},{"first":102,"second":97,"amount":-1.596},{"first":102,"second":99,"amount":-1.596},{"first":102,"second":100,"amount":-1.596},{"first":102,"second":101,"amount":-1.596},{"first":102,"second":102,"amount":0.084},{"first":102,"second":103,"amount":-1.596},{"first":102,"second":111,"amount":-1.596},{"first":102,"second":113,"amount":-1.596},{"first":102,"second":115,"amount":-0.42},{"first":102,"second":116,"amount":0.084},{"first":102,"second":118,"amount":0.546},{"first":102,"second":119,"amount":0.336},{"first":102,"second":120,"amount":-0.336},{"first":102,"second":121,"amount":0.546},{"first":103,"second":41,"amount":-0.21},{"first":103,"second":65,"amount":0.126},{"first":103,"second":84,"amount":-2.52},{"first":103,"second":86,"amount":-1.26},{"first":103,"second":87,"amount":-0.42},{"first":103,"second":89,"amount":-1.68},{"first":103,"second":92,"amount":-0.63},{"first":103,"second":93,"amount":-0.21},{"first":103,"second":125,"amount":-0.21},{"first":104,"second":34,"amount":-1.05},{"first":104,"second":39,"amount":-1.05},{"first":104,"second":42,"amount":-0.63},{"first":104,"second":47,"amount":-0.42},{"first":104,"second":63,"amount":-0.84},{"first":104,"second":65,"amount":0.21},{"first":104,"second":84,"amount":-2.52},{"first":104,"second":86,"amount":-1.68},{"first":104,"second":87,"amount":-1.05},{"first":104,"second":89,"amount":-2.1},{"first":104,"second":92,"amount":-0.84},{"first":104,"second":116,"amount":-0.336},{"first":104,"second":118,"amount":-0.756},{"first":104,"second":119,"amount":-0.42},{"first":104,"second":121,"amount":-0.756},{"first":107,"second":34,"amount":-0.42},{"first":107,"second":39,"amount":-0.42},{"first":107,"second":41,"amount":-0.21},{"first":107,"second":44,"amount":0.336},{"first":107,"second":45,"amount":-2.73},{"first":107,"second":46,"amount":0.336},{"first":107,"second":47,"amount":-0.21},{"first":107,"second":63,"amount":-0.126},{"first":107,"second":64,"amount":-0.63},{"first":107,"second":65,"amount":1.26},{"first":107,"second":84,"amount":-2.1},{"first":107,"second":86,"amount":-0.84},{"first":107,"second":87,"amount":-0.63},{"first":107,"second":88,"amount":0.84},{"first":107,"second":89,"amount":-1.89},{"first":107,"second":90,"amount":0.546},{"first":107,"second":92,"amount":-0.63},{"first":107,"second":93,"amount":-0.21},{"first":107,"second":97,"amount":-1.596},{"first":107,"second":99,"amount":-1.596},{"first":107,"second":100,"amount":-1.596},{"first":107,"second":101,"amount":-1.596},{"first":107,"second":102,"amount":-0.21},{"first":107,"second":103,"amount":-1.596},{"first":107,"second":111,"amount":-1.596},{"first":107,"second":113,"amount":-1.596},{"first":107,"second":115,"amount":-1.05},{"first":107,"second":116,"amount":-0.21},{"first":107,"second":117,"amount":-0.756},{"first":107,"second":118,"amount":0.126},{"first":107,"second":119,"amount":-0.126},{"first":107,"second":120,"amount":0.756},{"first":107,"second":121,"amount":0.126},{"first":107,"second":122,"amount":0.546},{"first":107,"second":125,"amount":-0.21},{"first":108,"second":65,"amount":0.126},{"first":108,"second":89,"amount":0.21},{"first":109,"second":34,"amount":-1.05},{"first":109,"second":39,"amount":-1.05},{"first":109,"second":42,"amount":-0.63},{"first":109,"second":47,"amount":-0.42},{"first":109,"second":63,"amount":-0.84},{"first":109,"second":65,"amount":0.21},{"first":109,"second":84,"amount":-2.52},{"first":109,"second":86,"amount":-1.68},{"first":109,"second":87,"amount":-1.05},{"first":109,"second":89,"amount":-2.1},{"first":109,"second":92,"amount":-0.84},{"first":109,"second":116,"amount":-0.336},{"first":109,"second":118,"amount":-0.756},{"first":109,"second":119,"amount":-0.42},{"first":109,"second":121,"amount":-0.756},{"first":110,"second":34,"amount":-1.05},{"first":110,"second":39,"amount":-1.05},{"first":110,"second":42,"amount":-0.63},{"first":110,"second":47,"amount":-0.42},{"first":110,"second":63,"amount":-0.84},{"first":110,"second":65,"amount":0.21},{"first":110,"second":84,"amount":-2.52},{"first":110,"second":86,"amount":-1.68},{"first":110,"second":87,"amount":-1.05},{"first":110,"second":89,"amount":-2.1},{"first":110,"second":92,"amount":-0.84},{"first":110,"second":116,"amount":-0.336},{"first":110,"second":118,"amount":-0.756},{"first":110,"second":119,"amount":-0.42},{"first":110,"second":121,"amount":-0.756},{"first":111,"second":32,"amount":-0.336},{"first":111,"second":34,"amount":-1.05},{"first":111,"second":39,"amount":-1.05},{"first":111,"second":41,"amount":-0.21},{"first":111,"second":42,"amount":-1.47},{"first":111,"second":44,"amount":-0.63},{"first":111,"second":45,"amount":0.21},{"first":111,"second":46,"amount":-0.63},{"first":111,"second":47,"amount":-1.26},{"first":111,"second":63,"amount":-2.31},{"first":111,"second":65,"amount":-0.42},{"first":111,"second":84,"amount":-3.15},{"first":111,"second":85,"amount":0.21},{"first":111,"second":86,"amount":-1.89},{"first":111,"second":87,"amount":-1.05},{"first":111,"second":88,"amount":-1.05},{"first":111,"second":89,"amount":-2.73},{"first":111,"second":92,"amount":-0.84},{"first":111,"second":93,"amount":-0.21},{"first":111,"second":102,"amount":-1.05},{"first":111,"second":115,"amount":-0.21},{"first":111,"second":116,"amount":-0.63},{"first":111,"second":118,"amount":-1.05},{"first":111,"second":119,"amount":-0.756},{"first":111,"second":120,"amount":-1.68},{"first":111,"second":121,"amount":-1.05},{"first":111,"second":122,"amount":-1.176},{"first":111,"second":125,"amount":-0.21},{"first":112,"second":32,"amount":-0.336},{"first":112,"second":34,"amount":-1.05},{"first":112,"second":39,"amount":-1.05},{"first":112,"second":41,"amount":-0.21},{"first":112,"second":42,"amount":-1.47},{"first":112,"second":44,"amount":-0.63},{"first":112,"second":45,"amount":0.21},{"first":112,"second":46,"amount":-0.63},{"first":112,"second":47,"amount":-1.26},{"first":112,"second":63,"amount":-2.31},{"first":112,"second":65,"amount":-0.42},{"first":112,"second":84,"amount":-3.15},{"first":112,"second":85,"amount":0.21},{"first":112,"second":86,"amount":-1.89},{"first":112,"second":87,"amount":-1.05},{"first":112,"second":88,"amount":-1.05},{"first":112,"second":89,"amount":-2.73},{"first":112,"second":92,"amount":-0.84},{"first":112,"second":93,"amount":-0.21},{"first":112,"second":102,"amount":-1.05},{"first":112,"second":115,"amount":-0.21},{"first":112,"second":116,"amount":-0.63},{"first":112,"second":118,"amount":-1.05},{"first":112,"second":119,"amount":-0.756},{"first":112,"second":120,"amount":-1.68},{"first":112,"second":121,"amount":-1.05},{"first":112,"second":122,"amount":-1.176},{"first":112,"second":125,"amount":-0.21},{"first":113,"second":41,"amount":-0.21},{"first":113,"second":65,"amount":0.126},{"first":113,"second":84,"amount":-2.52},{"first":113,"second":86,"amount":-1.26},{"first":113,"second":87,"amount":-0.42},{"first":113,"second":89,"amount":-1.68},{"first":113,"second":92,"amount":-0.63},{"first":113,"second":93,"amount":-0.21},{"first":113,"second":125,"amount":-0.21},{"first":114,"second":32,"amount":-0.63},{"first":114,"second":41,"amount":-0.21},{"first":114,"second":44,"amount":-3.15},{"first":114,"second":45,"amount":-3.15},{"first":114,"second":46,"amount":-3.15},{"first":114,"second":47,"amount":-3.78},{"first":114,"second":63,"amount":0.21},{"first":114,"second":64,"amount":-0.63},{"first":114,"second":65,"amount":-2.31},{"first":114,"second":84,"amount":-2.52},{"first":114,"second":86,"amount":-0.42},{"first":114,"second":88,"amount":-1.68},{"first":114,"second":89,"amount":-1.05},{"first":114,"second":90,"amount":-1.68},{"first":114,"second":92,"amount":-0.21},{"first":114,"second":93,"amount":-0.21},{"first":114,"second":97,"amount":-1.68},{"first":114,"second":99,"amount":-1.68},{"first":114,"second":100,"amount":-1.68},{"first":114,"second":101,"amount":-1.68},{"first":114,"second":102,"amount":0.336},{"first":114,"second":103,"amount":-1.68},{"first":114,"second":111,"amount":-1.68},{"first":114,"second":113,"amount":-1.68},{"first":114,"second":115,"amount":-0.84},{"first":114,"second":116,"amount":0.336},{"first":114,"second":118,"amount":0.714},{"first":114,"second":119,"amount":0.42},{"first":114,"second":120,"amount":-0.336},{"first":114,"second":121,"amount":0.714},{"first":114,"second":122,"amount":-0.336},{"first":114,"second":125,"amount":-0.21},{"first":115,"second":34,"amount":-0.84},{"first":115,"second":39,"amount":-0.84},{"first":115,"second":42,"amount":-0.63},{"first":115,"second":45,"amount":-0.63},{"first":115,"second":47,"amount":-0.84},{"first":115,"second":63,"amount":-1.47},{"first":115,"second":84,"amount":-2.31},{"first":115,"second":86,"amount":-1.89},{"first":115,"second":87,"amount":-1.05},{"first":115,"second":88,"amount":-0.21},{"first":115,"second":89,"amount":-2.73},{"first":115,"second":92,"amount":-0.63},{"first":115,"second":102,"amount":-0.84},{"first":115,"second":116,"amount":-0.63},{"first":115,"second":118,"amount":-0.966},{"first":115,"second":119,"amount":-0.63},{"first":115,"second":120,"amount":-1.05},{"first":115,"second":121,"amount":-0.966},{"first":116,"second":34,"amount":-0.21},{"first":116,"second":38,"amount":-0.21},{"first":116,"second":39,"amount":-0.21},{"first":116,"second":44,"amount":0.21},{"first":116,"second":45,"amount":-1.68},{"first":116,"second":46,"amount":0.21},{"first":116,"second":47,"amount":-0.21},{"first":116,"second":63,"amount":0.336},{"first":116,"second":64,"amount":-0.21},{"first":116,"second":92,"amount":-0.21},{"first":116,"second":97,"amount":-0.966},{"first":116,"second":99,"amount":-0.966},{"first":116,"second":100,"amount":-0.966},{"first":116,"second":101,"amount":-0.966},{"first":116,"second":102,"amount":0.084},{"first":116,"second":103,"amount":-0.966},{"first":116,"second":111,"amount":-0.966},{"first":116,"second":113,"amount":-0.966},{"first":116,"second":115,"amount":-0.21},{"first":116,"second":116,"amount":0.084},{"first":116,"second":118,"amount":0.546},{"first":116,"second":119,"amount":0.336},{"first":116,"second":120,"amount":0.126},{"first":116,"second":121,"amount":0.546},{"first":117,"second":41,"amount":-0.21},{"first":117,"second":65,"amount":0.126},{"first":117,"second":84,"amount":-2.52},{"first":117,"second":86,"amount":-1.26},{"first":117,"second":87,"amount":-0.42},{"first":117,"second":89,"amount":-1.68},{"first":117,"second":92,"amount":-0.63},{"first":117,"second":93,"amount":-0.21},{"first":117,"second":125,"amount":-0.21},{"first":118,"second":32,"amount":-0.42},{"first":118,"second":33,"amount":0.21},{"first":118,"second":34,"amount":0.42},{"first":118,"second":39,"amount":0.42},{"first":118,"second":41,"amount":-0.21},{"first":118,"second":42,"amount":0.42},{"first":118,"second":44,"amount":-1.68},{"first":118,"second":45,"amount":-0.84},{"first":118,"second":46,"amount":-1.68},{"first":118,"second":47,"amount":-2.52},{"first":118,"second":58,"amount":0.42},{"first":118,"second":59,"amount":0.42},{"first":118,"second":63,"amount":0.966},{"first":118,"second":64,"amount":-0.336},{"first":118,"second":65,"amount":-1.26},{"first":118,"second":84,"amount":-2.1},{"first":118,"second":86,"amount":-0.42},{"first":118,"second":88,"amount":-1.05},{"first":118,"second":89,"amount":-1.05},{"first":118,"second":90,"amount":-0.84},{"first":118,"second":92,"amount":-0.21},{"first":118,"second":93,"amount":-0.21},{"first":118,"second":97,"amount":-1.05},{"first":118,"second":99,"amount":-1.05},{"first":118,"second":100,"amount":-1.05},{"first":118,"second":101,"amount":-1.05},{"first":118,"second":102,"amount":0.546},{"first":118,"second":103,"amount":-1.05},{"first":118,"second":111,"amount":-1.05},{"first":118,"second":113,"amount":-1.05},{"first":118,"second":115,"amount":-0.546},{"first":118,"second":116,"amount":0.546},{"first":118,"second":117,"amount":0.21},{"first":118,"second":118,"amount":1.05},{"first":118,"second":119,"amount":0.756},{"first":118,"second":120,"amount":0.126},{"first":118,"second":121,"amount":1.05},{"first":118,"second":122,"amount":-0.42},{"first":118,"second":125,"amount":-0.21},{"first":119,"second":32,"amount":-0.42},{"first":119,"second":34,"amount":0.21},{"first":119,"second":39,"amount":0.21},{"first":119,"second":41,"amount":-0.21},{"first":119,"second":44,"amount":-1.05},{"first":119,"second":45,"amount":-0.42},{"first":119,"second":46,"amount":-1.05},{"first":119,"second":47,"amount":-2.52},{"first":119,"second":58,"amount":0.21},{"first":119,"second":59,"amount":0.21},{"first":119,"second":63,"amount":0.63},{"first":119,"second":64,"amount":-0.21},{"first":119,"second":65,"amount":-0.756},{"first":119,"second":84,"amount":-2.1},{"first":119,"second":86,"amount":-0.42},{"first":119,"second":88,"amount":-0.63},{"first":119,"second":89,"amount":-1.05},{"first":119,"second":90,"amount":-0.63},{"first":119,"second":92,"amount":-0.21},{"first":119,"second":93,"amount":-0.21},{"first":119,"second":97,"amount":-0.756},{"first":119,"second":99,"amount":-0.756},{"first":119,"second":100,"amount":-0.756},{"first":119,"second":101,"amount":-0.756},{"first":119,"second":102,"amount":0.336},{"first":119,"second":103,"amount":-0.756},{"first":119,"second":111,"amount":-0.756},{"first":119,"second":113,"amount":-0.756},{"first":119,"second":115,"amount":-0.21},{"first":119,"second":116,"amount":0.336},{"first":119,"second":118,"amount":0.756},{"first":119,"second":119,"amount":0.42},{"first":119,"second":121,"amount":0.756},{"first":119,"second":122,"amount":-0.21},{"first":119,"second":125,"amount":-0.21},{"first":120,"second":32,"amount":-0.21},{"first":120,"second":34,"amount":-0.21},{"first":120,"second":39,"amount":-0.21},{"first":120,"second":41,"amount":-0.42},{"first":120,"second":45,"amount":-2.1},{"first":120,"second":47,"amount":-0.42},{"first":120,"second":63,"amount":-0.21},{"first":120,"second":64,"amount":-0.63},{"first":120,"second":65,"amount":0.84},{"first":120,"second":84,"amount":-2.31},{"first":120,"second":86,"amount":-1.05},{"first":120,"second":87,"amount":-0.63},{"first":120,"second":88,"amount":0.42},{"first":120,"second":89,"amount":-1.89},{"first":120,"second":90,"amount":0.21},{"first":120,"second":92,"amount":-0.63},{"first":120,"second":93,"amount":-0.42},{"first":120,"second":97,"amount":-1.68},{"first":120,"second":99,"amount":-1.68},{"first":120,"second":100,"amount":-1.68},{"first":120,"second":101,"amount":-1.68},{"first":120,"second":102,"amount":-0.42},{"first":120,"second":103,"amount":-1.68},{"first":120,"second":111,"amount":-1.68},{"first":120,"second":113,"amount":-1.68},{"first":120,"second":115,"amount":-1.05},{"first":120,"second":116,"amount":-0.42},{"first":120,"second":120,"amount":0.21},{"first":120,"second":122,"amount":0.21},{"first":120,"second":125,"amount":-0.42},{"first":121,"second":32,"amount":-0.42},{"first":121,"second":33,"amount":0.21},{"first":121,"second":34,"amount":0.42},{"first":121,"second":39,"amount":0.42},{"first":121,"second":41,"amount":-0.21},{"first":121,"second":42,"amount":0.42},{"first":121,"second":44,"amount":-1.68},{"first":121,"second":45,"amount":-0.84},{"first":121,"second":46,"amount":-1.68},{"first":121,"second":47,"amount":-2.52},{"first":121,"second":58,"amount":0.42},{"first":121,"second":59,"amount":0.42},{"first":121,"second":63,"amount":0.966},{"first":121,"second":64,"amount":-0.336},{"first":121,"second":65,"amount":-1.26},{"first":121,"second":84,"amount":-2.1},{"first":121,"second":86,"amount":-0.42},{"first":121,"second":88,"amount":-1.05},{"first":121,"second":89,"amount":-1.05},{"first":121,"second":90,"amount":-0.84},{"first":121,"second":92,"amount":-0.21},{"first":121,"second":93,"amount":-0.21},{"first":121,"second":97,"amount":-1.05},{"first":121,"second":99,"amount":-1.05},{"first":121,"second":100,"amount":-1.05},{"first":121,"second":101,"amount":-1.05},{"first":121,"second":102,"amount":0.546},{"first":121,"second":103,"amount":-1.05},{"first":121,"second":111,"amount":-1.05},{"first":121,"second":113,"amount":-1.05},{"first":121,"second":115,"amount":-0.546},{"first":121,"second":116,"amount":0.546},{"first":121,"second":117,"amount":0.21},{"first":121,"second":118,"amount":1.05},{"first":121,"second":119,"amount":0.756},{"first":121,"second":120,"amount":0.126},{"first":121,"second":121,"amount":1.05},{"first":121,"second":122,"amount":-0.42},{"first":121,"second":125,"amount":-0.21},{"first":122,"second":38,"amount":-0.42},{"first":122,"second":45,"amount":-1.47},{"first":122,"second":47,"amount":-0.21},{"first":122,"second":64,"amount":-0.63},{"first":122,"second":65,"amount":0.546},{"first":122,"second":84,"amount":-1.47},{"first":122,"second":86,"amount":-0.63},{"first":122,"second":87,"amount":-0.63},{"first":122,"second":88,"amount":0.21},{"first":122,"second":89,"amount":-1.47},{"first":122,"second":92,"amount":-0.42},{"first":122,"second":97,"amount":-1.176},{"first":122,"second":99,"amount":-1.176},{"first":122,"second":100,"amount":-1.176},{"first":122,"second":101,"amount":-1.176},{"first":122,"second":103,"amount":-1.176},{"first":122,"second":111,"amount":-1.176},{"first":122,"second":113,"amount":-1.176},{"first":122,"second":120,"amount":0.21},{"first":123,"second":48,"amount":-1.89},{"first":123,"second":49,"amount":-1.47},{"first":123,"second":50,"amount":-0.84},{"first":123,"second":51,"amount":-1.26},{"first":123,"second":52,"amount":-1.89},{"first":123,"second":53,"amount":-1.05},{"first":123,"second":54,"amount":-1.89},{"first":123,"second":55,"amount":0.42},{"first":123,"second":56,"amount":-1.47},{"first":123,"second":57,"amount":-1.26},{"first":123,"second":65,"amount":-0.84},{"first":123,"second":67,"amount":-1.26},{"first":123,"second":71,"amount":-1.26},{"first":123,"second":74,"amount":-1.05},{"first":123,"second":79,"amount":-1.26},{"first":123,"second":81,"amount":-1.26},{"first":123,"second":83,"amount":-1.47},{"first":123,"second":88,"amount":-0.63},{"first":123,"second":90,"amount":-0.21},{"first":123,"second":97,"amount":-0.21},{"first":123,"second":99,"amount":-0.21},{"first":123,"second":100,"amount":-0.21},{"first":123,"second":101,"amount":-0.21},{"first":123,"second":103,"amount":-0.21},{"first":123,"second":111,"amount":-0.21},{"first":123,"second":113,"amount":-0.21},{"first":123,"second":116,"amount":-0.21},{"first":123,"second":118,"amount":-0.21},{"first":123,"second":119,"amount":-0.21},{"first":123,"second":120,"amount":-0.42},{"first":123,"second":121,"amount":-0.21}]}')}},s={};function r(t){var e=s[t];if(void 0!==e){if(void 0!==e.error)throw e.error;return e.exports}var o=s[t]={id:t,loaded:!1,exports:{}};try{var i={id:t,module:o,factory:n[t],require:r};r.i.forEach((function(t){t(i)})),o=i.module,i.factory.call(o.exports,o,o.exports,i.require)}catch(t){throw o.error=t,t}return o.loaded=!0,o.exports}r.m=n,r.c=s,r.i=[],r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.hu=t=>t+"."+r.h()+".hot-update.js",r.miniCssF=t=>{},r.hmrF=()=>"main."+r.h()+".hot-update.json",r.h=()=>"491ec6ea3a94fad6101f",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="itsforgotham:",r.l=(n,s,o,i)=>{if(t[n])t[n].push(s);else{var a,u;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var l=c[d];if(l.getAttribute("src")==n||l.getAttribute("data-webpack")==e+o){a=l;break}}a||(u=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,r.nc&&a.setAttribute("nonce",r.nc),a.setAttribute("data-webpack",e+o),a.src=n),t[n]=[s];var h=(e,s)=>{a.onerror=a.onload=null,clearTimeout(f);var r=t[n];if(delete t[n],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((t=>t(s))),e)return e(s)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),u&&document.head.appendChild(a)}},r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t,e,n,s={},o=r.c,i=[],a=[],u="idle",c=0,d=[];function l(t){u=t;for(var e=[],n=0;n<a.length;n++)e[n]=a[n].call(null,t);return Promise.all(e)}function h(){0==--c&&l("ready").then((function(){if(0===c){var t=d;d=[];for(var e=0;e<t.length;e++)t[e]()}}))}function f(t){if("idle"!==u)throw new Error("check() is only allowed in idle status");return l("check").then(r.hmrM).then((function(n){return n?l("prepare").then((function(){var s=[];return e=[],Promise.all(Object.keys(r.hmrC).reduce((function(t,o){return r.hmrC[o](n.c,n.r,n.m,t,e,s),t}),[])).then((function(){return e=function(){return t?p(t):l("ready").then((function(){return s}))},0===c?e():new Promise((function(t){d.push((function(){t(e())}))}));var e}))})):l(g()?"ready":"idle").then((function(){return null}))}))}function m(t){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+u+")")})):p(t)}function p(t){t=t||{},g();var s=e.map((function(e){return e(t)}));e=void 0;var r=s.map((function(t){return t.error})).filter(Boolean);if(r.length>0)return l("abort").then((function(){throw r[0]}));var o=l("dispose");s.forEach((function(t){t.dispose&&t.dispose()}));var i,a=l("apply"),u=function(t){i||(i=t)},c=[];return s.forEach((function(t){if(t.apply){var e=t.apply(u);if(e)for(var n=0;n<e.length;n++)c.push(e[n])}})),Promise.all([o,a]).then((function(){return i?l("fail").then((function(){throw i})):n?p(t).then((function(t){return c.forEach((function(e){t.indexOf(e)<0&&t.push(e)})),t})):l("idle").then((function(){return c}))}))}function g(){if(n)return e||(e=[]),Object.keys(r.hmrI).forEach((function(t){n.forEach((function(n){r.hmrI[t](n,e)}))})),n=void 0,!0}r.hmrD=s,r.i.push((function(d){var p,g,v,_,y=d.module,b=function(e,n){var s=o[n];if(!s)return e;var r=function(r){if(s.hot.active){if(o[r]){var a=o[r].parents;-1===a.indexOf(n)&&a.push(n)}else i=[n],t=r;-1===s.children.indexOf(r)&&s.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+n),i=[];return e(r)},a=function(t){return{configurable:!0,enumerable:!0,get:function(){return e[t]},set:function(n){e[t]=n}}};for(var d in e)Object.prototype.hasOwnProperty.call(e,d)&&"e"!==d&&Object.defineProperty(r,d,a(d));return r.e=function(t){return function(t){switch(u){case"ready":l("prepare");case"prepare":return c++,t.then(h,h),t;default:return t}}(e.e(t))},r}(d.require,d.id);y.hot=(p=d.id,g=y,_={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=t!==p,_requireSelf:function(){i=g.parents.slice(),t=v?void 0:p,r(p)},active:!0,accept:function(t,e,n){if(void 0===t)_._selfAccepted=!0;else if("function"==typeof t)_._selfAccepted=t;else if("object"==typeof t&&null!==t)for(var s=0;s<t.length;s++)_._acceptedDependencies[t[s]]=e||function(){},_._acceptedErrorHandlers[t[s]]=n;else _._acceptedDependencies[t]=e||function(){},_._acceptedErrorHandlers[t]=n},decline:function(t){if(void 0===t)_._selfDeclined=!0;else if("object"==typeof t&&null!==t)for(var e=0;e<t.length;e++)_._declinedDependencies[t[e]]=!0;else _._declinedDependencies[t]=!0},dispose:function(t){_._disposeHandlers.push(t)},addDisposeHandler:function(t){_._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=_._disposeHandlers.indexOf(t);e>=0&&_._disposeHandlers.splice(e,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":e=[],Object.keys(r.hmrI).forEach((function(t){r.hmrI[t](p,e)})),l("ready");break;case"ready":Object.keys(r.hmrI).forEach((function(t){r.hmrI[t](p,e)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(p)}},check:f,apply:m,status:function(t){if(!t)return u;a.push(t)},addStatusHandler:function(t){a.push(t)},removeStatusHandler:function(t){var e=a.indexOf(t);e>=0&&a.splice(e,1)},data:s[p]},t=void 0,_),y.parents=i,y.children=[],i=[],d.require=b})),r.hmrC={},r.hmrI={}})(),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{if("undefined"!=typeof document){var t=(t,e,n,s,r)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css";return o.onerror=o.onload=n=>{if(o.onerror=o.onload=null,"load"===n.type)s();else{var i=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.href||e,u=new Error("Loading CSS chunk "+t+" failed.\n("+a+")");u.code="CSS_CHUNK_LOAD_FAILED",u.type=i,u.request=a,o.parentNode.removeChild(o),r(u)}},o.href=e,n?n.parentNode.insertBefore(o,n.nextSibling):document.head.appendChild(o),o},e=(t,e)=>{for(var n=document.getElementsByTagName("link"),s=0;s<n.length;s++){var r=(i=n[s]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(r===t||r===e))return i}var o=document.getElementsByTagName("style");for(s=0;s<o.length;s++){var i;if((r=(i=o[s]).getAttribute("data-href"))===t||r===e)return i}},n=[],s=[],o=t=>({dispose:()=>{for(var t=0;t<n.length;t++){var e=n[t];e.parentNode&&e.parentNode.removeChild(e)}n.length=0},apply:()=>{for(var t=0;t<s.length;t++)s[t].rel="stylesheet";s.length=0}});r.hmrC.miniCss=(i,a,u,c,d,l)=>{d.push(o),i.forEach((o=>{var i=r.miniCssF(o),a=r.p+i,u=e(i,a);u&&c.push(new Promise(((e,r)=>{var i=t(o,a,u,(()=>{i.as="style",i.rel="preload",e()}),r);n.push(u),s.push(i)})))}))}}})(),(()=>{var t,e,n,s,o,i=r.hmrS_jsonp=r.hmrS_jsonp||{main:0},a={};function u(e,n){return t=n,new Promise(((t,n)=>{a[e]=t;var s=r.p+r.hu(e),o=new Error;r.l(s,(t=>{if(a[e]){a[e]=void 0;var s=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+s+": "+r+")",o.name="ChunkLoadError",o.type=s,o.request=r,n(o)}}))}))}function c(t){function a(t){for(var e=[t],n={},s=e.map((function(t){return{chain:[t],id:t}}));s.length>0;){var o=s.pop(),i=o.id,a=o.chain,c=r.c[i];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var d=0;d<c.parents.length;d++){var l=c.parents[d],h=r.c[l];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([l]),moduleId:i,parentId:l};-1===e.indexOf(l)&&(h.hot._acceptedDependencies[i]?(n[l]||(n[l]=[]),u(n[l],[i])):(delete n[l],e.push(l),s.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function u(t,e){for(var n=0;n<e.length;n++){var s=e[n];-1===t.indexOf(s)&&t.push(s)}}r.f&&delete r.f.jsonpHmr,e=void 0;var c={},d=[],l={},h=function(t){console.warn("[HMR] unexpected require("+t.id+") to disposed module")};for(var f in n)if(r.o(n,f)){var m,p=n[f],g=!1,v=!1,_=!1,y="";switch((m=p?a(f):{type:"disposed",moduleId:f}).chain&&(y="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":t.onDeclined&&t.onDeclined(m),t.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+y));break;case"declined":t.onDeclined&&t.onDeclined(m),t.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+y));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(m),t.ignoreUnaccepted||(g=new Error("Aborted because "+f+" is not accepted"+y));break;case"accepted":t.onAccepted&&t.onAccepted(m),v=!0;break;case"disposed":t.onDisposed&&t.onDisposed(m),_=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(v)for(f in l[f]=p,u(d,m.outdatedModules),m.outdatedDependencies)r.o(m.outdatedDependencies,f)&&(c[f]||(c[f]=[]),u(c[f],m.outdatedDependencies[f]));_&&(u(d,[m.moduleId]),l[f]=h)}n=void 0;for(var b,x=[],w=0;w<d.length;w++){var j=d[w],E=r.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&l[j]!==h&&!E.hot._selfInvalidated&&x.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var t;s.forEach((function(t){delete i[t]})),s=void 0;for(var e,n=d.slice();n.length>0;){var o=n.pop(),a=r.c[o];if(a){var u={},l=a.hot._disposeHandlers;for(w=0;w<l.length;w++)l[w].call(null,u);for(r.hmrD[o]=u,a.hot.active=!1,delete r.c[o],delete c[o],w=0;w<a.children.length;w++){var h=r.c[a.children[w]];h&&((t=h.parents.indexOf(o))>=0&&h.parents.splice(t,1))}}}for(var f in c)if(r.o(c,f)&&(a=r.c[f]))for(b=c[f],w=0;w<b.length;w++)e=b[w],(t=a.children.indexOf(e))>=0&&a.children.splice(t,1)},apply:function(e){for(var n in l)r.o(l,n)&&(r.m[n]=l[n]);for(var s=0;s<o.length;s++)o[s](r);for(var i in c)if(r.o(c,i)){var a=r.c[i];if(a){b=c[i];for(var u=[],h=[],f=[],m=0;m<b.length;m++){var p=b[m],g=a.hot._acceptedDependencies[p],v=a.hot._acceptedErrorHandlers[p];if(g){if(-1!==u.indexOf(g))continue;u.push(g),h.push(v),f.push(p)}}for(var _=0;_<u.length;_++)try{u[_].call(null,b)}catch(n){if("function"==typeof h[_])try{h[_](n,{moduleId:i,dependencyId:f[_]})}catch(s){t.onErrored&&t.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[_],error:s,originalError:n}),t.ignoreErrored||(e(s),e(n))}else t.onErrored&&t.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[_],error:n}),t.ignoreErrored||e(n)}}}for(var y=0;y<x.length;y++){var w=x[y],j=w.module;try{w.require(j)}catch(n){if("function"==typeof w.errorHandler)try{w.errorHandler(n,{moduleId:j,module:r.c[j]})}catch(s){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:s,originalError:n}),t.ignoreErrored||(e(s),e(n))}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:j,error:n}),t.ignoreErrored||e(n)}}return d}}}self.webpackHotUpdateitsforgotham=(e,s,i)=>{for(var u in s)r.o(s,u)&&(n[u]=s[u],t&&t.push(u));i&&o.push(i),a[e]&&(a[e](),a[e]=void 0)},r.hmrI.jsonp=function(t,e){n||(n={},o=[],s=[],e.push(c)),r.o(n,t)||(n[t]=r.m[t])},r.hmrC.jsonp=function(t,a,d,l,h,f){h.push(c),e={},s=a,n=d.reduce((function(t,e){return t[e]=!1,t}),{}),o=[],t.forEach((function(t){r.o(i,t)&&void 0!==i[t]?(l.push(u(t,f)),e[t]=!0):e[t]=!1})),r.f&&(r.f.jsonpHmr=function(t,n){e&&r.o(e,t)&&!e[t]&&(n.push(u(t)),e[t]=!0)})},r.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(r.p+r.hmrF()).then((t=>{if(404!==t.status){if(!t.ok)throw new Error("Failed to fetch update manifest "+t.statusText);return t.json()}}))}})(),r("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),r("./node_modules/webpack/hot/dev-server.js"),r("./app/index.js");r("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,