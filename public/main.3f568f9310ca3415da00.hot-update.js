/*! For license information please see main.3f568f9310ca3415da00.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateitsforgotham("main",{"./app/animations/Hover.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s("./node_modules/splitting/dist/splitting.js"),o=s.n(i),a=s("./node_modules/gsap/index.js");class l{constructor(e){this.elements=e,o()({target:this.elements,by:"chars"})}init(e){this.target=this.elements[e],this.chars=this.target.querySelectorAll(".char"),this.animate_in()}reset(){this.animate_out()}animate_in(){a.default.set(this.chars,{"will-change":"opacity, transform",opacity:0,y:"120%",scaleY:2.3,scaleX:.7,transformOrigin:"50% 0%"}),a.default.to(this.chars,{duration:1,ease:"back.inOut(2)",opacity:1,y:"0%",scaleY:1,scaleX:1,stagger:.03}),a.default.to(this.elements,{duration:1,opacity:1})}animate_out(){a.default.to(this.chars,{duration:1,ease:"back.inOut(2)",opacity:0,y:"-120%",scaleY:0,scaleX:0,stagger:.03}),a.default.to(this.elements,{duration:1,opacity:0})}}},"./app/pages/home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./app/classes/Page.js"),o=s("./app/animations/Hover.js");class a extends i.default{constructor(){super({id:"home",element:".home",elements:{logo:"svg"}})}create(){super.create(),this.initAnimation()}initAnimation(){this.video_link_elements=document.querySelectorAll(".home__gallery__video__link"),this.image_link_elements=document.querySelectorAll(".home__gallery__image__link"),this.image_titles=document.querySelectorAll(".home__content__images__title__text"),this.video_titles=document.querySelectorAll(".home__content__videos__title__text"),this.selector_videos=document.querySelector(".selectors__videos"),this.selector_photos=document.querySelector(".selectors__photos"),this.onMutation(this.selector_videos,this.video_titles,this.video_link_elements),this.onMutation(this.selector_photos,this.image_titles,this.image_link_elements)}onMutation(e,t,s){const i=e.className;new MutationObserver((e=>{e.forEach((e=>{if("class"===e.attributeName){console.log(i);const a=e.target.className;console.log(a),i!==a?(console.log("class changed"),this.hover=new o.default(t),this.onHover(s)):(console.log("class removed"),this.hover=null)}}))})).observe(e,{attributes:!0,attributeFilter:["class"],childList:!1,characterData:!0})}onHover(e){e.forEach(((e,t)=>{e.addEventListener("mouseover",(()=>{this.hover.init(t)})),e.addEventListener("mouseleave",(()=>{this.hover.reset()}))}))}}}},(function(e){e.h=()=>"7ab0039cdc30b946b060"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,