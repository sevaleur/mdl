/*! For license information please see main.3a25323f021b2c32b975.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateitsforgotham("main",{"./app/components/Canvas/Home/menu/MenuElement.js":(e,t,i)=>{i.r(t),i.d(t,{default:()=>r});var s=i("./node_modules/ogl/src/core/Texture.js"),h=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./node_modules/gsap/index.js"),o=i("./app/shaders/home/vertex.glsl");Object(function(){var e=new Error("Cannot find module 'shaders/home/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}());class r{constructor({element:e,index:t,text:i,geometry:s,gl:h,length:a,scene:n,screen:o,viewport:r}){this.element=e,this.index=t,this.text=i,this.geo=s,this.gl=h,this.length=a,this.scene=n,this.screen=o,this.viewport=r,this.new_pos=0,this.createMesh(),this.createBounds()}createMesh(){const e=new Image,t=new s.Texture(this.gl,{generateMipmaps:!1});this.program=new h.Program(this.gl,{vertex:o.default,fragment:Object(function(){var e=new Error("Cannot find module 'shaders/home/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),uniforms:{tMap:{value:t},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_alpha:{value:0},u_offset:{value:0},u_strength:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}}}),e.crossOrigin="anonymous",e.src=this.element.getAttribute("data-src"),e.onload=()=>{this.program.uniforms.u_imageSize.value=[e.naturalWidth,e.naturalHeight],t.image=e},this.plane=new a.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.plane.setParent(this.scene)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.wrap=document.querySelector(".home__gallery__wrapper"),this.wrap_bounds=this.wrap.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y],this.full_width=this.wrap_bounds.width/this.screen.width*this.viewport.width}show(){n.default.fromTo(this.program.uniforms.u_alpha,{value:0,duration:1},{value:1,duration:1})}hide(){n.default.to(this.program.uniforms.u_alpha,{value:0,duration:1})}onResize(e){if(this.new_pos=0,e){const{screen:t,viewport:i}=e;t&&(this.screen=t),i&&(this.viewport=i,this.plane.program.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y];const e=n.default.utils.mapRange(0,this.viewport.width/2,0,-.3,Math.abs(this.plane.position.x));this.plane.scale.x+=e,this.plane.scale.y+=e}updateX(e=0){this.x=(this.bounds.left-e)/this.screen.width;const t=this.plane.position.x-this.x/100;this.plane.program.uniforms.u_offset.value=n.default.utils.mapRange(-4,4,-.35,.35,t),this.plane.position.x=this.viewport.width/2-this.plane.scale.x/2-this.x*this.viewport.width+this.new_pos}updateY(){this.y=this.bounds.top/this.screen.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y*this.viewport.height,this.plane.position.y+=1.25*Math.cos(this.plane.position.x/this.viewport.width*Math.PI)-1.25}update(e,t){if(this.bounds){if(this.updateScale(),this.updateX(e.current),this.updateY(),this.plane.program.uniforms.u_strength.value=(e.current-e.last)/this.screen.width*30,"up"===t){this.plane.position.x+this.plane.scale.x<-this.viewport.width/2&&(this.new_pos+=this.full_width)}if("down"===t){this.plane.position.x-this.plane.scale.x>this.viewport.width/2&&(this.new_pos-=this.full_width)}}}}}},(function(e){e.h=()=>"0363e71c8433c9b97fd2"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,