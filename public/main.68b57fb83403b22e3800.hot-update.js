/*! For license information please see main.68b57fb83403b22e3800.hot-update.js.LICENSE.txt */
self.webpackHotUpdateitsforgotham("main",{"./app/animations/Select.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});n("./node_modules/splitting/dist/splitting.css"),n("./node_modules/splitting/dist/splitting-cells.css");var r=n("./node_modules/splitting/dist/splitting.js"),i=n.n(r),s=n("./node_modules/gsap/index.js");class o{constructor(e,t){this.element=e,this.index=t,this.init()}init(){i()({target:["data-splitting"],by:"chars",key:null})}animate_in(){s.default.fromTo(this.element,{x:"100%"},{x:"-100%",duration:1,ease:"power.inOut",stagger:.2})}}},"./app/pages/home/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./app/classes/Page.js"),i=n("./app/animations/Select.js");class s extends r.default{constructor(){super({id:"home",element:".home",elements:{}}),this.init(),this.onHover()}create(){super.create()}init(){this.elements=document.querySelectorAll(".home__gallery__content__title__text")}onHover(){this.elements.forEach(((e,t)=>{e.addEventListener("mouseover",(()=>{this.select=new i.default(e,t),this.select.animate_in()}))}))}}},"./node_modules/splitting/dist/splitting.js":function(e){e.exports=function(){"use strict";var e=document,t=e.createTextNode.bind(e);function n(e,t,n){e.style.setProperty(t,n)}function r(e,t){return e.appendChild(t)}function i(t,n,i,s){var o=e.createElement("span");return n&&(o.className=n),i&&(!s&&o.setAttribute("data-"+n,i),o.textContent=i),t&&r(t,o)||o}function s(e,t){return e.getAttribute("data-"+t)}function o(t,n){return t&&0!=t.length?t.nodeName?[t]:[].slice.call(t[0].nodeName?t:(n||e).querySelectorAll(t)):[]}function l(e){for(var t=[];e--;)t[e]=[];return t}function a(e,t){e&&e.some(t)}function c(e){return function(t){return e[t]}}function u(e,t,r){var i="--"+t,s=i+"-index";a(r,(function(e,t){Array.isArray(e)?a(e,(function(e){n(e,s,t)})):n(e,s,t)})),n(e,i+"-total",r.length)}var d={};function p(e,t,n){var r=n.indexOf(e);if(-1==r)n.unshift(e),a(d[e].depends,(function(t){p(t,e,n)}));else{var i=n.indexOf(t);n.splice(r,1),n.splice(i,0,e)}return n}function f(e,t,n,r){return{by:e,depends:t,key:n,split:r}}function h(e){return p(e,0,[]).map(c(d))}function m(e){d[e.by]=e}function g(e,n,s,l,c){e.normalize();var u=[],d=document.createDocumentFragment();l&&u.push(e.previousSibling);var p=[];return o(e.childNodes).some((function(e){if(!e.tagName||e.hasChildNodes()){if(e.childNodes&&e.childNodes.length)return p.push(e),void u.push.apply(u,g(e,n,s,l,c));var r=e.wholeText||"",o=r.trim();o.length&&(" "===r[0]&&p.push(t(" ")),a(o.split(s),(function(e,t){t&&c&&p.push(i(d,"whitespace"," ",c));var r=i(d,n,e);u.push(r),p.push(r)}))," "===r[r.length-1]&&p.push(t(" ")))}else p.push(e)})),a(p,(function(e){r(d,e)})),e.innerHTML="",r(e,d),u}var v=0;function y(e,t){for(var n in t)e[n]=t[n];return e}var w="words",b=f(w,v,"word",(function(e){return g(e,"word",/\s+/,0,1)})),_="chars",x=f(_,[w],"char",(function(e,t,n){var r=[];return a(n[w],(function(e,n){r.push.apply(r,g(e,"char","",t.whitespace&&n))})),r}));function k(e){var t=(e=e||{}).key;return o(e.target||"[data-splitting]").map((function(n){var r=n["🍌"];if(!e.force&&r)return r;r=n["🍌"]={el:n};var i=h(e.by||s(n,"splitting")||_),o=y({},e);return a(i,(function(e){if(e.split){var i=e.by,s=(t?"-"+t:"")+e.key,l=e.split(n,o,r);s&&u(n,s,l),r[i]=l,n.classList.add(i)}})),n.classList.add("splitting"),r}))}function j(e){var t=(e=e||{}).target=i();return t.innerHTML=e.content,k(e),t.outerHTML}function N(e,t,n){var r=o(t.matching||e.children,e),i={};return a(r,(function(e){var t=Math.round(e[n]);(i[t]||(i[t]=[])).push(e)})),Object.keys(i).map(Number).sort(S).map(c(i))}function S(e,t){return e-t}k.html=j,k.add=m;var T=f("lines",[w],"line",(function(e,t,n){return N(e,{matching:n[w]},"offsetTop")})),L=f("items",v,"item",(function(e,t){return o(t.matching||e.children,e)})),M=f("rows",v,"row",(function(e,t){return N(e,t,"offsetTop")})),A=f("cols",v,"col",(function(e,t){return N(e,t,"offsetLeft")})),H=f("grid",["rows","cols"]),C="layout",E=f(C,v,v,(function(e,t){var l=t.rows=+(t.rows||s(e,"rows")||1),a=t.columns=+(t.columns||s(e,"columns")||1);if(t.image=t.image||s(e,"image")||e.currentSrc||e.src,t.image){var c=o("img",e)[0];t.image=c&&(c.currentSrc||c.src)}t.image&&n(e,"background-image","url("+t.image+")");for(var u=l*a,d=[],p=i(v,"cell-grid");u--;){var f=i(p,"cell");i(f,"cell-inner"),d.push(f)}return r(e,p),d})),O=f("cellRows",[C],"row",(function(e,t,n){var r=t.rows,i=l(r);return a(n[C],(function(e,t,n){i[Math.floor(t/(n.length/r))].push(e)})),i})),R=f("cellColumns",[C],"col",(function(e,t,n){var r=t.columns,i=l(r);return a(n[C],(function(e,t){i[t%r].push(e)})),i})),U=f("cells",["cellRows","cellColumns"],"cell",(function(e,t,n){return n[C]}));return m(b),m(x),m(T),m(L),m(M),m(A),m(H),m(E),m(O),m(R),m(U),k}()},"./node_modules/splitting/dist/splitting-cells.css":()=>{throw new Error("Module parse failed: Unexpected token (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> .splitting.cells img { width: 100%; display: block; }\n| \n| @supports ( display: grid ) {")},"./node_modules/splitting/dist/splitting.css":()=>{throw new Error("Module parse failed: Unexpected token (2:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n| /* Recommended styles for Splitting */\n> .splitting .word,\n| .splitting .char {\n|   display: inline-block;")}},(function(e){e.h=()=>"03f424635fdcf65f60d2"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,