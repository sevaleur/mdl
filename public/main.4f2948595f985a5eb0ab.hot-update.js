/*! For license information please see main.4f2948595f985a5eb0ab.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateitsforgotham("main",{"./app/components/Canvas/Home/menu/MenuElement.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var n=s("./node_modules/ogl/src/core/Texture.js"),i=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),r=s("./node_modules/gsap/index.js"),a=s("./app/shaders/home/element/vertex.glsl"),h=s("./app/shaders/home/element/fragment.glsl");s("./app/components/Canvas/Home/menu/Title.js");class l{constructor({element:e,index:t,text:s,geometry:n,gl:i,length:o,scene:r,screen:a,viewport:h}){this.element=e,this.index=t,this.text=s,this.geo=n,this.gl=i,this.length=o,this.scene=r,this.screen=a,this.viewport=h,this.new_pos=0,this.createMesh(),this.createBounds()}createMesh(){const e=new Image,t=new n.Texture(this.gl,{generateMipmaps:!1});this.program=new i.Program(this.gl,{vertex:a.default,fragment:h.default,uniforms:{tMap:{value:t},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_alpha:{value:0},u_offset:{value:0},u_strength:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}}}),e.crossOrigin="anonymous",e.src=this.element.getAttribute("data-src"),e.onload=()=>{this.program.uniforms.u_imageSize.value=[e.naturalWidth,e.naturalHeight],t.image=e},this.plane=new o.Mesh(this.gl,{geometry:this.geo,program:this.program}),this.plane.setParent(this.scene)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.wrap=document.querySelector(".home__gallery__wrapper"),this.wrap_bounds=this.wrap.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y],this.full_width=this.wrap_bounds.width/this.screen.width*this.viewport.width}show(){r.default.fromTo(this.program.uniforms.u_alpha,{value:0,duration:1},{value:1,duration:1})}hide(){r.default.to(this.program.uniforms.u_alpha,{value:0,duration:1})}onResize(e){if(this.new_pos=0,e){const{screen:t,viewport:s}=e;t&&(this.screen=t),s&&(this.viewport=s,this.plane.program.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.program.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y];const e=r.default.utils.mapRange(0,this.viewport.width/2,0,-.3,Math.abs(this.plane.position.x));this.plane.scale.x+=e,this.plane.scale.y+=e}updateX(e=0){this.x=(this.bounds.left-e)/this.screen.width;const t=this.plane.position.x-this.x/100;this.plane.program.uniforms.u_offset.value=r.default.utils.mapRange(-4,4,-.35,.35,t),this.plane.position.x=this.viewport.width/2-this.plane.scale.x/2-this.x*this.viewport.width+this.new_pos}updateY(){this.y=this.bounds.top/this.screen.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y*this.viewport.height,this.plane.position.y+=1.25*Math.cos(this.plane.position.x/this.viewport.width*Math.PI)-1.25}update(e,t){if(this.bounds){if(this.updateScale(),this.updateX(e.current),this.updateY(),this.plane.program.uniforms.u_strength.value=(e.current-e.last)/this.screen.width*30,"up"===t){this.plane.position.x+this.plane.scale.x<-this.viewport.width/2&&(this.new_pos+=this.full_width)}if("down"===t){this.plane.position.x-this.plane.scale.x>this.viewport.width/2&&(this.new_pos-=this.full_width)}}}}},"./app/components/Canvas/Home/menu/Title.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var n=s("./node_modules/ogl/src/core/Texture.js"),i=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/math/Color.js"),r=s("./node_modules/ogl/src/extras/Text.js"),a=s("./node_modules/ogl/src/core/Geometry.js"),h=s("./node_modules/ogl/src/core/Mesh.js");Object(function(){var e=new Error("Cannot find module 'fonts/freight.json'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'fonts/freight.png'");throw e.code="MODULE_NOT_FOUND",e}());var l=s("./app/shaders/home/text/vertex.glsl"),u=s("./app/shaders/home/text/fragment.glsl");class d{constructor({gl:e,plane:t,renderer:s,text:n}){this.gl=e,this.plane=t,this.renderer=s,this.text=n,this.createShader(),this.createMesh()}createShader(){}createMesh(){const e=new n.Texture(this.gl,{generateMipmaps:!1}),t=new Image;t.src=Object(function(){var e=new Error("Cannot find module 'fonts/freight.png'");throw e.code="MODULE_NOT_FOUND",e}()),t.onload=()=>e.image=t;const s=`${l.default}`,r=`\n      #extension GL_OES_standard_derivatives : enable\n      highp float prescision;\n\n      ${u.default}\n    `,a=`\n      #version 300 es\n      #define attribute in\n      #define varying out\n\n      ${l.default}\n    `,h=`\n      #version 300 es\n      precision highp float;\n      #define varying in\n      #define texture2D texture\n      #define gl_FragColor FragColor\n      out vec4 FragColor;\n\n      ${u.default}\n    `;let d=r,p=s;this.renderer.isWebgl2&&(d=h,p=a),this.program=new i.Program(this.gl,{cullFace:null,depthTest:!1,depthWrite:!1,transparent:!0,fragment:d,vertex:p,uniforms:{u_color:{value:new o.Color("#EEF1EF")},tMap:{value:e}}})}createMesh(){const e=new r.Text({align:"center",font:Object(function(){var e=new Error("Cannot find module 'fonts/freight.json'");throw e.code="MODULE_NOT_FOUND",e}()),letterSpacing:-.05,size:.08,text:this.text,wordSpacing:0}),t=new a.Geometry(this.gl,{position:{size:3,data:e.buffers.position},uv:{size:2,data:e.buffers.uv},id:{size:1,data:e.buffers.id},index:{data:e.buffers.index}});t.computeBoundingBox(),this.mesh=new h.Mesh(this.gl,{geometry:t,program:this.program}),this.mesh.position.y=.5*-this.plane.scale.y-.085,this.mesh.setParent(this.plane)}}},"./app/shaders/home/text/fragment.glsl":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n="#define GLSLIFY 1\nuniform vec3 u_color;\nuniform sampler2D tMap;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  vec3 color = texture2D(tMap, v_uv).rgb;\n\n  float signed = max(min(color.r, color.g), min(max(color.r, color.g), color.b)) - 0.5;\n  float d = fwidth(signed);\n  float alpha = smoothstep(-d, d, signed);\n\n  if (alpha < 0.02) discard;\n\n  gl_FragColor = vec4(u_color, alpha);\n}\n"},"./app/shaders/home/text/vertex.glsl":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n  v_uv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./node_modules/ogl/src/extras/Text.js":(e,t,s)=>{function n({font:e,text:t,width:s=1/0,align:n="left",size:i=1,letterSpacing:o=0,lineHeight:r=1.4,wordSpacing:a=0,wordBreak:h=!1}){const l=this;let u,d,p,c,g;const f=/\n/,m=/\s/;function w(){p=e.common.lineHeight,c=e.common.base,g=i/c;let s=t.replace(/[ \n]/g,"").length;d={position:new Float32Array(4*s*3),uv:new Float32Array(4*s*2),id:new Float32Array(4*s),index:new Uint16Array(6*s)};for(let e=0;e<s;e++)d.id.set([e,e,e,e],4*e),d.index.set([4*e,4*e+2,4*e+1,4*e+1,4*e+2,4*e+3],6*e);v()}function v(){const p=[];let c=0,w=0,v=0,_=y();function y(){const e={width:0,glyphs:[]};return p.push(e),w=c,v=0,e}let b=0;for(;c<t.length&&b<100;){b++;const e=t[c];if(!_.width&&m.test(e)){c++,w=c,v=0;continue}if(f.test(e)){c++,_=y();continue}const n=u[e]||u[" "];if(_.glyphs.length){const e=_.glyphs[_.glyphs.length-1][0];let t=x(n.id,e.id)*g;_.width+=t,v+=t}_.glyphs.push([n,_.width]);let r=0;if(m.test(e)?(w=c,v=0,r+=a*i):r+=o*i,r+=n.xadvance*g,_.width+=r,v+=r,_.width>s){if(h&&_.glyphs.length>1){_.width-=r,_.glyphs.pop(),_=y();continue}if(!h&&v!==_.width){let e=c-w+1;_.glyphs.splice(-e,e),c=w,_.width-=v,_=y();continue}}c++,b=0}_.width||p.pop(),function(t){const s=e.common.scaleW,o=e.common.scaleH;let a=.07*i,h=0;for(let e=0;e<t.length;e++){let l=t[e];for(let e=0;e<l.glyphs.length;e++){const t=l.glyphs[e][0];let i=l.glyphs[e][1];if("center"===n?i-=.5*l.width:"right"===n&&(i-=l.width),m.test(t.char))continue;i+=t.xoffset*g,a-=t.yoffset*g;let r=t.width*g,u=t.height*g;d.position.set([i,a-u,0,i,a,0,i+r,a-u,0,i+r,a,0],4*h*3);let p=t.x/s,c=t.width/s,f=1-t.y/o,w=t.height/o;d.uv.set([p,f-w,p,f,p+c,f-w,p+c,f],4*h*2),a+=t.yoffset*g,h++}a-=i*r}l.buffers=d,l.numLines=t.length,l.height=l.numLines*i*r,l.width=Math.max(...t.map((e=>e.width)))}(p)}function x(t,s){for(let n=0;n<e.kernings.length;n++){let i=e.kernings[n];if(!(i.first<t)&&!(i.second<s))return i.first>t||i.first===t&&i.second>s?0:i.amount}return 0}u={},e.chars.forEach((e=>u[e.char]=e)),w(),this.resize=function(e){({width:s}=e),v()},this.update=function(e){({text:t}=e),w()}}s.r(t),s.d(t,{Text:()=>n})},"./node_modules/ogl/src/math/Color.js":(e,t,s)=>{s.r(t),s.d(t,{Color:()=>i});var n=s("./node_modules/ogl/src/math/functions/ColorFunc.js");class i extends Array{constructor(e){return Array.isArray(e)?super(...e):super(...n.parseColor(...arguments))}get r(){return this[0]}get g(){return this[1]}get b(){return this[2]}set r(e){this[0]=e}set g(e){this[1]=e}set b(e){this[2]=e}set(e){return Array.isArray(e)?this.copy(e):this.copy(n.parseColor(...arguments))}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this}}},"./node_modules/ogl/src/math/functions/ColorFunc.js":(e,t,s)=>{s.r(t),s.d(t,{hexToRGB:()=>i,numberToRGB:()=>o,parseColor:()=>r});const n={black:"#000000",white:"#ffffff",red:"#ff0000",green:"#00ff00",blue:"#0000ff",fuchsia:"#ff00ff",cyan:"#00ffff",yellow:"#ffff00",orange:"#ff8000"};function i(e){4===e.length&&(e=e[0]+e[1]+e[1]+e[2]+e[2]+e[3]+e[3]);const t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t||console.warn(`Unable to convert hex string ${e} to rgb values`),[parseInt(t[1],16)/255,parseInt(t[2],16)/255,parseInt(t[3],16)/255]}function o(e){return[((e=parseInt(e))>>16&255)/255,(e>>8&255)/255,(255&e)/255]}function r(e){return void 0===e?[0,0,0]:3===arguments.length?arguments:isNaN(e)?"#"===e[0]?i(e):n[e.toLowerCase()]?i(n[e.toLowerCase()]):(console.warn("Color format not recognised"),[0,0,0]):o(e)}}},(function(e){e.h=()=>"0fc8fb28a30b84cf8eb5"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,